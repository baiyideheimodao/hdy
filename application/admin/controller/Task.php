<?php
/**
 *  Encoding : UTF-8
 *  Separator : Unix and OS X (\n)
 *  File Name : Task.php
 *  Create Date : 2022/1/4 9:24
 *  Version : 0.1
 *  Copyright : skylong Project Team Copyright (C)
 *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
 */

namespace app\admin\controller;
use app\common\controller\AdminController;
use think\Db;
use think\Exception;
use \think\facade\Cookie;
use think\facade\Env;

    class Task extends AdminController {

        public function initialize() {
            parent::initialize(); // TODO: Change the autogenerated stub
        }

        // 获取任务列表
        private function getList($is_fade = 0){
            $page = $this->request->post('page',$this->page);
            $limit = $this->request->post('limit',$this->limit);
            $admin_id = Cookie::get('id');
            $where = [];
            // todo::当前列表只显示未被隐藏的任务
            $where[] = ['t.is_fade','=',$is_fade];
            if((int)cookie('group_id') !== config('rx.groupId')){
                $where[] = ['t.admin_id','=',$admin_id];
            }
            $type = $this->request->param('type','');
            if($type !== ''){
                $where[] = ['t.type','=',$type];
            }
            $state = $this->request->param('state','');
            if($state !== ''){
                $where[] = ['t.state','=',$state];
            }
            $subject_id = $this->request->param('subject_id','');
            if(!empty($subject_id)){
                $where[] = ['ti.subject_id','=',$subject_id];
            }
            $version_id = $this->request->param('version_id','');
            if(!empty($version_id)){
                $where[] = ['ti.version_id','=',$version_id];
            }
            $project_id = $this->request->param('project_id','');
            if(!empty($project_id)){
                $where[] = ['ti.project_id','=',$project_id];
            }
            $course_index = $this->request->param('course_index','');
            if(!empty($course_index)){
                $course_index_id = get_course_index_id($course_index);
                if($course_index_id == 0){
                    $where[] = ['t.course_index_id','=',$course_index];
                }else{
                    $where[] = ['t.course_index_id','=',$course_index_id];
                    $where[] = ['t.sub_course_index_id','=',$course_index];
                }
            }
            if($type == 0){
                $page_num_start = $this->request->param('page_num_start','');
                $page_num_end = $this->request->param('page_num_end','');
                if($page_num_start != 0 && $page_num_end != 0){
                    $where[] = ['ti.page_num_start','>=',$page_num_start];
                    $where[] = ['ti.page_num_end','<=',$page_num_end];
                }elseif ($page_num_start != 0 && $page_num_end == 0){
                    $where[] = ['ti.page_num_start','>=',$page_num_start];
                    $where[] = ['ti.page_num_end','<=',$page_num_start];
                }elseif($page_num_start == 0 && $page_num_end != 0){
                    $where[] = ['ti.page_num_start','>=',$page_num_end];
                    $where[] = ['ti.page_num_end','<=',$page_num_end];
                }
                $level = $this->request->param('level','');
                if(!empty($level)){
                    $where[] = ['ti.level','=',$level];
                }
            }
            $name = $this->request->param('name','');
            if(!empty($name)){
                $where[] = ['t.name','like',"%{$name}%"];
            }

            $list = db('task')
                ->alias('t')
                ->join("admin a",'t.admin_id = a.id','left')
                ->join("task_index ti",'ti.task_id = t.id','left')
                ->join("subject su",'ti.subject_id = su.id','left')
                ->join("subject_version ve",'ti.version_id = ve.id','left')
                ->join("grade gra",'ti.grade_id = gra.id','left')
                ->join('course_index sub','t.sub_course_index_id = sub.id','left')
                ->field("t.id,t.admin_id,t.type,t.name,t.state,a.name admin_name,sub.`name` sub_name,t.times,FROM_UNIXTIME(t.create_time,'%Y-%m-%d') create_time,ti.level,su.name subject_name,ve.name version_name,gra.name grade_name")
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->order('t.id desc')
                ->select();
            $total = db('task')
                ->alias('t')
                ->join("task_index ti",'ti.task_id = t.id','left')
                ->join("grade gra",'ti.grade_id = gra.id','left')
                ->where($where)
                ->field("t.id")
                ->count();
            return $this->returnTabelJson($list,'查询成功',$total);
        }

        public function index(){
            if($this->request->isPost()){
                return $this->getList();
            }
            $subject = db('subject')->where("state = 1")->select();
            $version = db('subject_version')->where("state = 1")->select();
            $project = db('project')->where("state = 1")->select();
            $course_index_list = list_to_tree(db('course_index')->field('id,name,pid')->select());
            //项目
            $maker = db('subject_version_maker')->where("state = 1")->select();
            return $this->fetch('index',compact('subject','course_index_list','version','project','maker'));
        }

    public function fadeIndex(){
        if($this->request->isPost()){
            return $this->getList(1);
        }
        $subject = db('subject')->where("state = 1")->select();
        $version = db('subject_version')->where("state = 1")->select();
        $project = db('project')->where("state = 1")->select();
        $course_index_list = list_to_tree(db('course_index')->field('id,name,pid')->select());
        //项目
        $maker = db('subject_version_maker')->where("state = 1")->select();
        return $this->fetch('fade_index',compact('subject','course_index_list','version','project','maker'));
    }

    // 新增任务逻辑，单独提出，方便复制相关数据
    private function insertTask(){
        $admin_id = cookie('id');
        $data = $this->request->param();
        unset($data['id']);
        $question_ids = $data['question_id'];
        unset($data['question_id']);

        // 处理索引信息
        $dataIndex = [];
        $dataIndex['maker_id'] = $data['maker_id'];
        $dataIndex['subject_id'] = $data['subject_id'];
        $dataIndex['version_id'] = $data['version_id'];
        $dataIndex['grade_id'] = $data['grade_id'];
        $dataIndex['page_num_start'] = $data['page_num_start'];
        $dataIndex['page_num_end'] = $data['page_num_end'];
        $dataIndex['level'] = $data['level'];
        if(empty($data['sub_course_index_id'])){
            return [false,'创建失败：任务群未选择'];
        }
        $data['course_index_id'] = get_course_index_id($data['sub_course_index_id']);
        unset($data['maker_id'],$data['sub_name'],$data['subject_id'],$data['version_id'],$data['grade_id'],$data['page_num_start'],$data['page_num_end'],$data['level'],$data['file']);

        $data['admin_id'] = $admin_id;
        $data['update_time'] = time();
        $res = false;
        db()->startTrans();
        $data['create_time'] = time();
        $id = db('task')->insertGetId($data);
        if($id > 0){
            $inserts = [];
            foreach ($question_ids as $item){
                $inserts[] = [
                    'task_id' => $id,
                    'question_id' => $item['id'],
                    'question_sort' => $item['sort']
                ];
            }
            $res = db('task_question_log')->insertAll($inserts);

            // 处理索引
            $dataIndex['task_id'] = $id;
            db('task_index')->insertGetId($dataIndex);
        }
        if($res !== false){
            db()->commit();
            insert_admin_log('任务创建成功');
            return [true,'任务创建成功'];
        }
        db()->rollback();
        return [false,'任务创建失败'];
    }

        public function add(){
            $admin_id = cookie('id');
            if($this->request->isPost()){
                list($res,$msg) = $this->insertTask();
                if($res){
                    return $this->returnJson([],$msg,1);
                }
                return $this->returnJson([],$msg);
//                 $data = $this->request->param();
//                 unset($data['id']);
//
// //            if(!isset($data['question_id']) || count($data['question_id']) == 0){
// //                return $this->returnJson([],'请选择试题');
// //            }
//             $question_ids = $data['question_id'];
//             unset($data['question_id']);
//
//                 // 处理索引信息
//                 $dataIndex = [];
//             $dataIndex['maker_id'] = $data['maker_id'];
//                 $dataIndex['subject_id'] = $data['subject_id'];
//                 $dataIndex['version_id'] = $data['version_id'];
//                 $dataIndex['page_num_start'] = $data['page_num_start'];
//                 $dataIndex['page_num_end'] = $data['page_num_end'];
//                 $dataIndex['level'] = $data['level'];
//             if(empty($data['sub_course_index_id'])){
//                 return $this->returnJson([],'创建失败：任务群未选择');
//             }
//             $data['course_index_id'] = get_course_index_id($data['sub_course_index_id']);
//             //unset($data['project_id'],$data['subject_id'],$data['version_id'],$data['page_num_start'],$data['page_num_end'],$data['level'],$data['file']);
//             unset($data['maker_id'],$data['sub_name'],$data['subject_id'],$data['version_id'],$data['page_num_start'],$data['page_num_end'],$data['level'],$data['file']);
//
//
//                 // todo::2022-01-24 废除任务列表中的执行日期，改为分配任务时，再设置执行日期
//                 // $done_time = $this->request->param('done_time','');
//                 // if(empty($done_time)){
//                 //     return $this->returnJson([],'创建项目失败：项目执行日期不能为空');
//                 // }
//                 // if(strtotime($done_time) <= strtotime(date('Y-m-d').' 23:59:59')){
//                 //     return $this->returnJson([],'创建项目失败：项目执行日期不能早于今天日期');
//                 // }
//                 // $data['done_time'] = strtotime($done_time);
//                 $data['admin_id'] = $admin_id;
//                 $data['update_time'] = time();
//                 $res = false;
//                 db()->startTrans();
//                 $data['create_time'] = time();
//                 $id = db('task')->insertGetId($data);
//                 if($id > 0){
//                     $inserts = [];
//                     foreach ($question_ids as $item){
//                         $inserts[] = [
//                             'task_id' => $id,
//                         'question_id' => $item['id'],
//                         'question_sort' => $item['sort']
//                         ];
//                     }
//                     $res = db('task_question_log')->insertAll($inserts);
//
//                     // 处理索引
//                     $dataIndex['task_id'] = $id;
//                     db('task_index')->insertGetId($dataIndex);
//                 }
//                 if($res !== false){
//                     db()->commit();
//                     insert_admin_log('任务创建成功');
//                     return $this->returnJson($data,'任务创建成功',1);
//                 }
//                 db()->rollback();
//                 return $this->returnJson([],'任务创建失败');

        }
        $subject = db('subject')->where("state = 1")->select();
        $version = db('subject_version')->where("state = 1")->select();
        $grade = db('grade')->where("state=1")->select();
        $project = db('project')->where("state = 1")->select();
        $questions = db('question')->where("state = {$this->status['NORMAL']}")->select();
        $menus = list_to_tree(db('menu')->order('sort asc')->select());
        //项目
        $maker = db('subject_version_maker')->where("state = 1")->select();
        $questionFun = 'add';
        return $this->fetch('save',compact('questions','subject','grade','version','project','maker','menus','questionFun'));
    }



    public function edit(){
        $id = $this->request->param('id',0);
        $info = db('task t')
            ->join("pro p",'p.id = t.pro_url_id','left')
            ->join('course_index sub','t.sub_course_index_id = sub.id','left')
            ->field("t.*,p.title pro_url_title,sub.`name` sub_name")
            ->where("t.id = {$id}")
            ->find();

        if($this->request->isPost()){
	
            if($this->checkTaskIsPross($id)){
                return $this->returnJson([],'操作失败：当前任务库正在被使用，不可操作');
            }
            $data = $this->request->param();
            unset($data['sub_name']);
            if(isset($data['sub_course_index_id'])){
                $data['course_index_id'] = get_course_index_id($data['sub_course_index_id']);
            }
            if(isset($data['state'])){
                $data['update_time'] = time();
                $res = db('task')->where("id = {$id}")->update($data);
            }else{
                    if(!isset($data['question_id']) || count($data['question_id']) == 0){
                        return $this->returnJson([],'请选择试题');
                    }
                    $question_ids = $data['question_id'];
                    unset($data['question_id']);

                    // todo::2022-01-24 废除任务列表中的执行日期，改为分配任务时，再设置执行日期
                    // $done_time = $this->request->param('done_time','');
                    // if(empty($done_time)){
                    //     return $this->returnJson([],'创建项目失败：项目执行日期不能为空');
                    // }
                    // if(strtotime($done_time) <= strtotime(date('Y-m-d').' 23:59:59')){
                    //     return $this->returnJson([],'创建项目失败：项目执行日期不能早于今天日期');
                    // }
                    // $data['done_time'] = strtotime($done_time);
                    $data['update_time'] = time();

                    // 处理索引信息
                    $dataIndex = [];
                    $dataIndex['maker_id'] = $data['maker_id'];
                    $dataIndex['subject_id'] = $data['subject_id'];
                    $dataIndex['version_id'] = $data['version_id'];
                    $dataIndex['grade_id'] = $data['grade_id'];
                    $dataIndex['page_num_start'] = $data['page_num_start'];
                    $dataIndex['page_num_end'] = $data['page_num_end'];
                    $dataIndex['level'] = $data['level'];

                    unset($data['maker_id'],$data['subject_id'],$data['version_id'],$data['grade_id'],$data['page_num_start'],$data['page_num_end'],$data['level'],$data['file']);

                    db()->startTrans();
                    db('task_question_log')->where("task_id = {$id}")->delete();
                    db('task')->where("id = {$id}")->update($data);
                    $inserts = [];
                    foreach ($question_ids as $item){
                        $inserts[] = [
                            'task_id' => $id,
                        'question_id' => $item['id'],
                        'question_sort' => $item['sort']
                    ];
                }
                $res = db('task_question_log')->insertAll($inserts);
                db('task_index')->where("task_id = {$id}")->update($dataIndex);
            }
            if($res !== false){
                db()->commit();
                insert_admin_log('任务修改成功');
                return $this->returnJson($data,'操作成功',1);
            }
            db()->rollback();
            return $this->returnJson([],'操作失败');
        }
        // $info['done_time'] = date('Y-m-d',$info['done_time']);
        $question_ids = db('task_question_log')->where("task_id = {$id}")->field('question_id')->select();
        $info['question_ids'] = implode(',',array_column($question_ids,'question_id'));

        $info['url'] = '/admin/task/edit';
        $info['questions'] = db('question q')
            ->field('q.*,log.name data_log_name,tlog.question_sort')
            ->join('task_question_log tlog','q.id = tlog.question_id','left')
            ->join('data_log log','q.data_log_id = log.id','left')
            ->where("tlog.question_id in ({$info['question_ids']})")
            ->where('tlog.task_id',$id)
            ->order('tlog.question_sort desc')
            ->select();
        $task_index = db('task_index')->where("task_id = {$id}")->find();
        $info['index'] = empty($task_index) ? ['project_id'=>0,'subject_id'=>0,'version_id'=>0,'page_num_start'=>'','page_num_end'=>'','level'=>0] : $task_index;
        $subject = db('subject')->where("state = 1")->select();
        $version = db('subject_version')->where("state = 1")->select();
        $grade = db('grade')->where("state=1")->select();
        $project = db('project')->where("state = 1")->select();
        $questions = db('question')->where("state = {$this->status['NORMAL']}")->select();
        //项目
        $maker = db('subject_version_maker')->where("state = 1")->select();
        $menus = list_to_tree(db('menu')->order('sort asc')->select());
        $data_log_name_list = db('data_log')->field('id,name')->select();
        $questionFun = 'edit';
        return $this->fetch('save',compact('info','questions','subject','grade','version','project','maker','menus','data_log_name_list','questionFun'));
    }

    public function allot(){
        $task_id = $this->request->param('id',0);
        $task_ids = $this->request->param('ids','');
        if($this->request->isPost()){
            $class_ids = $this->request->param('class_ids',[]);
            $group_ids = $this->request->param('group_ids',[]);
            if(empty($class_ids) && empty($group_ids)){
                return $this->returnJson([],'请勾选班组或群组');
            }
            if(!empty($task_ids)){
                $allot_type = $this->request->param('allot_type',0); // 分配类型：默认统一分配
                switch (intval($allot_type)){
                    case 0:
                        // 统一分配
                        $done_time = $this->request->param('done_time','');
                        if(empty($done_time)){
                            return $this->returnJson([],'请选择任务执行日期');
                        }
                        $task_ids_arr = array_filter(explode(',',$task_ids));
                        $datas = [];
                        foreach ($class_ids as $item){
                            foreach ($task_ids_arr as $ids){
                                // todo::判断当前日期下当前任务是否已经分配当当前组
                                if($this->checkIsAllot(strtotime($done_time),$item,$ids)){
                                    continue;
                                }
                                $datas[] = [
                                    'task_id' => $ids,
                                    'type' => 1,
                                    'class_or_group_id' => $item,
                                    'done_time' => strtotime($done_time),
                                    'create_time' => time()
                                ];
                                $this->messageToClass('学习任务','您有一条新的学习任务，需要在'.date('Y-m-d',strtotime($done_time)).'进行答题','',$item,1);
                            }
                        }
                        break;
                    case 1:
                        // 间隔天数分配
                        $start_time = $this->request->param('start_time','');
                        if(empty($start_time)){
                            return $this->returnJson([],'请选择任务开始日期');
                        }
                        $inteval_time = $this->request->param('inteval_time','');
                        if(empty($inteval_time) || intval($inteval_time) < 0){
                            return $this->returnJson([],'请填写正确的间隔天数');
                        }
                        $task_ids_arr = array_filter(explode(',',$task_ids));
                        $sortList = $this->request->param('sort',[]);
                        $rangeTimes = record_all_days(strtotime($start_time),count($task_ids_arr),$inteval_time);
                        $datas = [];
                        asort($sortList);
                        $sort_task_ids = [];
                        foreach ($sortList as $key => $item){
                            if(in_array($key,$task_ids_arr)){
                                $sort_task_ids[] = $key;
                            }
                        }
                        foreach ($class_ids as $item){
                            foreach ($sort_task_ids as $key => $ids){
                                // todo::判断当前日期下当前任务是否已经分配当当前组
                                if($this->checkIsAllot($rangeTimes[$key],$item,$ids)){
                                    continue;
                                }
                                $datas[] = [
                                    'task_id' => $ids,
                                    'type' => 1,
                                    'class_or_group_id' => $item,
                                    'done_time' => $rangeTimes[$key],
                                    'create_time' => time()
                                ];
                                $this->messageToClass('学习任务','您有一条新的学习任务，需要在'.date('Y-m-d',$rangeTimes[$key]).'进行任务','',$item,1);
                            }
                        }
                        break;
                    case 2:
                        // 单一分配
                        $task_ids_arr = array_filter(explode(',',$task_ids));
                        $task_list = $this->request->param('task_list',[]);
                        foreach ($class_ids as $item){
                            foreach ($task_list as $key => $done_time){
                                if(!in_array($key,$task_ids_arr)){
                                    continue;
                                }
                                // todo::判断当前日期下当前任务是否已经分配当当前组
                                if($this->checkIsAllot(strtotime($done_time),$item,$key)){
                                    continue;
                                }
                                $datas[] = [
                                    'task_id' => $key,
                                    'type' => 1,
                                    'class_or_group_id' => $item,
                                    'done_time' => strtotime($done_time),
                                    'create_time' => time()
                                ];
                                $this->messageToClass('学习任务','您有一条新的学习任务，需要在'.date('Y-m-d',strtotime($done_time)).'进行任务','',$item,1);
                            }
                        }
                        break;
                    default:
                        return $this->returnJson([],'任务分配失败');
                        break;
                }
                db()->startTrans();
                try{
                    db('task_allot_log')->insertAll($datas);
                    db()->commit();
                    insert_admin_log('任务分配成功');

                    return $this->returnJson([],'任务分配成功',1);
                }catch (Exception $exception){
                    db()->rollback();
                    return $this->returnJson([],'任务分配失败');
                }
            }

            return $this->returnJson([],'');
        }
        $class_group_id = [];
        if(!empty($task_id)){
            $class_ids = db('task_allot_log')->where("task_id = {$task_id} and type = 1")->field('class_or_group_id')->select();
            $class_group_id = array_column($class_ids,'class_or_group_id');
        }
        $group_group_id = [];
        if(!empty($task_id)){
            $group_ids = db('task_allot_log')->where("task_id = {$task_id} and type = 2")->field('class_or_group_id')->select();
            $group_group_id = array_column($group_ids,'class_or_group_id');
        }
        $classes = db('class_group')->where("state = {$this->status['NORMAL']} and admin_id = ".\cookie('id'))->select();
        $groups = db('group_group')->where("state = {$this->status['NORMAL']} and admin_id = ".\cookie('id'))->select();
        // 获取任务列表
        $task_lists = Db::name('task')->where("id in ({$task_ids})")->select();
        foreach ($task_lists as $k => $item){
            $task_lists[$k]['chose_time'] = date('Y-m-d', time());
        }
        $area['province'] = action('admin/school/addressList',['id'=>0,'type'=>1]);
        $area['city'] = [];
        $area['area'] = [];
        $school = db('school')->where("state = 1")->select();
        $grade = db('grade')->where("state=1")->select();
        return $this->fetch('allot',compact('classes','groups','class_group_id','group_group_id','task_id','task_ids','task_lists','area','school','grade'));
    }


        public function del(){
            $id = $this->request->param('id',0);
            if($this->checkTaskIsPross($id)){
                return $this->returnJson([],'操作失败：当前任务库正在被使用，不可操作');
            }
            $res = db('task')->where("id = {$id}")->delete();
            $res = db('task_question_log')->where("task_id = {$id}")->delete();
            db('task_index')->where("task_id = {$id}")->delete();
            if($res !== false){
                insert_admin_log('任务删除成功');
                return $this->returnJson([],'删除成功',1);
            }
            return $this->returnJson([],'删除失败');
        }

    /**
     * 判断当前日期下当前任务是否已经分配当当前组
     * @param int $done_time
     * @param int $class_id
     * @param int $task_id
     * @return bool
     */
    private function checkIsAllot($done_time = 0,$class_id = 0,$task_id = 0,$type = 1){

        return db('task_allot_log')->where("task_id = {$task_id} and class_or_group_id = {$class_id} and type = {$type} and done_time = {$done_time}")->count() > 0;
    }

    //筛选所在班组
    public function class_group(){
        if($this->request->isGet()){
            $postData = $this->request->param();
            $res = db('class_group')->where($postData)->select();
            if ($res) {
                return json(['code' => 100, 'msg' => '获取成功', 'data' => $res]);
            } else {
                return json(['code' => 0, 'msg' => '没有筛选到指定班组']);
            }
        }
    }

    //商城商品
    public function prolist(){
        if($this->request->isPost()){
            $arr = ($this->request->param());
            $page = $this->request->post('page',$this->page);
            $limit = $this->request->post('limit',$this->limit);
            $where = '1=1';
            if (@$arr['pid']) {
                $proIdData = implode(',', ProGroupId($arr['pid']));
                $where .= "  and p.typeid in (" . $proIdData . ")";
            }
            $list = db('pro')
                ->alias('p')
                ->join('menu m','p.typeid = m.id','left')
                ->field('p.*,m.name type_name')
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->order('p.sort asc,p.id asc')
                ->select();
            $total = db('pro')
                ->alias('p')
                ->where($where)
                ->count();
            return $this->returnTabelJson($list,'查询成功',$total);
        }
    }

    public function copy(){
        if($this->request->isPost()){
            list($res,$msg) = $this->insertTask();
            if($res){
                $id = $this->request->param('id',0);
                if($id > 0){
                    // 隐藏指定任务库信息
                    db('task')->where('id',$id)->update(['is_fade'=>1]);
                    insert_admin_log('复制并隐藏指定任务库信息成功');
                }
                return $this->returnJson([],'操作成功',1);
            }
            return $this->returnJson([],'操作失败');
        }
        $id = $this->request->param('id',0);
        $info = db('task t')
            ->join("pro p",'p.id = t.pro_url_id','left')
            ->join('course_index sub','t.sub_course_index_id = sub.id','left')
            ->field("t.*,p.title pro_url_title,sub.`name` sub_name")
            ->where("t.id = {$id}")
            ->find();
        $question_ids = db('task_question_log')->where("task_id = {$id}")->field('question_id')->select();
        $info['question_ids'] = implode(',',array_column($question_ids,'question_id'));

        $info['questions'] = db('question q')
            ->field('q.*,log.name data_log_name,tlog.question_sort')
            ->join('task_question_log tlog','q.id = tlog.question_id','left')
            ->join('data_log log','q.data_log_id = log.id','left')
            ->where("tlog.question_id in ({$info['question_ids']})")
            ->where('tlog.task_id',$id)
            ->order('tlog.question_sort desc')
            ->select();
        $task_index = db('task_index')->where("task_id = {$id}")->find();
        $info['index'] = empty($task_index) ? ['project_id'=>0,'subject_id'=>0,'version_id'=>0,'page_num_start'=>'','page_num_end'=>'','level'=>0] : $task_index;
        $subject = db('subject')->where("state = 1")->select();
        $version = db('subject_version')->where("state = 1")->select();
        $grade = db('grade')->where("state=1")->select();
        $project = db('project')->where("state = 1")->select();
        $questions = db('question')->where("state = {$this->status['NORMAL']}")->select();
        //项目
        $maker = db('subject_version_maker')->where("state = 1")->select();
        $menus = list_to_tree(db('menu')->order('sort asc')->select());
        $data_log_name_list = db('data_log')->field('id,name')->select();
        return $this->fetch('copy',compact('info','questions','subject','version','grade','project','maker','menus','data_log_name_list'));
    }

    public function renew(){
        $id = $this->request->param('id',0);
        db('task')->where('id',$id)->update(['is_fade'=>0]);
        insert_admin_log('恢复指定任务成功');
        return $this->returnJson([],'操作成功',1);
    }

    public function fade(){
        $id = $this->request->param('id',0);
        db('task')->where('id',$id)->update(['is_fade'=>1]);
        insert_admin_log('隐藏指定任务成功');
        return $this->returnJson([],'操作成功',1);
    }

}
