<?php
    /**
     *  Encoding : UTF-8
     *  Separator : Unix and OS X (\n)
     *  File Name : Question.php
     *  Create Date : 2022/1/1 13:43
     *  Version : 0.1
     *  Copyright : skylong Project Team Copyright (C)
     *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
     */
    namespace app\admin\controller;
    use app\common\controller\AdminController;
    use OSS\Core\OssException;
    use \think\facade\Cookie;
    use think\facade\Env;

    class Question extends AdminController {
        private $admin_id = 0;

        public function initialize() {
            parent::initialize(); // TODO: Change the autogenerated stub
            $this->admin_id = cookie('id');
        }

        private function getList($is_fade = 0){
            $page = $this->request->post('page',$this->page);
            $limit = $this->request->post('limit',$this->limit);
            $where = [];
            // todo::当前列表只显示未被隐藏的任务
            $where[] = ['q.is_fade','=',$is_fade];
            $type = $this->request->param('type','');
            if($type !== ''){
                if($type == 2){
                    $where[] = ['q.type','=',2];
                }else{
                    $where[] = ['q.type','neq',2];
                }
            }

            $course_index = $this->request->param('course_index','');
            if(!empty($course_index)){
                $course_index_id = get_course_index_id($course_index);
                if($course_index_id == 0){
                    $where[] = ['q.course_index_id','=',$course_index];
                }else{
                    $where[] = ['q.course_index_id','=',$course_index_id];
                    $where[] = ['q.sub_course_index_id','=',$course_index];
                }
            }

            $subject_id = $this->request->param('subject_id','');
            if(!empty($subject_id)){
                $where[] = ['q.subject_id','=',$subject_id];
            }
            $version_id = $this->request->param('version_id','');
            if(!empty($version_id)){
                $where[] = ['q.version_id','=',$version_id];
            }
            $project_id = $this->request->param('project_id','');
            if(!empty($project_id)){
                $where[] = ['q.project_id','=',$project_id];
            }
            $data_log_id = $this->request->param('data_log_id','');
            if(!empty($data_log_id)){
                $where[] = ['log.id','=',$data_log_id];
            }
            $question_id = $this->request->param('question_id','');
            if(!empty($question_id)){
                $where[] = ['q.id','=',$question_id];
            }
            $data_log_name = $this->request->param('data_log_name','');
            if(!empty($data_log_name)){
                $where[] = ['log.name','like',"%{$data_log_name}%"];
            }
            $name = $this->request->param('name','');
            if(!empty($name)){
                $where[] = ['q.name','like',"%{$name}%"];
            }
            $page_num = $this->request->param('page_num','');
            if(!empty($page_num)){
                $where[] = ['q.page_num','=',$page_num];
            }
            $level = $this->request->param('level','');
            if(!empty($level)){
                $where[] = ['q.level','=',$level];
            }
            $list = db('question')
                ->alias('q')
                ->join('subject s','q.subject_id = s.id','left')
                ->join('admin a','q.admin_id = a.id','left')
                ->join('data_log log','q.data_log_id = log.id','left')
                ->join('course_index sub','q.sub_course_index_id = sub.id','left')
                ->field("q.id,q.type,q.name,q.level,log.name data_log_name,sub.`name` sub_name,s.name subject_name,FROM_UNIXTIME(q.create_time,'%Y-%m-%d') create_time,q.state,a.name admin_name,q.admin_id")
                ->where($where)
                ->order('q.id desc')
                ->limit(($page-1)*$limit,$limit)
                ->select();
            $total = db('question')
                ->join('data_log log','q.data_log_id = log.id','left')
                ->alias('q')
                ->where($where)
                ->count();

            return $this->returnTabelJson($list,'查询成功',$total);
        }

        public function index(){
            if($this->request->isPost()){
                return $this->getList();
            }
            $subject = db('subject')->where("state = 1")->select();
            $version = db('subject_version')->where("state = 1")->select();
            $maker = db('subject_version_maker')->where("state = 1")->select();
            $project = db('project')->where("state = 1")->select();
            $name_list = db('question')->field('id,name')->where("admin_id = {$this->admin_id}")->select();
            $data_log_name_list = db('data_log')->field('id,name')->where("admin_id = {$this->admin_id}")->select();
            $course_index_list = list_to_tree(db('course_index')->field('id,name,pid')->select());
            return $this->fetch('index',compact('subject','version','project','course_index_list','maker','name_list','data_log_name_list'));
        }

        public function fadeIndex(){
            if($this->request->isPost()){
                return $this->getList(1);
            }
            $subject = db('subject')->where("state = 1")->select();
            $version = db('subject_version')->where("state = 1")->select();
            $maker = db('subject_version_maker')->where("state = 1")->select();
            $project = db('project')->where("state = 1")->select();
            $name_list = db('question')->field('id,name')->where("admin_id = {$this->admin_id}")->select();
            $data_log_name_list = db('data_log')->field('id,name')->where("admin_id = {$this->admin_id}")->select();
            $course_index_list = list_to_tree(db('course_index')->field('id,name,pid')->select());
            return $this->fetch('fade_index',compact('subject','version','project','course_index_list','maker','name_list','data_log_name_list'));
        }

        public function add(){
            if($this->request->isPost()){
                $type = $this->request->param('type',1);
                switch (intval($type)){
                    case 1:
                        list($res,$msg,$data) =  $this->dealLook($type);
                        break;
                    case 2:
                        list($res,$msg,$data) = $this->dealRecord();
                        break;
                    case 3:
                        list($res,$msg,$data) = $this->dealChoose($type);
                        break;
                    case 4:
                        list($res,$msg,$data) = $this->dealLook($type);
                        break;
                    case 5:
                        list($res,$msg,$data) = $this->dealChoose($type);
                        break;
                    default:
                        list($res,$msg,$data) = $this->dealLook();
                        break;
                }
                if($res){
                    return $this->returnJson($data,$msg,1);
                }
                return $this->returnJson($data,$msg);
            }
            $menus = list_to_tree(db('menu')->order('sort asc')->select());
            // 区域列表
            $areas = db('area')->where("p_id != 0")->select();
            $project = db('project')->where("state = 1")->select();
            $subject = db('subject')->where("state = 1")->select();
            $version = db('subject_version')->where("state = 1")->select();
            $maker = db('subject_version_maker')->where("state = 1")->select();
            $data_log = db('data_log')->where("admin_id = {$this->admin_id}")->select();
            return $this->fetch('add',compact('areas','project','subject','version','maker','data_log','menus'));
        }



        // 检测题处理
        private function dealChoose($type = 3){
            $project_id = $this->request->param('project_id',0);
//            if(empty($project_id)){
//                return $this->returnJson([],'创建失败：项目未选择');
//            }
            $sub_course_index_id = $this->request->param('sub_course_index_id',0);
            if(empty($sub_course_index_id)){
                return [false,'创建失败：任务群未选择',[]];
            }
            $subject_id = $this->request->param('subject_id',0);
            if(empty($subject_id)){
                return [false,'创建失败：科目未选择',[]];
            }
            $version_id = $this->request->param('version_id',0);
            if(empty($version_id)){
                return [false,'创建失败：版本未选择',[]];
            }
            $data_log_name = $this->request->param('data_log_name','');
            $data_log_id = 0;
            if(!empty($data_log_name)){
                // 判断当前数据记录是否定义
                $data_log_info = db('data_log')->where("admin_id = {$this->admin_id} and name = '{$data_log_name}'")->find();
                if(empty($data_log_info)){
                    $data_log_id = db('data_log')->insertGetId(['name'=>$data_log_name,'admin_id'=>$this->admin_id,'create_time'=>time()]);
                }else{
                    $data_log_id = $data_log_info['id'];
                }
            }

            $course_index_id = get_course_index_id($sub_course_index_id);
            $level = $this->request->param('level',1);
            $pages = $this->request->param('pages','');
            $page_num = $this->request->param('page_num',0);
            $question_num = $this->request->param('question_num',0);
            $name = $this->request->param('name','');
            if(empty($name)){
                return [false,'创建失败：题干文字不能为空',[]];
            }
            $images = $this->request->param('images','');
            $desc = $this->request->param('desc','');
            $file_type = $this->request->param('file_type','');
            $options = $this->request->param('options',[]);
            $answer = $this->request->param('answer','');
            if(empty($answer)){
                return [false,'创建失败：答案未选择',[]];
            }
            $data = [
                'type' => $type,
                'name' => $name,
                'course_index_id' => $course_index_id,
                'sub_course_index_id' => $sub_course_index_id,
                'desc' => $desc,
                'project_id' => $project_id,
                'subject_id' => $subject_id,
                'version_id' => $version_id,
                'data_log_id' => $data_log_id,
                'pages' => empty($pages)?'':implode('-',$pages),
                'page_num' => $page_num,
                'question_num' => $question_num,
                'level' => $level,
                'images' => $images,
                'file_type' => $file_type,
                'options' => serialize($options),
                'answer' => serialize([$answer]),
                'create_time' => time(),
                'update_time' => time(),
                'admin_id' => $this->admin_id
            ];
            $id = db('question')->insertGetId($data);
            if($id > 0){
                insert_admin_log(($type == 3?'选择题':'判断题') . '创建成功');
                return [true,'创建成功',['id'=>$id]];
            }
            return [false,'创建失败',[]];
        }

        // 记录题处理
        private function dealRecord(){
            $project_id = $this->request->param('project_id',0);
//            if(empty($project_id)){
//                return $this->returnJson([],'创建失败：项目未选择');
//            }
            $sub_course_index_id = $this->request->param('sub_course_index_id',0);
            if(empty($sub_course_index_id)){
                return [false,'创建失败：任务群未选择',[]];
            }
            $subject_id = $this->request->param('subject_id',0);
            if(empty($subject_id)){
                return [false,'创建失败：科目未选择',[]];
            }
            $desc = $this->request->param('desc','');
            $data_log_name = $this->request->param('data_log_name','');
            if(empty($data_log_name)){
                return [false,'创建失败：名称不能为空',[]];
            }
            $name = $this->request->param('name','');
            if(empty($name)){
                return [false,'创建失败：题干文字不能为空',[]];
            }
            // 判断当前数据记录是否定义
            $data_log_info = db('data_log')->where("admin_id = {$this->admin_id} and name = '{$data_log_name}'")->find();
            if(empty($data_log_info)){
                $data_log_id = db('data_log')->insertGetId(['name'=>$data_log_name,'admin_id'=>$this->admin_id,'create_time'=>time()]);
            }else{
                $data_log_id = $data_log_info['id'];
            }
            $options = $this->request->param('options','');
            if(empty($options)){
                return [false,'创建失败：内容不能为空',[]];
            }

            $ext = $this->request->param('ext',[]);
            if(empty($ext)){
            // if(empty($ext) || empty(current($ext)) || empty(end($ext))){
                return [false,'创建失败：记录数据不能为空',[]];
            }
            $course_index_id = get_course_index_id($sub_course_index_id);
            $data = [
              'type' => 2,
              'name' => $name,
            'course_index_id' => $course_index_id,
            'sub_course_index_id' => $sub_course_index_id,
              'desc' => $desc,
              'project_id' => $project_id,
              'subject_id' => $subject_id,
              'data_log_id' => $data_log_id,
              'options' => $options,
              'ext' => serialize($ext),
              'create_time' => time(),
              'update_time' => time(),
              'admin_id' => $this->admin_id
            ];
            $id = db('question')->insertGetId($data);
            if($id > 0){
                insert_admin_log('记录题创建成功');
                return [true,'创建成功',['id'=>$id]];
            }
            return [false,'创建失败',[]];
        }

        // 监督题处理
        private function dealLook($type = 1){
            $project_id = $this->request->param('project_id',0);
//            if(empty($project_id)){
//                return $this->returnJson([],'创建失败：项目未选择');
//            }
            $sub_course_index_id = $this->request->param('sub_course_index_id',0);
            if(empty($sub_course_index_id)){
                return [false,'创建失败：任务群未选择',[]];
            }
            $subject_id = $this->request->param('subject_id',0);
            if(empty($subject_id)){
                return [false,'创建失败：科目未选择',[]];
            }
            $version_id = $this->request->param('version_id',0);
            if(empty($version_id)){
                return [false,'创建失败：版本未选择',[]];
            }
            $maker_id = $this->request->param('maker_id',0);
            $answer_file_image = $this->request->param('answer_file_image',0);
            $answer_file_text = $this->request->param('answer_file_text',0);
            $pages = $this->request->param('pages','');
            $page_num = $this->request->param('page_num',0);
            $question_num = $this->request->param('question_num',0);
            // if(!empty($maker_id)){
            //     if(empty($pages) || empty($page_num) || empty($question_num)){
            //         return $this->returnJson([],'创建失败：材料页数及题号不能为空');
            //     }
            // }
            $data_log_name = $this->request->param('data_log_name','');
            $data_log_id = 0;
            if(!empty($data_log_name)){
                // 判断当前数据记录是否定义
                $data_log_info = db('data_log')->where("admin_id = {$this->admin_id} and name = '{$data_log_name}'")->find();
                if(empty($data_log_info)){
                    $data_log_id = db('data_log')->insertGetId(['name'=>$data_log_name,'admin_id'=>$this->admin_id,'create_time'=>time()]);
                }else{
                    $data_log_id = $data_log_info['id'];
                }
            }
            $level = $this->request->param('level',1);
            $name = $this->request->param('name','');
            if(empty($name)){
                return [false,'创建失败：题干文字不能为空',[]];
            }
            $desc = $this->request->param('desc','');
            $images = $this->request->param('images','');
            $file_type = $this->request->param('file_type','');
            $answer = $this->request->param('answer',[]);
            $course_index_id = get_course_index_id($sub_course_index_id);
            $data = [
              'type' => $type,
              'name' => $name,
                'course_index_id' => $course_index_id,
                'sub_course_index_id' => $sub_course_index_id,
              'desc' => $desc,
              'images' => $images,
              'project_id' => $project_id,
              'subject_id' => $subject_id,
              'version_id' => $version_id,
              'data_log_id' => $data_log_id,
              'maker_id' => $maker_id,
              'pages' => empty($pages)?'':implode('-',$pages),
              'page_num' => $page_num,
              'question_num' => $question_num,
              'level' => $level,
              'file_type' => $file_type,
              'answer' => serialize($answer),
              'answer_file_image' => $answer_file_image,
              'answer_file_text' => $answer_file_text,
              'create_time' => time(),
              'update_time' => time(),
              'admin_id' => $this->admin_id
            ];
            $id = db('question')->insertGetId($data);
            if($id > 0){
                insert_admin_log(($type == 1?'问答题':'填空题') . '创建成功');
                return [true,'创建成功',['id'=>$id]];
            }
            return [false,'创建失败',[]];
        }

        public function edit(){
            $id = $this->request->param('id',0);
            $info = db('question')
                ->alias('q')
                ->join('course_index sub','q.sub_course_index_id = sub.id','left')
                ->join("data_log dl",'q.data_log_id = dl.id','left')
                ->where("q.id = {$id}")
                ->field("q.*,dl.name data_log_name,sub.`name` sub_name")
                ->find();
            if($this->request->isPost()){
                if($this->checkTaskIsPross(0,$id)){
                    return $this->returnJson([],'操作失败：当前试题正在被使用，不可操作');
                }
                $update = [];
                $data = $this->request->param();
                if(isset($data['state'])){
                    $update['state'] = $data['state'];
                }

                $update =  $this->dealEdit($data,$update,$info['type']);

                if(empty($update)){
                    return $this->returnJson([],'操作成功',1);
                }
                $update['update_time'] = time();
                $update['sub_course_index_id'] = $data['sub_course_index_id'];

                $res = db('question')->where("id = {$id}")->update($update);
                if($res !== false){
                    insert_admin_log('更新试题成功');
                    return $this->returnJson([],'操作成功',1);
                }
                return $this->returnJson([],'操作失败');
            }
            $menus = list_to_tree(db('menu')->order('sort asc')->select());
            $info = $this->getAll($info);
            $info['url'] = '/admin/question/edit';
            $project = db('project')->where("state = 1")->select();
            $subject = db('subject')->where("state = 1")->select();
            $version = db('subject_version')->where("state = 1")->select();
            $maker = db('subject_version_maker')->where("state = 1")->select();
            $data_log = db('data_log')->where("admin_id = {$this->admin_id}")->select();
            return $this->fetch('save',compact('info','project','subject','version','maker','data_log','menus'));
        }

        // 处理编辑信息
        private function dealEdit($data = [],$update = [],$type = 1){
            if(isset($data['name'])){
                if(empty($data['name'])){
                    return $this->returnJson([],'更新失败：题干文字不能为空');
                }
                $update['name'] = $data['name'];
            }
            if(isset($data['desc'])){
                $update['desc'] = $data['desc'];
            }
            if(isset($data['project_id'])){
                $update['project_id'] = $data['project_id'];
            }
            if(isset($data['subject_id'])){
                $update['subject_id'] = $data['subject_id'];
            }
            if(isset($data['version_id'])){
                $update['version_id'] = $data['version_id'];
            }
            if(isset($data['maker_id'])){
                $update['maker_id'] = $data['maker_id'];
            }
            if(isset($data['pages'])){
                $update['pages'] = empty($data['pages'])?'':implode('-',$data['pages']);
            }
            if(isset($data['page_num'])){
                $update['page_num'] = $data['page_num'];
            }
            if(isset($data['question_num'])){
                $update['question_num'] = $data['question_num'];
            }
            if(isset($data['level'])){
                $update['level'] = $data['level'];
            }
            if(isset($data['data_log_name'])){
                if(!empty($data['data_log_name'])){
                    // 判断当前数据记录是否定义
                    $data_log_info = db('data_log')->where("admin_id = {$this->admin_id} and name = '{$data['data_log_name']}'")->find();
                    if(empty($data_log_info)){
                        $data_log_id = db('data_log')->insertGetId(['name'=>$data['data_log_name'],'admin_id'=>$this->admin_id,'create_time'=>time()]);
                    }else{
                        $data_log_id = $data_log_info['id'];
                    }
                    $update['data_log_id'] = $data_log_id;
                }else{
                    $update['data_log_id'] = 0;
                }
            }
            if(isset($data['sub_course_index_id'])){
                $update['sub_course_index_id'] = $data['sub_course_index_id'];
                $update['course_index_id'] = get_course_index_id($data['sub_course_index_id']);
            }
            switch (intval($type)){
                case 1:
                    if(isset($data['images'])){
                        $update['images'] = $data['images'];
                        $update['file_type'] = $data['file_type'];
                    }
                    if(isset($data['answer'])){
                        $update['answer'] = serialize($data['answer']);
                    }
                    break;
                case 2:
                    if(isset($data['options'])){
                        $update['options'] = $data['options'];
                    }
                    if(isset($data['ext'])){
                        $update['ext'] = serialize($data['ext']);
                    }
                    break;
                case 3:
                    if(isset($data['images'])){
                        $update['images'] = $data['images'];
                        $update['file_type'] = $data['file_type'];
                    }
                    if(isset($data['options'])){
                        $update['options'] = serialize($data['options']);
                    }
                    if(isset($data['answer'])){
                        $update['answer'] = serialize([$data['answer']]);
                    }
                case 5:
                    if(isset($data['images'])){
                        $update['images'] = $data['images'];
                        $update['file_type'] = $data['file_type'];
                    }
                    if(isset($data['options'])){
                        $update['options'] = serialize($data['options']);
                    }
                    if(isset($data['answer'])){
                        $update['answer'] = serialize([$data['answer']]);
                    }
                    break;
            }
            return $update;
        }

        public function copy(){
            $id = $this->request->param('id',0);
            if($this->request->isPost()){
                $type = $this->request->param('type',1);
                switch (intval($type)){
                    case 1:
                        list($res,$msg,$data) =  $this->dealLook($type);
                        break;
                    case 2:
                        list($res,$msg,$data) = $this->dealRecord();
                        break;
                    case 3:
                        list($res,$msg,$data) = $this->dealChoose($type);
                        break;
                    case 4:
                        list($res,$msg,$data) = $this->dealLook($type);
                        break;
                    case 5:
                        list($res,$msg,$data) = $this->dealChoose($type);
                        break;
                    default:
                        list($res,$msg,$data) = $this->dealLook();
                        break;
                }
                if($res){
                    if($id > 0){
                        db('question')->where('id',$id)->update(['is_fade' => 1]);
                        insert_admin_log('隐藏指定试题完成');
                    }
                    return $this->returnJson($data,$msg,1);
                }
                return $this->returnJson($data,$msg);
            }
            $info = db('question')
                ->alias('q')
                ->join('course_index sub','q.sub_course_index_id = sub.id','left')
                ->join("data_log dl",'q.data_log_id = dl.id','left')
                ->where("q.id = {$id}")
                ->field("q.*,dl.name data_log_name,sub.`name` sub_name")
                ->find();
            $menus = list_to_tree(db('menu')->order('sort asc')->select());
            $info = $this->getAll($info);
            $project = db('project')->where("state = 1")->select();
            $subject = db('subject')->where("state = 1")->select();
            $version = db('subject_version')->where("state = 1")->select();
            $maker = db('subject_version_maker')->where("state = 1")->select();
            $data_log = db('data_log')->where("admin_id = {$this->admin_id}")->select();
            return $this->fetch('copy',compact('info','project','subject','version','maker','data_log','menus'));
        }

        private function getAll($info){
            $info['options'] = $info['type'] == 2 ? $info['options'] : @unserialize($info['options']);
            $info['answer'] = @unserialize($info['answer']);
            $info['ext'] = @unserialize($info['ext']);
            $info['pages'] = empty($info['pages'])?['','']:explode('-',$info['pages']);
            return $info;
        }

        public function del(){
            $id = $this->request->param('id',0);
            if($this->checkTaskIsPross(0,$id)){
                return $this->returnJson([],'操作失败：当前试题正在被使用，不可操作');
            }
            // 判断当前任务是否已开启
            $count = db('task_question_log')->where("question_id = {$id}")->count();
            if($count > 0){
                return $this->returnJson([],'删除失败:当前试题已存在与任务中');
            }
            $info = db('question')->where("id = {$id}")->find();
            if($info['type'] == 1){
                if(!empty($info['images'])){
                    @unlink($info['images']);
                }
                $answer = @unserialize($info['answer']);
                $answer = empty($answer)?[]:$answer;
                foreach ($answer as $item){
                    if(!empty($item['image'])){
                        @unlink($item['image']);
                    }
                }
            }elseif($info['type'] == 2){
                if(!empty($info['images'])){
                    @unlink($info['images']);
                }
                $options = @unserialize($info['options']);
                $options = empty($options)?[]:$options;
                foreach ($options as $item){
                    if(!empty($item['image'])){
                        @unlink($item['image']);
                    }
                }
            }else{
                if(!empty($info['images'])){
                    @unlink($info['images']);
                }
                $options = @unserialize($info['options']);
                $options = empty($options)?[]:$options;
                foreach ($options as $item){
                    @unlink($item['image']);
                }
            }
            $res = db('question')->where("id = {$id}")->delete();
            if($res !== false){
                insert_admin_log('删除试题成功');
                return $this->returnJson([],'删除成功',1);
            }
            return $this->returnJson([],'删除失败');
        }

        public function upload_pic(){
            $files = request()->file('file');
            $path = Env::get('root_path') . DIRECTORY_SEPARATOR. 'public' . DIRECTORY_SEPARATOR . 'upload' . DIRECTORY_SEPARATOR . 'question_image';
            $info = $files->move($path);
            if($info){
                $filePath = $info->getSaveName();
                $object = 'upload/question_image/' . str_replace('\\', '/', $filePath);
                if(config('sys_data.upload_mode') == 1){
                    if(config('sys_data.accessKeyId') && config('sys_data.accessKeySecret') && config('sys_data.endpoint')){
                        $bucket = config('sys_data.bucket');
                        $filePath = $path . DIRECTORY_SEPARATOR .$filePath;
                        try{
                            $this->uploadFile($bucket, $object, $filePath);
                            $filePath = 'http://'.$bucket.'.'.config('sys_data.endpoint').DIRECTORY_SEPARATOR.$object ;
                            @unlink($object);
                            return $this->returnJson(['src'=>$filePath,'title'=>''],'success');
                        }catch (OssException $ossException){
                            return $this->returnJson([],$ossException->getMessage(),1);
                        }
                    }
                }
                return $this->returnJson(['src'=>DIRECTORY_SEPARATOR . $object,'title'=>''],'success');
            }else{
                return $this->returnJson([],'error',1);
            }

        }


        public function renew(){
            $id = $this->request->param('id',0);
            db('question')->where('id',$id)->update(['is_fade'=>0]);
            insert_admin_log('恢复指定试题成功');
            return $this->returnJson([],'操作成功',1);
        }

        public function fade(){
            $id = $this->request->param('id',0);
            db('question')->where('id',$id)->update(['is_fade'=>1]);
            insert_admin_log('隐藏指定试题成功');
            return $this->returnJson([],'操作成功',1);
        }
    }
