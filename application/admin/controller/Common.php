<?php
    /**
     *  Encoding : UTF-8
     *  Separator : Unix and OS X (\n)
     *  File Name : Common.php
     *  Create Date : 2022/1/7 21:44
     *  Version : 0.1
     *  Copyright : skylong Project Team Copyright (C)
     *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
     */
    namespace app\admin\controller;
    use app\common\controller\AdminController;

    class Common extends AdminController {

        public function initialize() {
            parent::initialize(); // TODO: Change the autogenerated stub
        }

        public function user(){
            $class_id = $this->request->param('class_id',0);
            $group_id = $this->request->param('group_id',0);
            if($this->request->isPost()){
                $page = $this->request->post('page',$this->page);
                $limit = $this->request->post('limit',$this->limit);
                $where = [];
                $list = [];
                $total = 0;
                if(!empty($class_id)){
                    $where['ucl.class_group_id'] = $class_id;
                    $list = db('user')
                        ->alias('a')
                        ->join('user_class_log ucl','ucl.u_id = a.id')
                        ->join('area ae','a.area_id = ae.id','left')
                        ->field("a.id,a.nickname,a.name,a.avatar,a.sex,a.state,a.points,ae.name area_name,FROM_UNIXTIME(a.create_time,'%Y-%m-%d') create_time")
                        ->where($where)
                        ->limit(($page-1)*$limit,$limit)
                        ->select();
                    $total = db('user')
                        ->alias('a')
                        ->join('user_class_log ucl','ucl.u_id = a.id')
                        ->join('area ae','a.area_id = ae.id','left')
                        ->where($where)
                        ->count();
                }
                if(!empty($group_id)){
                    $where['ugl.group_group_id'] = $group_id;
                    $list = db('user')
                        ->alias('a')
                        ->join('user_group_log ugl','ugl.u_id = a.id')
                        ->join('area ae','a.area_id = ae.id','left')
                        ->field("a.id,a.nickname,a.name,a.avatar,a.sex,a.state,a.points,ae.name area_name,FROM_UNIXTIME(a.create_time,'%Y-%m-%d') create_time")
                        ->where($where)
                        ->limit(($page-1)*$limit,$limit)
                        ->select();
                    $total = db('user')
                        ->alias('a')
                        ->join('user_group_log ugl','ugl.u_id = a.id')
                        ->join('area ae','a.area_id = ae.id','left')
                        ->where($where)
                        ->count();
                }
                return $this->returnTabelJson($list,'查询成功',$total);
            }
            return $this->fetch('user',compact('class_id','group_id'));
        }
        public function task(){
            $class_id = $this->request->param('class_id',0);
            if($this->request->isPost()){
                $page = $this->request->post('page',$this->page);
                $limit = $this->request->post('limit',$this->limit);
                $list = [];
                $total = 0;
                if(!empty($class_id)){
                    $list = db('type_task_log_table')
                        ->alias('ttlt')
                        ->join('type_task_table ttt','ttt.id = ttlt.type_task_id')
                        ->join("admin a",'ttt.admin_id = a.id','left')
                        ->field("concat_ws('-',ttt.id,{$class_id}) id,ttt.id type_task_id,ttt.admin_id,ttt.type,ttt.title name,ttt.status state,a.name admin_name,FROM_UNIXTIME(ttt.create_time) create_time,ttt.mode")
                        ->distinct(true)
                        ->where('ttlt.class_id',$class_id)
                        ->limit(($page-1)*$limit,$limit)
                        ->select();
                    $total = db('type_task_log_table')
                        ->alias('ttlt')
                        ->join('type_task_table ttt','ttt.id = ttlt.type_task_id')
                        ->join("admin a",'ttt.admin_id = a.id','left')
                        ->field("ttt.id,ttt.admin_id,ttt.type,ttt.title name,ttt.status state,a.name admin_name,FROM_UNIXTIME(ttt.create_time) create_time")
                        ->distinct(true)
                        ->where('ttlt.class_id',$class_id)
                        ->count();
                }
                return $this->returnTabelJson($list,'查询成功',$total);
            }
            return $this->fetch('task',compact('class_id'));
        }

        // 移除任务
        public function remove_task(){
            $id = $this->request->param('id',0);
            list($type_task_id,$class_id) = explode('-',$id);
            // 判断当前项目是否有学员记录
            if(db('user_type_task_table')->where("type_task_id = {$type_task_id}")->count() > 0){
                return $this->returnJson([],'项目移除失败：当前项目已下发');
            }
            $res = db('type_task_log_table')->where("type_task_id = {$type_task_id} and class_id = {$class_id}")->delete();
            if($res !== false){
                insert_admin_log('操作成功');
                return $this->returnJson([],'操作成功',1);
            }
            return $this->returnJson([],'操作失败');
        }

        //筛选班组
        public function screen_class(){
            $province_id = $this->request->param('province_id','');
            $city_id = $this->request->param('city_id','');
            $area_id = $this->request->param('area_id','');
            $school_id = $this->request->param('school_id','');
            $grade_id = $this->request->param('grade_id','');
            if($province_id !== ''){
                $where[] = ['province_id','=',$province_id];
            }
            if($city_id !== ''){
                $where[] = ['city_id','=',$city_id];
            }
            if($area_id !== ''){
                $where[] = ['area_id','=',$area_id];
            }
            if($school_id !== ''){
                $where[] = ['school_id','=',$school_id];
            }
            if($grade_id !== ''){
                $where[] = ['grade_id','=',$grade_id];
            }
            $res = db('class_group')->where($where)->select();
            if ($res) {
                return json(['code' => 100, 'msg' => '获取成功', 'data' => $res]);
            } else {
                return json(['code' => 0, 'msg' => '没有获取到数据']);
            }
        }

        //筛选地区
        public function area_list($area_type = 0)
        {
            $res = db('area')->where("area_type = $area_type and state=1")->select();
            return $res;
        }

        //联动查询地区
        public function CityAreaList(){
            $province_id = $this->request->param('provinceDataId','');
            $city_id = $this->request->param('cityDataId','');
            $info = [];
            if($province_id !== ''){
                $info['city_data_id'] = db('area')->field('id,name')->whereIn("p_id",$province_id)->select();
                if(count($info['city_data_id'])== 0){
                    return json(['code'=>0,'msg'=>'没有下级城市哦']);
                }
                $city_data_id = db('area')->whereIn("p_id",$province_id)->column('id');
                $info['area_data_id'] = db('area')->field('id,name')->whereIn("p_id",$city_data_id)->select();
            }
            if($city_id !== ''){
                $info['area_data_id'] = db('area')->field('id,name')->whereIn("p_id",$city_id)->select();
                if(count($info['area_data_id'])== 0){
                    return json(['code'=>0,'msg'=>'没有下级县区，请添加']);
                }
            }
            return json(['code'=>100,'msg'=>'获取成功','data'=>$info]);
        }


public function getSubCourseDtrees(){
            // 获取省市区树
            $list = list_to_tree(db('course_index')->field('id,name title,pid parentId,0 type')->select(),'id','parentId');
            foreach ($list as $key => $item){
                $list[$key]['checkArr'] = array('type'=>0, 'isChecked'=>0);
            }
            $data['trees'] = $list;
            return json($data);
        }
        // 获取区县树
        public function getAreaDtrees(){
            // 获取省市区树
            $list = list_to_tree(db('area')->where('state',$this->status['NORMAL'])->field('id,name title,p_id parentId,0 type')->select(),'id','parentId');
            foreach ($list as $key => $item){
                $list[$key]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                if(isset($item['children'])){
                    $citys = $item['children'];
                    foreach ($citys as $key_1 => $city){
                        $list[$key]['children'][$key_1]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                        if(isset($city['children'])){
                            $areas = $city['children'];
                            foreach ($areas as $key_2 => $area){
                                $list[$key]['children'][$key_1]['children'][$key_2]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                            }
                        }
                    }
                }
            }
            $data['trees'] = $list;
            return json($data);

        }

        // 获取学校树
        public function getSchoolDtrees(){
            // 获取省市区树
            $list = list_to_tree(db('area')->where('state',$this->status['NORMAL'])->field('id,name title,p_id parentId,0 type')->select(),'id','parentId');
            foreach ($list as $key => $item){
                $list[$key]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                if(isset($item['children'])){
                    $citys = $item['children'];
                    foreach ($citys as $key_1 => $city){
                        $list[$key]['children'][$key_1]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                        if(isset($city['children'])){
                            $areas = $city['children'];
                            foreach ($areas as $key_2 => $area){
                                $list[$key]['children'][$key_1]['children'][$key_2]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                                $list[$key]['children'][$key_1]['children'][$key_2]['children'] = getSchoolsByAreaId($area['id']);
                            }
                        }
                    }
                }
            }
            $data['trees'] = $list;
            return json($data);
        }

        // 获取班级树
        public function getClassDtrees(){
            // 获取省市区树
            $list = list_to_tree(db('area')->where('state',$this->status['NORMAL'])->field('id,name title,p_id parentId,0 type')->select(),'id','parentId');
            foreach ($list as $key => $item){
                $list[$key]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                if(isset($item['children'])){
                    $citys = $item['children'];
                    foreach ($citys as $key_1 => $city){
                        $list[$key]['children'][$key_1]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                        if(isset($city['children'])){
                            $areas = $city['children'];
                            foreach ($areas as $key_2 => $area){
                                $list[$key]['children'][$key_1]['children'][$key_2]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                                $list[$key]['children'][$key_1]['children'][$key_2]['children'] = getSchoolAndClassesByAreaId($area['id']);
                            }
                        }
                    }
                }
            }
            $data['trees'] = $list;
            return json($data);
        }

        // 获取基地树
        public function getBasesDtrees(){
            // 获取省市区树
            $list = list_to_tree(db('area')->where('state',$this->status['NORMAL'])->field('id,name title,p_id parentId,0 type')->select(),'id','parentId');
            foreach ($list as $key => $item){
                $list[$key]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                if(isset($item['children'])){
                    $citys = $item['children'];
                    foreach ($citys as $key_1 => $city){
                        $list[$key]['children'][$key_1]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                        if(isset($city['children'])){
                            $areas = $city['children'];
                            foreach ($areas as $key_2 => $area){
                                $list[$key]['children'][$key_1]['children'][$key_2]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                                $list[$key]['children'][$key_1]['children'][$key_2]['children'] = getBasesByAreaId($area['id']);
                            }
                        }
                    }
                }
            }
            $data['trees'] = $list;
            return json($data);
        }

        // 获取学校树
        public function getSchoolsDtrees(){
            // 获取省市区树
            $list = list_to_tree(db('area')->where('state',$this->status['NORMAL'])->field('id,name title,p_id parentId,0 type')->select(),'id','parentId');
            foreach ($list as $key => $item){
                $list[$key]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                if(isset($item['children'])){
                    $citys = $item['children'];
                    foreach ($citys as $key_1 => $city){
                        $list[$key]['children'][$key_1]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                        if(isset($city['children'])){
                            $areas = $city['children'];
                            foreach ($areas as $key_2 => $area){
                                $list[$key]['children'][$key_1]['children'][$key_2]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                                $list[$key]['children'][$key_1]['children'][$key_2]['children'] = getSchoolByAreaId($area['id']);
                            }
                        }
                    }
                }
            }
            $data['trees'] = $list;
            return json($data);
        }

        // 根据区县id获取学校
        public function getSchools(){
            $area_ids = $this->request->param('area_ids','');
            $list = db('school')
                ->alias('s')
                ->join('area a','a.id = s.area_id')
                ->where("s.area_id in ({$area_ids}) and s.state = {$this->status['NORMAL']} and a.state = {$this->status['NORMAL']}")
                ->field('s.id,s.area_id,a.`name` area_name,s.`name` school_name')
                ->select();
            $area_ids = explode(',',$area_ids);
            $arr = [];
            foreach ($area_ids as $key => $value){
                $child = searchData($list,'area_id',$value);
                if(empty($child)){
                    continue;
                }
                array_push($arr,[
                   'id' => $value,
                   'name' => $child[0]['area_name'],
                   'child' => $child
                ]);
            }
            return $arr;
        }

        public function getGrades(){
            return db('grade')->where("state",$this->status['NORMAL'])->select();
        }

        // 获取评委老师列表
        public function getTeacherOfAdmin(){
            return db('admin')->where('group_id',config('sys_data.teacher_group'))->select();
        }

        /**
         * 拼接教师列表
         * @param array $school_ids
         * @param array $class_ids
         * @param array $base_ids
         * @param array $names
         * @param array $choose_ids
         * @return string
         */
        public function combinTeacherHtml($school_ids = [],$class_ids = [],$base_ids = [],$names = [],$choose_ids = []){
            $where[] = ['status','=', self::STATE_OPEN];
            if (!empty($school_ids)){
                foreach ($school_ids as $key => $school_id){
                    $school_ids[$key] = str_replace('s','',$school_id);
                }
                $where[] = ['school_id','in',$school_ids];
                $name = 'school_id';
            }
            if (!empty($class_ids)){
                $where[] = ['class_id','in',$class_ids];
                $name = 'class_id';
            }
            if (!empty($base_ids)){
                foreach ($base_ids as $key => $base_id){
                    $base_ids[$key] = str_replace('b','',$base_id);
                }
                $where[] = ['base_id','in',$base_ids];
                $name = 'base_id';
            }
            $teachers = db('teacher')->where($where)->select();
            $html = '<table class="layui-table">
                    <colgroup>
                        <col width="150">
                        <col>
                    </colgroup>
                    <thead>
                    <tr>
                        <th>'.(empty($base_ids)?'班级':'基地').'</th>
                        <th>教师</th>
                    </tr>
                    </thead>
                    <tbody>';
            if(empty($base_ids)){
                foreach ($class_ids as $key => $item){
                    $teacher_list = searchData($teachers,$name,$item);
                    $selectList = "<select name='teacher_ids[{$item}]'  lay-verify='required' lay-search=''>";
                    $selectList .= "<option value=''></option>";
                    foreach ($teacher_list as $value){
                        if(empty($choose_ids) || (!empty($choose_ids) && $choose_ids[$key] != $value['id'])){
                            $selectList .= "<option value='{$value['id']}'>{$value['username']}（{$value['phone']}）</option>";
                        }else{
                            $selectList .= "<option value='{$value['id']}' selected>{$value['username']}（{$value['phone']}）</option>";
                        }
                    }
                    $selectList .= "</select>";
                    $html .= "<tr><td>{$names[$key]}</td><td>{$selectList}</td></tr>";
                }
            }else{
                foreach ($base_ids as $key => $item){
                    $teacher_list = searchData($teachers,$name,$item);
                    $selectList = "<select name='base_teacher_ids[{$item}]'  lay-verify='required' lay-search=''>";
                    $selectList .= "<option value=''></option>";
                    foreach ($teacher_list as $value){
                        if(empty($choose_ids) || (!empty($choose_ids) && $choose_ids[$key] != $value['id'])){
                            $selectList .= "<option value='{$value['id']}'>{$value['username']}（{$value['phone']}）</option>";
                        }else{
                            $selectList .= "<option value='{$value['id']}' selected>{$value['username']}（{$value['phone']}）</option>";
                        }
                    }
                    $selectList .= "</select>";
                    $html .= "<tr><td>{$names[$key]}</td><td>{$selectList}</td></tr>";
                }
            }
            $html .= '</tbody></table>';
            return $html;
        }

        // 获取教师列表
        public function getTeacher(){
            $school_ids = $this->request->param('school_ids',[]);
            $class_ids = $this->request->param('class_ids',[]);
            $base_ids = $this->request->param('base_ids',[]);
            $names = $this->request->param('names',[]);
            $choose_ids = $this->request->param('choose_ids',[]);
            return $this->combinTeacherHtml($school_ids,$class_ids,$base_ids,$names,$choose_ids);
        }
    }