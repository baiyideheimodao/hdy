<?php
/**
 *  Encoding : UTF-8
 *  Separator : Unix and OS X (\n)
 *  File Name : Task.php
 *  Create Date : 2022/1/4 9:24
 *  Version : 0.1
 *  Copyright : skylong Project Team Copyright (C)
 *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
 */

namespace app\admin\controller;
use app\common\controller\AdminController;
use think\Db;
use think\Exception;
use \think\facade\Cookie;
use think\facade\Env;
use think\Log;

class Message extends AdminController {

    const BACK_MSG_TYPE = 4; // 后台推送消息类型
    public function initialize() {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index(){
        $where = [];
        if($this->request->isPost()){
            $page = $this->request->post('page',$this->page);
            $limit = $this->request->post('limit',$this->limit);
            $type = $this->request->param('type','');
            if(!empty($type)){
                $where[] = ['t.type','=',$type];
            }
            $title= $this->request->param('title','');
            if(!empty($title)){
                $where[] = ['t.title','like',"%{$title}%"];
            }
            $content= $this->request->param('content','');
            if(!empty($content)){
                $where[] = ['t.content','like',"%{$content}%"];
            }

            $list = db('message')
                ->alias('t')
                ->join("admin a",'t.admin_id = a.id','left')
                ->join("user u",'u.id = t.u_id','left')
                ->field("t.*,FROM_UNIXTIME(t.create_time) create_time,u.name user_name")
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->order('t.id desc')
                ->select();

            $total = db('message')
                ->alias('t')
                ->join("admin a",'t.admin_id = a.id','left')
                ->join("user u",'u.id = t.u_id','left')
                ->where($where)
                ->field("t.id")
                ->count();

            return $this->returnTabelJson($list,'查询成功',$total);
        }

        return $this->fetch('index');
    }

    public function add(){
        $admin_id = cookie('id');
        if($this->request->isPost()){
            $type = $this->request->param('type',0);
            $uids = $this->request->param('uids','');
            $class_ids = $this->request->param('class_ids','');
            $title = $this->request->param('title','');
            $content = $this->request->param('content','');
            $body = $this->request->param('body','');
            if($type == 1){
                // 群发
                $res = $this->messageToAll($title,$content,$body,self::BACK_MSG_TYPE);
            }elseif($type == 2){
                // 班组发
                $res = $this->messageToClasses($title,$content,$body,$class_ids,self::BACK_MSG_TYPE);
            }else{
                $uids = explode(',',$uids);
                $res = $this->messageToUids($title,$content,$body,$uids,self::BACK_MSG_TYPE);
            }
            insert_admin_log('消息创建成功');
            return $this->returnJson($res,'消息创建成功',1);
        }
        $area['province'] = action('admin/school/addressList',['id'=>0,'type'=>1]);
        $area['city'] = [];
        $area['area'] = [];
        $school = db('school')->where("state = 1")->select();
        $grade = db('grade')->where("state=1")->select();
        $classes = db('class_group')->where("state = {$this->status['NORMAL']} and admin_id = ".\cookie('id'))->select();
        $users = db('user')->where("state = {$this->status['NORMAL']}")->select();
        return $this->fetch('add',compact('classes','area','school','grade','users'));
    }

    public function edit(){
        $admin_id = cookie('id');
        if($this->request->isPost()){
            $data = $this->request->param();
            unset($data['id']);
            $data['admin_id'] = $admin_id;
            $data['create_time'] = time();
            $res = db('message')->insertGetId($data);
            if($res !== false){
                db()->commit();
                return $this->returnJson($data,'消息创建成功',1);
            }
            db()->rollback();
            return $this->returnJson([],'消息创建失败');
        }
        $area['province'] = action('admin/school/addressList',['id'=>0,'type'=>1]);
        $area['city'] = [];
        $area['area'] = [];
        $school = db('school')->where("state = 1")->select();
        $grade = db('grade')->where("state=1")->select();
        $classes = db('class_group')->where("state = {$this->status['NORMAL']} and admin_id = ".\cookie('id'))->select();
        return $this->fetch('edit',compact('classes','area','school','grade'));
    }

    public function del(){
        $id = $this->request->param('id',0);
        $ids = $this->request->param('ids',[]);
        if(empty($id) && empty($ids)){
            return $this->returnJson([],'删除失败');
        }
        $delIds = [];
        if(!empty($ids)){
            // 批量删除
            $delIds = array_merge($delIds,explode(',',$ids));
        }
        if(!empty($id)){
            $delIds = [$id];
        }
        if(empty($delIds)){
            return $this->returnJson([],'删除失败');
        }
        $res = db('message')->whereIn('id',$delIds)->delete();
        if($res !== false){
            insert_admin_log('消息删除成功');
            return $this->returnJson([],'删除成功',1);
        }
        return $this->returnJson([],'删除失败');
    }

    public function getDtrees(){
        // 获取省市区树
        $where = [];
        $list = list_to_tree(db('area')->field('id,name title,p_id parentId,0 type')->where($where)->select(),'id','parentId');
        foreach ($list as $key => $item){
            $list[$key]['checkArr'] = array('type'=>0, 'isChecked'=>0);
            if(isset($item['children'])){
                $citys = $item['children'];
                foreach ($citys as $key_1 => $city){
                    $list[$key]['children'][$key_1]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                    if(isset($city['children'])){
                        $areas = $city['children'];
                        foreach ($areas as $key_2 => $area){
                            $list[$key]['children'][$key_1]['children'][$key_2]['checkArr'] = array('type'=>0, 'isChecked'=>0);
                            $list[$key]['children'][$key_1]['children'][$key_2]['children'] = getSchoolAndClassesByAreaId($area['id']);
                        }
                    }
                }
            }
        }
        $data['trees'] = $list;
        return json($data);
    }

    public function getUsers(){
        $id = $this->request->param('id',0);
        $level = $this->request->param('level',0);
        $list = [];
        $uids = [];
        switch (intval($level)){
            case 1:
                // 省份
                $uids = getUidsByAreaId($id);
                break;
            case 2:
                // 市
                $uids = getUidsByAreaId($id,2);
                break;
            case 3:
                // 区
                $uids = getUidsByAreaId($id,1);
                break;
            case 4:
                // 学校
                $id = str_replace('s','',$id);
                $uids = getUidsBySchoolId($id);
                break;
            case 5:
                // 班组
                $uids = getUidsByClassId($id);
                break;
        }
        if(!empty($uids)){
            $where[] = ['id','in',$uids];
            $list = getUsersBySome($where);
        }
        return $this->to_assign(0,'',$list);
    }

    /**
     * 返回json数据，用于接口
     * @param    integer    $code
     * @param    string     $msg
     * @param    array      $data
     * @param    string     $url
     * @param    integer    $httpCode
     * @param    array      $header
     * @param    array      $options
     * @return   json
     */
    private function to_assign($code = 0, $msg = "操作成功", $data = [], $url = '', $httpCode = 200, $header = [], $options = [])
    {
        $res = ['code' => $code];
        $res['msg'] = $msg;
        $res['url'] = $url;
        if (is_object($data)) {
            $data = $data->toArray();
        }
        $res['data'] = $data;
        $response = \think\Response::create($res, "json", $httpCode, $header, $options);
        throw new \think\exception\HttpResponseException($response);
    }

}