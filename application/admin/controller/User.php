<?php

namespace app\admin\controller;


use app\common\controller\AdminController;
use think\Db;
use think\Exception;

class User extends AdminController
{

    public function initialize() {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        if($this->request->isPost()){
            $page = $this->request->post('page',$this->page);
            $limit = $this->request->post('limit',$this->limit);
            $area_id = $this->request->param('area_id','');
            if((int)cookie('group_id') !== config('rx.groupId')){
                $where['a.area_id'] = cookie('area_id');
            }else{
                if(!empty($area_id)){
                    $where[] = ['a.area_id','=',$area_id];
                }
            }
 
            $school_id = $this->request->param('school_id','');
            if(!empty($school_id)){
                $where[] = ['a.school_id','=',$school_id];
            }
            $grade_id = $this->request->param('grade_id','');
            if(!empty($grade_id)){
                $where[] = ['a.grade_id','=',$grade_id];
            }

            $name = $this->request->param('name','');
            if(!empty($name)){
                $where[] = ['a.name','like',"%{$name}%"];
            }
            $where[] = ['1','=','1'];
            $list = db('user')
                ->alias('a')
                ->join('area ae','a.area_id = ae.id','left')
                ->join('grade gr','a.grade_id = gr.id','left')
                ->join('user_class_log cla_log','cla_log.u_id = a.id','left')
                ->join('class_group cla','cla_log.class_group_id = cla.id','left')
                ->join('school sch','a.school_id = sch.id','left')
                ->field("a.id,a.area_id,sch.name school_name,a.grade_id,a.nickname,a.name,a.avatar,a.sex,a.state,a.points
                ,gr.name grade_name,ae.name area_name,FROM_UNIXTIME(a.create_time,'%Y-%m-%d') create_time
                ,cla.name class_name")
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->select();
            $total = db('user')
                ->alias('a')
                ->join('area ae','a.area_id = ae.id','left')
                ->where($where)
                ->count();
            return $this->returnTabelJson($list,'查询成功',$total);
        }
        $area = db('area')->where("p_id = 9")->select();
        $school = db('school')->where("state = 1")->select();
        $grade = db('grade')->where("state = 1")->select();
        //项目
        return $this->fetch('index',compact('area','school','grade'));
    }

    public function state(){
        $id = $this->request->param('id',0);
        $state = $this->request->param('state',0);
        $res = db('user')->where("id = {$id}")->update(['state'=>$state]);
        if($res !== false){
            insert_admin_log('更新用户状态');
            return $this->returnJson([],'操作成功',1);
        }
        return $this->returnJson([],'操作失败');
    }


    public function set_class(){
        $uid = $this->request->param('id',0);
        $uids = $this->request->param('ids','');
        if($this->request->isPost()){
            $class_ids = $this->request->param('class_ids',[]);
            if(empty($class_ids)){
                return $this->returnJson([],'请勾选班组');
            }
            if(!empty($uid)){
                $datas = [];
                foreach ($class_ids as $item){
                    $datas[] = [
                      'u_id' => $uid,
                      'class_group_id' => $item,
                      'create_time' => time()
                    ];
                }
                db()->startTrans();
                try{
                    db('user_class_log')->where("u_id = {$uid}")->delete();
                    db('user_class_log')->insertAll($datas);
                    db()->commit();
                    insert_admin_log('班组设置成功');
                    return $this->returnJson([],'班组设置成功',1);
                }catch (Exception $exception){
                    db()->rollback();
                    return $this->returnJson([],'班组设置失败');
                }
            }
            if(!empty($uids)){
                $uids_arr = array_filter(explode(',',$uids));
                $datas = [];
                foreach ($class_ids as $item){
                    foreach ($uids_arr as $ids){
                        $datas[] = [
                            'u_id' => $ids,
                            'class_group_id' => $item,
                            'create_time' => time()
                        ];
                    }
                }
                db()->startTrans();
                try{
                    db('user_class_log')->where("u_id in ({$uids})")->delete();
                    db('user_class_log')->insertAll($datas);
                    db()->commit();
                    insert_admin_log('班组设置成功');
                    return $this->returnJson([],'班组设置成功',1);
                }catch (Exception $exception){
                    db()->rollback();
                    return $this->returnJson([],'班组设置失败');
                }
            }
            return $this->returnJson([],'');
        }
        $class_group_id = [];
        if(!empty($uid)){
            $user_class = db('user_class_log')->where("u_id = {$uid}")->field('class_group_id')->select();
            $class_group_id = array_column($user_class,'class_group_id');
        }
        $classes = db('class_group')->where("state = {$this->status['NORMAL']} and admin_id = ".\cookie('id'))->select();
        return $this->fetch('classes',compact('classes','class_group_id','uid','uids'));
    }

    public function set_groups(){
        $uid = $this->request->param('id',0);
        $uids = $this->request->param('ids','');
        if($this->request->isPost()){
            $group_ids = $this->request->param('group_ids',[]);
            if(empty($group_ids)){
                return $this->returnJson([],'请勾选群组');
            }
            if(!empty($uid)){
                $datas = [];
                foreach ($group_ids as $item){
                    $datas[] = [
                        'u_id' => $uid,
                        'group_group_id' => $item,
                        'create_time' => time()
                    ];
                }
                db()->startTrans();
                try{
                    db('user_group_log')->where("u_id = {$uid}")->delete();
                    db('user_group_log')->insertAll($datas);
                    db()->commit();
                    insert_admin_log('群组设置成功');
                    return $this->returnJson([],'群组设置成功',1);
                }catch (Exception $exception){
                    db()->rollback();
                    return $this->returnJson([],'群组设置失败');
                }
            }
            if(!empty($uids)){
                $uids_arr = array_filter(explode(',',$uids));
                $datas = [];
                foreach ($group_ids as $item){
                    foreach ($uids_arr as $ids){
                        $datas[] = [
                            'u_id' => $ids,
                            'group_group_id' => $item,
                            'create_time' => time()
                        ];
                    }
                }
                db()->startTrans();
                try{
                    db('user_group_log')->where("u_id in ({$uids})")->delete();
                    db('user_group_log')->insertAll($datas);
                    db()->commit();
                    insert_admin_log('群组设置成功');
                    return $this->returnJson([],'群组设置成功',1);
                }catch (Exception $exception){
                    db()->rollback();
                    return $this->returnJson([],'群组设置失败');
                }
            }
            return $this->returnJson([],'');
        }
        $group_group_id = [];
        if(!empty($uid)){
            $user_groups = db('user_group_log')->where("u_id = {$uid}")->field('group_group_id')->select();
            $group_group_id = array_column($user_groups,'group_group_id');
        }
        $groups = db('group_group')->where("state = {$this->status['NORMAL']} and admin_id = ".\cookie('id'))->select();
        return $this->fetch('groups',compact('groups','group_group_id','uid','uids'));
    }

    public function task_list(){
        $user_id = $this->request->param('id',0);
        if($this->request->isPost()){
            $page = $this->request->post('page',$this->page);
            $limit = $this->request->post('limit',$this->limit);
            $list = [];
            $total = 0;
            $user_class_logs = db('user_class_log')->where("u_id = {$user_id}")->select();
            if(empty($user_class_logs)){
                return $this->returnTabelJson($list,'查询成功',$total);
            }
            $user_class_ids = implode(',',array_column($user_class_logs,'class_group_id'));
            $list = db('task_allot_log')
                ->alias('tal')
                ->join('task t',"tal.task_id = t.id")
                ->join('task_log tl',"tl.task_id = tal.id and tl.u_id = {$user_id}",'left')
                ->where("tal.type = 1 and tal.class_or_group_id in ({$user_class_ids})")
                ->field("DISTINCT tal.id,t.name,t.type,FROM_UNIXTIME(tal.create_time, '%Y-%m-%d') ctime, t.times,tl.done_time,tl.options")
                ->limit(($page-1)*$limit,$limit)
                ->order("tal.id desc")
                ->select();
            foreach ($list as $key => $item){
                $list[$key]['options'] = empty($item['options'])?[]:unserialize($item['options']);
                $list[$key]['progress'] = !empty($item['done_time']) ? '100%':($item['type'] == 1 && intval($item['times']) > 0 ? (count($list[$key]['options'])/$item['times']*100).'%':'0%');
            }
            $total = db('task_allot_log')
                ->alias('tal')
                ->join('task t',"tal.task_id = t.id")
                ->field("DISTINCT tal.id")
                ->where("tal.type = 1 and tal.class_or_group_id in ({$user_class_ids})")
                ->count();
            return $this->returnTabelJson($list,'查询成功',$total);
        }
        return $this->fetch('task_list',compact('user_id'));
    }

    // 项目列表
    public function type_task_list(){
        $user_id = $this->request->param('id',0);
        if($this->request->isPost()){
            $page = $this->request->post('page',$this->page);
            $limit = $this->request->post('limit',$this->limit);
            $list = [];
            $total = 0;
            $user_class_logs = db('user_class_log')->where("u_id = {$user_id}")->select();
            if(empty($user_class_logs)){
                return $this->returnTabelJson($list,'查询成功',$total);
            }
            $user_class_ids = implode(',',array_column($user_class_logs,'class_group_id'));
            $mList = db('type_task_log_table')
                ->alias('ttlt')
                ->join('type_task_table ttt','ttt.id = ttlt.type_task_id')
                ->join("admin a",'ttt.admin_id = a.id','left')
                ->field("ttt.id,ttt.admin_id,ttt.type,ttt.title name,ttt.status state,a.name admin_name,FROM_UNIXTIME(ttt.create_time) create_time,FROM_UNIXTIME(ttt.start_date) start_date,ttt.mode")
                ->distinct(true)
                ->whereIn('ttlt.class_id',$user_class_ids)
                ->select(false);
            $nList = db('user_type_task_table')
                ->alias('uttt')
                ->join('type_task_table ttt','ttt.id = uttt.type_task_id')
                ->join("admin a",'ttt.admin_id = a.id','left')
                ->field("ttt.id,ttt.admin_id,ttt.type,ttt.title name,ttt.status state,a.name admin_name,FROM_UNIXTIME(ttt.create_time) create_time,FROM_UNIXTIME(ttt.start_date) start_date,ttt.mode")
                ->distinct(true)
                ->whereIn('ttt.mode',self::MODE_TWO)
                ->select(false);
            $list = Db::table("($mList) m")
                ->union($nList,true)
                ->limit(($page-1)*$limit,$limit)
                ->select();
            // $list = db('task_allot_log')
            //     ->alias('tal')
            //     ->join('task t',"tal.task_id = t.id")
            //     ->join('task_log tl',"tl.task_id = tal.id and tl.u_id = {$user_id}",'left')
            //     ->where("tal.type = 1 and tal.class_or_group_id in ({$user_class_ids})")
            //     ->field("DISTINCT tal.id,t.name,t.type,FROM_UNIXTIME(tal.create_time, '%Y-%m-%d') ctime, t.times,tl.done_time,tl.options")
            //     ->limit(($page-1)*$limit,$limit)
            //     ->order("tal.id desc")
            //     ->select();
            foreach ($list as $key => $item){
                // $list[$key]['options'] = empty($item['options'])?[]:unserialize($item['options']);
                $info = db('user_type_task_table')->where('type_task_id',$item['id'])->where('user_id',$user_id)->find();
                if(empty($info)){
                    $list[$key]['progress'] = '0%';
                }else{
                    if($item['mode'] == self::MODE_ONE){
                        switch ($item['type']){
                            case self::TYPE_HOME:
                                $statues = [self::STATUS_BEFORE_N,self::STATUS_BEFORE_ED,self::STATUS_AFTER_EVAL_ED];
                                $current_index = array_search($info['status'],$statues);
                                $total_index = 3;
                                break;
                            default:
                                $current_index = intval($info['status']);
                                $total_index = 9;
                                break;
                        }
                    }else{
                        switch ($item['type']){
                            case self::TYPE_WORK:
                                $statues = [self::STATUS_BEFORE_N,self::STATUS_AFTER_ED,self::STATUS_AFTER_EVAL_ED];
                                $current_index = array_search($info['status'],$statues);
                                $total_index = 3;
                                break;
                            default:
                                $current_index = intval($info['status']);
                                $total_index = 9;
                                break;
                        }
                    }
                    $list[$key]['progress'] = ceil($current_index / $total_index * 100) . '%';
                }
            }
            $total = count(db()->query($mList)) + count(db()->query($nList));
            // $total = db('task_allot_log')
            //     ->alias('tal')
            //     ->join('task t',"tal.task_id = t.id")
            //     ->field("DISTINCT tal.id")
            //     ->where("tal.type = 1 and tal.class_or_group_id in ({$user_class_ids})")
            //     ->count();
            return $this->returnTabelJson($list,'查询成功',$total);
        }
        return $this->fetch('type_task_list',compact('user_id'));
    }

    public function log()
    {
        $param = $this->request->param();
        if ($this->request->isPost()) {
            $map_other = [];
            if (isset($param['year']) && !empty($param['year'])) {
                $map['year'] = str_replace("年", "", $param['year']);
            } else {
                $map['year'] = date('Y', time());
            }
            if (isset($param['between_time']) && !empty($param['between_time'])) {
                $between = implode(',', betweenToArray($param['between_time']));
                if ($between) {
                    $map_other = [
                      'key' => 'create_time',
                      'value' => implode(',', betweenToArray($param['between_time']))
                    ];
                }
            }
            if (isset($param['role_id']) && !empty($param['role_id'])) {
                $map['role_id'] = $param['role_id'];
            }
            $admin_id = null;
            if (isset($param['keyword']) && !empty($param['keyword'])) {
                $admin = db("admin")->where("username like '%{$param['keyword']}%'")->field("id")->select();
                $map['user_id'] = ['in',implode(',',array_column($admin, 'id'))];
                $admin_id = $map['user_id'];
            }
            $page = 1;
            if (isset($param['page']) && intval($param['page']) > 1) {
                $page = $param['page'];
            }

            //1.将所有关联的表查出
            $tables = array_column(db("record_log")->where($map)->field("indexes")->order("id desc")->select(), 'indexes');
            //2.获取日志总数
            $total_num = 0;
            $total = [];
            $length = 20;
            if (isset($param['limit']) && intval($param['limit']) > 1) {
                $length = $param['limit'];
            }

            $start = ($page - 1) * $length;
            foreach ($tables as $val) {
                unset($map['type']);
                if (!empty($admin_id)) {
                    $map['admin_id'] = $admin_id;
                }
                if(isset($map['user_id'])){
                    unset($map['user_id']);
                }
                if(empty($map_other)){
                    $total_num += db($val)->where($map)->count();//获取日志总数
                }else{
                    $total_num += db($val)->where($map)->whereBetween($map_other['key'],$map_other['value'])->count();//获取日志总数
                }
                $total[] += $total_num;//获取日志总数
            }
            //3.获取当前查询的表
            $list = [];

            foreach ($tables as $key => $val) {
                //如果开始
                if ($start < $total[$key] && $start >= (intval($key - 1) >= 0 ? $total[$key - 1] : 0)) {
                    if(empty($map_other)){
                        $list = db($tables[$key])->where($map)->field('*,FROM_UNIXTIME(create_time) ctime')->limit($start - (intval($key - 1) >= 0 ? $total[$key - 1] : 0), $length)->order("id desc")->select();//获取日志总数
                    }else{
                        $list = db($tables[$key])->where($map)->whereBetween($map_other['key'],$map_other['value'])->field('*,FROM_UNIXTIME(create_time) ctime')->limit($start - (intval($key - 1) >= 0 ? $total[$key - 1] : 0), $length)->order("id desc")->select();//获取日志总数
                    }
                    if (count($list) < $length && isset($tables[$key + 1])) {
                        if(empty($map_other)){
                            $list = array_merge($list, db($tables[$key + 1])->where($map)->field('*,FROM_UNIXTIME(create_time) ctime')->limit(0, $length - count($list))->order("id desc")->select());
                        }else{
                            $list = array_merge($list, db($tables[$key + 1])->where($map)->whereBetween($map_other['key'],$map_other['value'])->field('*,FROM_UNIXTIME(create_time) ctime')->limit(0, $length - count($list))->order("id desc")->select());
                        }
                    }
                    break;
                }
            }
            $re = ['code' => 0, 'msg' => '查询成功', 'count' => $total_num, 'data' => $list];
            return json($re);
        }
        return $this->fetch('log', [
            'param' => $param,
            'roles' => model('authGroup')->where("status=1 and type = 1")->select()
        ]);
    }

    public function tructLogs(){
        $param = $this->request->param();
        $map_other = [];
        if (isset($param['year']) && !empty($param['year'])) {
            $map['year'] = str_replace("年", "", $param['year']);
        } else {
            $map['year'] = date('Y', time());
        }
        if (isset($param['between_time']) && !empty($param['between_time'])) {
            $between = implode(',', betweenToArray($param['between_time']));
            if ($between) {
                $map_other = [
                    'key' => 'create_time',
                    'value' => implode(',', betweenToArray($param['between_time']))
                ];
            }
        }
        if (isset($param['role_id']) && !empty($param['role_id'])) {
            $map['role_id'] = $param['role_id'];
        }
        $admin_id = null;
        if (isset($param['keyword']) && !empty($param['keyword'])) {
            $admin = db("admin")->where("username like '%{$param['keyword']}%'")->field("id")->select();
            $map['user_id'] = ['in',implode(',',array_column($admin, 'id'))];
            $admin_id = $map['user_id'];
        }

        //1.将所有关联的表查出
        $tables = array_column(db("record_log")->where($map)->field("indexes")->order("id desc")->select(), 'indexes');
        foreach ($tables as $val) {
            unset($map['type']);
            if (!empty($admin_id)) {
                $map['admin_id'] = $admin_id;
            }
            if(isset($map['user_id'])){
                unset($map['user_id']);
            }
        }
        foreach ($tables as $key => $val) {
            //如果开始
            if(empty($map_other)){
                db($tables[$key])->where($map)->delete();//获取日志总数
            }else{
                db($tables[$key])->where($map)->whereBetween($map_other['key'],$map_other['value'])->delete();//获取日志总数
            }
        }
        return $this->fetch('log', [
            'param' => $param,
            'roles' => model('authGroup')->where("status=1 and type = 1")->select()
        ]);
    }

}
