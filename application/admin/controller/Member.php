<?php

namespace app\admin\controller;


use app\common\controller\AdminController;
use think\Db;
use think\facade\Cookie;

class Member extends AdminController
{

    public function initialize() {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $pagesize = request()->param('size',10);
        $this->assign('pagesize', $pagesize);
        $template['title'] = '员工管理'; // 标题
        $template['location'] = '/admin/member'; //主页地址
        $template['name'] = 'member'; //主页地址
        $this->assign('location', $template);
        $list = Db::table('zq_member a')
            ->field('a.id,a.username,a.password,a.name,a.group_id,a.phone,a.email,a.type,b.name as qxName')
            // todo：：员工编辑用户名并保存后员工消失【不是所有员工都存在身份】
            ->join('zq_auth_group b','b.id=a.group_id','left')
            ->order('id', 'asc')
            ->paginate($pagesize,false,['query'=>request()->param()]);
        $this->assign('list', $list);
        $page = $list->render();
        $this->assign('page', $page);
        return $this->fetch();
    }

    public function add()
    {
        $template['title'] = '员工添加'; // 标题
        $template['location'] = '/admin/member'; //主页地址
        $template['name'] = 'member'; //主页地址
        $this->assign('location', $template);
        $data = ($this->request->param());
        if ($data) {
            // 验证手机号
            if(!is_phone($data['phone'])){
                return json(['message'=>'添加失败:【手机号码】格式错误','code'=>0]);
            }
            // 邮箱验证
            if(!is_email($data['email'])){
                return json(['message'=>'添加失败:【邮箱】格式错误','code'=>0]);
            }
            // 判断员工是否存在
            $info = db('member')
                    ->where("username = '{$data['username']}'")
                    ->whereOr("name = '{$data['name']}'")
                    ->whereOr("phone = '{$data['phone']}'")
                    ->whereOr("email = '{$data['email']}'")
                    ->find();
            if(!empty($info)){
                return json(['message'=>'添加失败:【用户名】或【名称】或【手机号码】或【邮箱】已存在','code'=>0]);
            }
            db()->startTrans();
            try {
                $group_id = $data['group_id'];
                $data['password'] = md5($data['password']);
                $data['status']=1;
                $getid = Db::name('auth_group_access')->order('uid desc')->value('uid') + 1;
                $data['id']=$getid;
                $result = Db::name('member')->insertGetId($data);
                $group = [
                    'uid' => $result,
                    'group_id' => $group_id
                ];
                db('auth_group_access')->insert($group);
                db()->commit();
                return json(['message'=>'添加成功','code'=>200,'data'=>$result]);
            } catch (\Exception $e) {
                db()->rollback();
                return json(['message'=>'添加失败','code'=>0]);
            }
        }

        $roles = db('auth_group')->where('type', '=', '2')->select();
        $this->assign('roles', $roles);
        $this->assign('member_type',config('app.dict.member_type'));
        $organizational = model('organizational')->where(['status' => 1])->order('id asc')->fetchCollection()->select()->toArray();
        return $this->fetch('add',['organizational' => json_encode(list_to_tree($organizational))]);
    }

    public function edit($id)
    {
        $template['title'] = '员工修改'; // 标题
        $template['location'] = '/admin/member'; //主页地址
        $template['name'] = 'member'; //主页地址
        // $data = ($this->request->POST());
        if ($this->request->isPost()) {
        // if (@$data['email']) {
            $data = $this->request->post();
            // 验证手机号
            if(!is_phone($data['phone'])){
                return json(['message'=>'添加失败:【手机号码】格式错误','code'=>0]);
            }
            // 邮箱验证
            if(!is_email($data['email'])){
                return json(['message'=>'添加失败:【邮箱】格式错误','code'=>0]);
            }
            // 判断员工是否存在
            $info_count = db('member')
                ->where("id != {$data['id']}")
                ->where("username = '{$data['username']}' or name = '{$data['name']}' or phone = '{$data['phone']}' or email = '{$data['email']}'")
                ->count();
            if($info_count > 0){
                return json(['message'=>'修改失败:【用户名】或【名称】或【手机号码】或【邮箱】已存在','code'=>0]);
            }

            $group_id = $data['group_id'];
            $result = Db::name('member')
                ->where('id', $data['id'])
                ->data($data)
                ->update();
            $result1 = db('auth_group_access')->where('uid', '=', $data['id'])->data(['group_id' => $group_id])->update();
            if($result !== false && $result1 !== false){
                return json(['message'=>'修改成功','code'=>200]);
                // return 1;
            }
            return json(['message'=>'修改失败','code'=>0]);
        }
        $this->assign('location', $template);
        $data = Db::name('member')->alias('a')->join('auth_group_access aga', 'aga.uid = a.id')->where('a.id', $id)->field('a.*,aga.group_id')->find();
        $roles = db('auth_group')->where('type', '=', '2')->select();
        $this->assign('data', $data);
        $this->assign('roles', $roles);
        $this->assign('member_type',config('app.dict.member_type')); // 获取员工类型
        $organizational = model('organizational')->where(['status' => 1])->order('id asc')->fetchCollection()->select()->toArray();
        return $this->fetch('edit',['organizational' => json_encode(list_to_tree($organizational))]);
    }

    public function del()
    {
        $params = request()->param();
        if (!isset($params['id'])) {
            return showData(0, 'ID不存在');
        }
        // 判断删除用户下是否存在客户
        if(db('customerlist')->where("staffid in ({$params['id']})")->whereOr("expertid in ({$params['id']})")->count() > 0){
            return showData(0,'所选员工中存在已分配客户,不可删除【如果此用户需要被删除,需要在顾客列表将该用户下的顾客转移到其他人员】');
        }
        db()->startTrans();
        try {
            db('member')->where("id in ({$params['id']})")->delete();
            db('auth_group_access')->where("uid in ({$params['id']})")->delete();
            db()->commit();
            insert_admin_log('删除了用户');
            return showData(200, '操作成功');
        } catch (\Exception $e) {
            db()->rollback();
            return showData(0, '操作失败');
        }

    }

    //重置密码
    public function chongzhi($id)
    {
        $dataa = [
            'password' => 'e10adc3949ba59abbe56e057f20f883e'
        ];
        $data = ($this->request->param());
        $biao = $data['biao'];
        $result = Db::name($biao)
            ->where('id', $id)
            ->data($dataa)
            ->update();
        return json($result);
    }

    public function password(){
        $params = $this->request->param();
        if(isset($params['password']) && isset($params['repassword'])){
            $password = $params['password'];
            $repassword = $params['repassword'];
            if(empty($password) || empty($repassword)){
                return showData(0, '原始密码或新密码不能为空');
            }
            $id = Cookie::get('id');
            $md5Paw = md5($password);
            // 不存在，则为admin表中数据
            $info = db('admin')->where("id = {$id} and password = '{$md5Paw}'")->find();
            if(empty($info)){
                return showData(0, '原密码错误');
            }
            db('admin')->where("id = {$id}")->update(['password'=> md5($repassword)]);
            return showData(200, '修改成功');
        }
        return $this->fetch();
    }

    public function log()
    {
        $param = $this->request->param();
        if ($this->request->isPost()) {
            if (isset($param['year']) && !empty($param['year'])) {
                $map[] = ['year', '=', str_replace("年", "", $param['year'])];
            } else {
                $map[] = ['year', '=', date('Y', time())];
            }
            if (isset($param['between_time']) && !empty($param['between_time'])) {
                $between = implode(',', betweenToArray($param['between_time']));
                if ($between) {
                    $map[] = ['create_time', 'between', $between];
                }
            }
            if (isset($param['role_id']) && !empty($param['role_id'])) {
                $map[] = ['role_id', '=', $param['role_id']];
            }
            $admin_id = null;
            if (isset($param['keyword']) && !empty($param['keyword'])) {
                $admin = db("member")->where("username like '%{$param['keyword']}%'")->field("id")->select();
                $map[] = ['user_id', 'in', implode(",", array_column($admin, 'id'))];
                $admin_id = $map['user_id'];
            }
            $page = 1;
            if (isset($param['page']) && intval($param['page']) > 1) {
                $page = $param['page'];
            }
            //1.将所有关联的表查出
            $tables = array_column(db("record_log")->where($map)->field("indexes")->group("indexes")->order("id desc")->select(), 'indexes');

            //2.获取日志总数
            $total_num = 0;
            $total = [];
            $length = 20;
            if (isset($param['limit']) && intval($param['limit']) > 1) {
                $length = $param['limit'];
            }

            $start = ($page - 1) * $length;
            foreach ($tables as $val) {
                unset($map['type']);
                if (!empty($admin_id)) {
                    $map['admin_id'] = $admin_id;
                }
                unset($map['user_id']);
                $total_num += db($val)->where($map)->count();//获取日志总数
                $total[] += $total_num;//获取日志总数
            }
            //3.获取当前查询的表
            $list = [];

            foreach ($tables as $key => $val) {
                //如果开始
                if ($start < $total[$key] && $start >= (intval($key - 1) >= 0 ? $total[$key - 1] : 0)) {
                    $list = db($tables[$key])->where($map)->limit($start - (intval($key - 1) >= 0 ? $total[$key - 1] : 0), $length)->order("id desc")->select();//获取日志总数
                    if (count($list) < $length && isset($tables[$key + 1])) {
                        $list = array_merge($list, db($tables[$key + 1])->where($map)->limit(0, $length - count($list))->order("id desc")->select());
                    }
                    break;
                }
            }
            $re = ['code' => 0, 'msg' => '查询成功', 'count' => $total_num, 'data' => $list];
            return json($re);
        }
        return $this->fetch('log', [
            'param' => $param,
            'roles' => model('authGroup')->where("status=1 and type = 1")->select()
        ]);
    }

}
