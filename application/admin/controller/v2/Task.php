<?php
    /**
     *  Encoding : UTF-8
     *  Separator : Unix and OS X (\n)
     *  File Name : Task.php
     *  Create Date : 2022/7/5 21:42
     *  Version : 0.1
     *  Copyright : skylong Project Team Copyright (C)
     *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
     */
    namespace app\admin\controller\v2;
    use app\admin\controller\Common;
    use app\common\controller\AdminController;
    use think\Db;
    use think\db\exception\DataNotFoundException;
    use think\db\exception\ModelNotFoundException;
    use think\Exception;
    use think\exception\DbException;
    use think\exception\PDOException;

    class Task extends AdminController {

        private $adminId = null;

        public function initialize() {
            parent::initialize(); // TODO: Change the autogenerated stub
            $this->adminId = cookie('id');
            $subject = db('subject')->where("state",$this->status['NORMAL'])->select();
            $version = db('subject_version')->where("state",$this->status['NORMAL'])->select();
            $project = db('project')->where("state",$this->status['NORMAL'])->select();
            $this->assign('subject',$subject);
            $this->assign('version',$version);
            $this->assign('project',$project);
        }

        public function index(){
            $where = [];
            $type = $this->request->param('type','');
            $mode = $this->request->param('mode','');
            $title = $this->request->param('title','');
            if(!empty($type)){
                $where[] = ['ttt.type','=',$type];
            }
            if(!empty($mode)){
                $where[] = ['ttt.mode','=',$mode];
            }
            if(!empty($title)){
                $where[] = ['ttt.title','like',"%{$title}%"];
            }

            if(intval($this->adminId) !== config('rx.adminId')){
                $where[] = ['ttt.admin_id','=',$this->adminId];
            }

            $page = $this->request->post('page',$this->page);
            $limit = $this->request->post('limit',$this->limit);
            $list = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttlt.type_task_id = ttt.id')
                ->join('class_group cg','ttlt.class_id = cg.id','left')
                ->join('base b','ttlt.base_id = b.id','left')
                ->join('task t1','ttt.task_id = t1.id','left')
                ->join('task t2','ttt.tasked_id = t2.id','left')
                ->join('teacher a','ttlt.teacher_id = a.id','left')
                ->join('teacher a1','ttlt.base_teacher_id = a1.id','left')
                ->join('area ar','ttlt.area_id = ar.id','left')
                ->join('grade g','ttlt.grade_id = g.id','left')
                ->field("ttt.id,t1.`name` task_name,t2.`name` tasked_name,ttt.person_num,group_concat(cg.`name`) class_name,ttlt.teacher_id,group_concat(DISTINCT a.`username`) class_teacher_name,group_concat(DISTINCT a1.`username`) base_teacher_name,group_concat(DISTINCT b.`name`) base_name,FROM_UNIXTIME(ttt.start_date,'%Y-%m-%d') start_date,FROM_UNIXTIME(ttt.end_date,'%Y-%m-%d') end_date,ttt.is_record,ttt.is_eval,ttt.is_upt_img,ttt.is_upt_word,ttt.status,ttt.image,ttt.title,ttt.depict")
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->order('ttt.id desc')
                ->group('ttt.id')
                ->select();
            if($mode == self::MODE_TWO){
                foreach ($list as $key => $item){
                    if($type == self::TYPE_WORK){
                        $admins = db('admin')->whereIn('id',explode(',',$item['teacher_id']))->select();
                        $list[$key]['teacher_name'] = implode(',',array_column($admins,'name'));
                    }
                    $list[$key]['join_num'] = db('user_type_task_table')->where('type_task_id',$item['id'])->count();
                }
            }
            $total = db('type_task_table')
                ->alias('ttt')
                ->where($where)
                ->count();
            return $this->returnTabelJson($list,'查询成功',$total);
        }

        public function homeIndex(){
            return $this->fetch('index',['type' => self::TYPE_HOME,'mode' => self::MODE_ONE]);
        }
        public function schoolIndex(){
            return $this->fetch('index',['type' => self::TYPE_SCHO,'mode' => self::MODE_ONE]);
        }
        public function softIndex(){
            return $this->fetch('index',['type' => self::TYPE_SOFT,'mode' => self::MODE_ONE]);
        }
        public function baseIndex(){
            return $this->fetch('index',['type' => self::TYPE_BASE,'mode' => self::MODE_ONE]);
        }
        public function pubIndex(){
            return $this->fetch('index',['type' => self::TYPE_BPUB,'mode' => self::MODE_TWO]);
        }
        public function jobsIndex(){
            return $this->fetch('index',['type' => self::TYPE_JOBS,'mode' => self::MODE_TWO]);
        }
        public function workIndex(){
            return $this->fetch('index',['type' => self::TYPE_WORK,'mode' => self::MODE_TWO]);
        }

        private function getTypeList($list = [],$task_id = 0,$type_id = 0){
            $newList = [];
            foreach ($list as $key => $item){
                if(!isset($item['type'])){ $item['type'] = 0; }
                if($item['task_id'] == $task_id){
                    $item['type_task_id'] = $type_id;
                    $item['type'] = $item['type'] == 0 ? 11 : 10;
                    $item['done_time'] = $item['done_time'] == 0?'':strtotime($item['done_time']);
                    array_push($newList,$item);
                }
            }
            return $newList;
        }

        private function getClassList($list = [],$type_id = 0,$teacher_id = 0){
            $newList = [];
            foreach ($list as $item){
                array_push($newList,[
                    'type_task_id' => $type_id,
                    'class_id' => $item,
                    'teacher_id' => $teacher_id
                ]);
            }
            return $newList;
        }

        private function getClassListNew($teachers = [],$type_id = 0){
            $newList = [];
            foreach ($teachers as $class_id => $teacher_id){
                array_push($newList,[
                   'type_task_id' => $type_id,
                   'class_id' => $class_id,
                   'teacher_id' => $teacher_id
                ]);
            }
            return $newList;
        }

        /**
         * 处理家庭任务
         * @param int $type
         * @param int $mode
         * @return \think\response\Json
         * @throws \think\exception\PDOException
         */
        private function dealHome($type = self::TYPE_HOME,$mode = self::MODE_ONE){
            $image = $this->request->param('image','');
            if(empty($image)){
                return $this->returnJson([],'请上传封面');
            }
            $title = $this->request->param('title','');
            if(empty($title)){
                return $this->returnJson([],'标题不能为空');
            }
            $depict = $this->request->param('depict','');
            if(empty($depict)){
                return $this->returnJson([],'描述不能为空');
            }
            $start_date = $this->request->param('start_date','');
            $end_date = $this->request->param('end_date','');
            $records = $this->request->param('records',[]);
            $no_records = $this->request->param('no_records',[]);

            $teacher_ids = $this->request->param('teacher_ids',[]);
            $task_list = array_merge($records,$no_records);
            $task_ids = array_unique(array_column($task_list,'task_id'));
            $status = $this->request->param('status',0);
            $difficulty_points = $this->request->param('difficulty_points',1);
            $datas = [];
            $logDatas = [];
            db()->startTrans();
            try{
                foreach ($task_ids as $item){
                    ob_start();
                    $insert = [
                        'mode' => $mode,
                        'type' => $type,
                        'image' => $image,
                        'title' => $title,
                        'depict' => $depict,
                        'content' => '',
                        'picword' => '',
                        'start_date' => strtotime($start_date),
                        'end_date' => strtotime($end_date),
                        'task_id' => $item,
                        'create_time' => time(),
                        'difficulty_points' => $difficulty_points,
                        'status' => $status,
                        'admin_id' => $this->adminId
                    ];
                    $type_task_id = db('type_task_table')->insertGetId($insert);
                    $datas = array_merge($datas,$this->getTypeList($task_list,$item,$type_task_id));
                    $logDatas = array_merge($logDatas,$this->getClassListNew($teacher_ids,$type_task_id));
                    ob_clean();
                }
                // 关联执行关系
                $res_1 = db('type_task_done_table')->insertAll($datas);
                // 关联索引
                $res_2 = db('type_task_log_table')->insertAll($logDatas);
                if($res_1 !== false && $res_2 !== false){
                    db()->commit();
                    return $this->returnJson([],'操作成功',1);
                }
                db()->rollback();
            }catch (Exception $exception){
                db()->rollback();
            }
            return $this->returnJson([],'操作失败');
        }

        /**
         * 处理校内任务
         * @param int $type
         * @param int $mode
         * @return \think\response\Json
         * @throws \think\exception\PDOException
         */
        private function dealSchool($type = self::TYPE_SCHO,$mode = self::MODE_ONE){
            $image = $this->request->param('image','');
            if(empty($image)){
                return $this->returnJson([],'请上传封面');
            }
            $title = $this->request->param('title','');
            if(empty($title)){
                return $this->returnJson([],'标题不能为空');
            }
            $depict = $this->request->param('depict','');
            if(empty($depict)){
                return $this->returnJson([],'描述不能为空');
            }
            $start_date = $this->request->param('start_date','');
            $end_date = $this->request->param('end_date','');
            $content = $this->request->param('content','');
            $teacher_ids = $this->request->param('teacher_ids',[]);

            $task_id = $this->request->param('task_id',0);
            $avail_days = $this->request->param('avail_days',0);
            $tasked_id = $this->request->param('tasked_id',0);
            $status = $this->request->param('status',0);

            $edit_tasking = $this->request->param('edit_tasking',0);
            $is_record = $this->request->param('is_record',1);
            $is_eval = $this->request->param('is_eval',1);
            $is_upt_img = $this->request->param('is_upt_img',1);
            $is_upt_word = $this->request->param('is_upt_word',1);
            $records = $this->request->param('records',[]);
            $no_records = $this->request->param('no_records',[]);
            $difficulty_points = $this->request->param('difficulty_points',1);

            $task_list = array_merge($records,$no_records);

            $insert = [
                'mode' => $mode,
                'type' => $type,
                'image' => $image,
                'title' => $title,
                'depict' => $depict,
                'content' => $content,
                'picword' => $content,
                'start_date' => strtotime($start_date),
                'end_date' => strtotime($end_date),
                'task_id' => $task_id,
                'tasked_id' => $tasked_id,
                'edit_tasking' => $edit_tasking,
                'is_record' => $edit_tasking == 0?1:$is_record,
                'is_eval' => $edit_tasking == 0?1:$is_eval,
                'is_upt_img' => $edit_tasking == 0?1:$is_upt_img,
                'is_upt_word' => $edit_tasking == 0?1:$is_upt_word,
                'create_time' => time(),
                'difficulty_points' => $difficulty_points,
                'status' => $status,
                'avail_days' => $avail_days,
                'admin_id' => $this->adminId
            ];
            db()->startTrans();
            try{
                $type_task_id = db('type_task_table')->insertGetId($insert);
                $logDatas = [];
                foreach ($teacher_ids as $class_id => $teacher_id){
                    array_push($logDatas,[
                        'type_task_id' => $type_task_id,
                        'class_id' => $class_id,
                        'teacher_id' => $teacher_id
                    ]);
                }
                $datas = [];
                foreach ($task_list as $item){
                    if(!isset($item['type'])){ $item['type'] = 1; }
                    array_push($datas,[
                        'type_task_id' => $type_task_id,
                        'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                        'task_id' => $item['task_id'],
                        'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                        'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
                    ]);
                }

                // 关联执行关系
                $res_1 = db('type_task_done_table')->insertAll($datas);
                // 关联索引
                $res_2 = db('type_task_log_table')->insertAll($logDatas);
                if($res_1 !== false && $res_2 !== false){
                    db()->commit();
                    return $this->returnJson([],'操作成功',1);
                }
                db()->rollback();
                return $this->returnJson([],'操作失败11');
            }catch (Exception $exception){

                db()->rollback();
            }
            return $this->returnJson([],'操作失败');
        }

        /**
         * 处理校内轻任务
         * @param int $type
         * @param int $mode
         * @return \think\response\Json
         * @throws \think\exception\PDOException
         */
        private function dealSoft($type = self::TYPE_SCHO,$mode = self::MODE_ONE){
            $image = $this->request->param('image','');
            if(empty($image)){
                return $this->returnJson([],'请上传封面');
            }
            $title = $this->request->param('title','');
            if(empty($title)){
                return $this->returnJson([],'标题不能为空');
            }
            $depict = $this->request->param('depict','');
            if(empty($depict)){
                return $this->returnJson([],'描述不能为空');
            }
            $start_date = $this->request->param('start_date','');
            $end_date = $this->request->param('end_date','');
            $content = $this->request->param('content','');
            $teacher_ids = $this->request->param('teacher_ids',[]);

            $task_id = $this->request->param('task_id',0);
            $avail_days = $this->request->param('avail_days',0);
            $tasked_id = $this->request->param('tasked_id',0);
            $status = $this->request->param('status',0);

            $edit_tasking = $this->request->param('edit_tasking',0);
            $is_record = $this->request->param('is_record',1);
            $is_eval = $this->request->param('is_eval',1);
            $is_upt_img = $this->request->param('is_upt_img',1);
            $is_upt_word = $this->request->param('is_upt_word',1);
            $records = $this->request->param('records',[]);
            $no_records = $this->request->param('no_records',[]);
            $difficulty_points = $this->request->param('difficulty_points',1);

            $task_list = array_merge($records,$no_records);

            $insert = [
                'mode' => $mode,
                'type' => $type,
                'image' => $image,
                'title' => $title,
                'depict' => $depict,
                'content' => $content,
                'picword' => $content,
                'start_date' => strtotime($start_date),
                'end_date' => strtotime($end_date),
                'task_id' => $task_id,
                'tasked_id' => $tasked_id,
                'edit_tasking' => $edit_tasking,
                'is_record' => $edit_tasking == 0?1:$is_record,
                'is_eval' => $edit_tasking == 0?1:$is_eval,
                'is_upt_img' => $edit_tasking == 0?1:$is_upt_img,
                'is_upt_word' => $edit_tasking == 0?1:$is_upt_word,
                'create_time' => time(),
                'difficulty_points' => $difficulty_points,
                'status' => $status,
                'avail_days' => $avail_days,
                'admin_id' => $this->adminId
            ];
            db()->startTrans();
            try{
                $type_task_id = db('type_task_table')->insertGetId($insert);
                $logDatas = [];
                foreach ($teacher_ids as $class_id => $teacher_id){
                    array_push($logDatas,[
                        'type_task_id' => $type_task_id,
                        'class_id' => $class_id,
                        'teacher_id' => $teacher_id
                    ]);
                }
                $datas = [];
                foreach ($task_list as $item){
                    if(!isset($item['type'])){ $item['type'] = 1; }
                    array_push($datas,[
                        'type_task_id' => $type_task_id,
                        'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                        'task_id' => $item['task_id'],
                        'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                        'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
                    ]);
                }

                // 关联执行关系
                $res_1 = db('type_task_done_table')->insertAll($datas);
                // 关联索引
                $res_2 = db('type_task_log_table')->insertAll($logDatas);
                if($res_1 !== false && $res_2 !== false){
                    db()->commit();
                    return $this->returnJson([],'操作成功',1);
                }
                db()->rollback();
                return $this->returnJson([],'操作失败11');
            }catch (Exception $exception){

                db()->rollback();
            }
            return $this->returnJson([],'操作失败');
        }

        /**
         * 处理基地任务
         * @param int $type
         * @param int $mode
         * @return \think\response\Json
         * @throws \think\exception\PDOException
         */
        private function dealBase($type = self::TYPE_BASE,$mode = self::MODE_ONE){
            $image = $this->request->param('image','');
            if(empty($image)){
                return $this->returnJson([],'请上传封面');
            }
            $title = $this->request->param('title','');
            if(empty($title)){
                return $this->returnJson([],'标题不能为空');
            }
            $depict = $this->request->param('depict','');
            if(empty($depict)){
                return $this->returnJson([],'描述不能为空');
            }
            $start_date = $this->request->param('start_date','');
            $end_date = $this->request->param('end_date','');
            $base_teacher_ids = $this->request->param('base_teacher_ids',[]);
            $teacher_ids = $this->request->param('teacher_ids',[]);

            $content = $this->request->param('content','');
            $task_id = $this->request->param('task_id',0);
            $avail_days = $this->request->param('avail_days',0);
            $tasked_id = $this->request->param('tasked_id',0);
            $status = $this->request->param('status',0);

            $edit_tasking = $this->request->param('edit_tasking',0);
            $is_record = $this->request->param('is_record',1);
            $is_eval = $this->request->param('is_eval',1);
            $is_upt_img = $this->request->param('is_upt_img',1);
            $is_upt_word = $this->request->param('is_upt_word',1);
            $records = $this->request->param('records',[]);
            $no_records = $this->request->param('no_records',[]);
            $difficulty_points = $this->request->param('difficulty_points',1);

            $task_list = array_merge($records,$no_records);

            $insert = [
                'mode' => $mode,
                'type' => $type,
                'image' => $image,
                'title' => $title,
                'depict' => $depict,
                'content' => $content,
                'picword' => $content,
                'start_date' => strtotime($start_date),
                'end_date' => strtotime($end_date),
                'task_id' => $task_id,
                'tasked_id' => $tasked_id,
                'edit_tasking' => $edit_tasking,
                'is_record' => $edit_tasking == 0?1:$is_record,
                'is_eval' => $edit_tasking == 0?1:$is_eval,
                'is_upt_img' => $edit_tasking == 0?1:$is_upt_img,
                'is_upt_word' => $edit_tasking == 0?1:$is_upt_word,
                'create_time' => time(),
                'difficulty_points' => $difficulty_points,
                'status' => $status,
                'avail_days' => $avail_days,
                'admin_id' => $this->adminId
            ];
            db()->startTrans();
            try{
                $type_task_id = db('type_task_table')->insertGetId($insert);
                $logDatas = [];
                foreach ($teacher_ids as $class_id => $teacher_id){
                    foreach ($base_teacher_ids as $base_id => $base_teacher_id){
                        array_push($logDatas,[
                            'type_task_id' => $type_task_id,
                            'class_id' => $class_id,
                            'teacher_id' => $teacher_id,
                            'base_id' => str_replace('b','',$base_id),
                            'base_teacher_id' => $base_teacher_id
                        ]);
                    }
                }
                $datas = [];
                foreach ($task_list as $item){
                    if(!isset($item['type'])){ $item['type'] = 1; }
                    array_push($datas,[
                        'type_task_id' => $type_task_id,
                        'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                        'task_id' => $item['task_id'],
                        'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                        'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
                    ]);
                }

                // 关联执行关系
                $res_1 = db('type_task_done_table')->insertAll($datas);
                // 关联索引
                $res_2 = db('type_task_log_table')->insertAll($logDatas);
                if($res_1 !== false && $res_2 !== false){
                    db()->commit();
                    return $this->returnJson([],'操作成功',1);
                }
                db()->rollback();
                return $this->returnJson([],'操作失败11');
            }catch (Exception $exception){
                db()->rollback();
                return $this->returnJson([],'操作失败:'.$exception->getMessage());
            }
        }

        /**
         * 处理公益活动及职业体验
         * @param int $type
         * @param int $mode
         * @return \think\response\Json
         * @throws \think\exception\PDOException
         */
        private function dealPubjob($type = self::TYPE_BPUB,$mode = self::MODE_TWO){
            $image = $this->request->param('image','');
            if(empty($image)){
                return $this->returnJson([],'请上传封面');
            }
            $title = $this->request->param('title','');
            if(empty($title)){
                return $this->returnJson([],'标题不能为空');
            }
            $depict = $this->request->param('depict','');
            if(empty($depict)){
                return $this->returnJson([],'描述不能为空');
            }
            $start_date = $this->request->param('start_date','');
            $end_date = $this->request->param('end_date','');

            $base_teacher_ids = $this->request->param('base_teacher_ids',[]);

            $content = $this->request->param('content','');
            $task_id = $this->request->param('task_id',0);
            $avail_days = $this->request->param('avail_days',0);
            $tasked_id = $this->request->param('tasked_id',0);
            $status = $this->request->param('status',0);

            $edit_tasking = $this->request->param('edit_tasking',0);
            $is_record = $this->request->param('is_record',1);
            $is_eval = $this->request->param('is_eval',1);
            $is_upt_img = $this->request->param('is_upt_img',1);
            $is_upt_word = $this->request->param('is_upt_word',1);
            $records = $this->request->param('records',[]);
            $no_records = $this->request->param('no_records',[]);

            $area_ids = $this->request->param('area_ids','');
            $school_ids = $this->request->param('school_id','');
            $grade_ids = $this->request->param('grade_id','');
            $person_num = $this->request->param('person_num',0);
            $picword = $this->request->param('picword','');
            $brage = $this->request->param('brage',[]);
            $difficulty_points = $this->request->param('difficulty_points',1);

            $task_list = array_merge($records,$no_records);
            $area_ids = explode(',',$area_ids);
            $school_ids = explode(',',$school_ids);
            $grade_ids = explode(',',$grade_ids);

            $insert = [
                'mode' => $mode,
                'type' => $type,
                'image' => $image,
                'title' => $title,
                'depict' => $depict,
                'content' => $content,
                'picword' => $picword,
                'start_date' => strtotime($start_date),
                'end_date' => strtotime($end_date),
                'task_id' => $task_id,
                'tasked_id' => $tasked_id,
                'edit_tasking' => $edit_tasking,
                'is_record' => $edit_tasking == 0?1:$is_record,
                'is_eval' => $edit_tasking == 0?1:$is_eval,
                'is_upt_img' => $edit_tasking == 0?1:$is_upt_img,
                'is_upt_word' => $edit_tasking == 0?1:$is_upt_word,
                'create_time' => time(),
                'difficulty_points' => $difficulty_points,
                'status' => $status,
                'person_num' => $person_num,
                'brage' => serialize($brage),
                'avail_days' => $avail_days,
                'admin_id' => $this->adminId
            ];
            db()->startTrans();
            try{
                $type_task_id = db('type_task_table')->insertGetId($insert);
                $logDatas = [];
                foreach ($base_teacher_ids as $base_id => $base_teacher_id){
                    foreach ($area_ids as $area_id){
                        foreach ($school_ids as $school_id){
                            list($parentAreaId,$currentSid) = explode('-',$school_id);
                            if($area_id != $parentAreaId){
                                continue;
                            }
                            foreach ($grade_ids as $grade_id){
                                array_push($logDatas,[
                                    'type_task_id' => $type_task_id,
                                    'area_id' => $area_id,
                                    'school_id' => $currentSid,
                                    'grade_id' => $grade_id,
                                    'base_id' => str_replace('b','',$base_id),
                                    'base_teacher_id' => $base_teacher_id
                                ]);
                            }
                        }
                    }
                }
                $datas = [];
                foreach ($task_list as $item){
                    if(!isset($item['type'])){ $item['type'] = 1; }
                    array_push($datas,[
                        'type_task_id' => $type_task_id,
                        'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                        'task_id' => $item['task_id'],
                        'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                        'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
                    ]);
                }

                // 关联执行关系
                $res_1 = db('type_task_done_table')->insertAll($datas);
                // 关联索引
                $res_2 = db('type_task_log_table')->insertAll($logDatas);
                if($res_1 !== false && $res_2 !== false){
                    db()->commit();
                    return $this->returnJson([],'操作成功',1);
                }
                db()->rollback();
                return $this->returnJson([],'操作失败11');
            }catch (Exception $exception){
                db()->rollback();
                return $this->returnJson([],'操作失败:'.$exception->getMessage());
            }
        }

        /**
         * 处理劳动大赛
         * @param int $type
         * @param int $mode
         * @return \think\response\Json
         * @throws \think\exception\PDOException
         */
        private function dealWork($type = self::TYPE_WORK,$mode = self::MODE_TWO){
            $image = $this->request->param('image','');
            if(empty($image)){
                return $this->returnJson([],'请上传封面');
            }
            $title = $this->request->param('title','');
            if(empty($title)){
                return $this->returnJson([],'标题不能为空');
            }
            $depict = $this->request->param('depict','');
            if(empty($depict)){
                return $this->returnJson([],'描述不能为空');
            }

            $start_date = $this->request->param('start_date','');
            $end_date = $this->request->param('end_date','');

            $task_id = $this->request->param('task_id',0);
            $status = $this->request->param('status',0);

            $records = $this->request->param('records',[]);
            $no_records = $this->request->param('no_records',[]);

            $area_ids = $this->request->param('area_ids','');
            $school_ids = $this->request->param('school_id','');
            $grade_ids = $this->request->param('grade_id','');
            $person_num = $this->request->param('person_num',0);
            $picword = $this->request->param('picword','');
            $brage = $this->request->param('brage',[]);
            $difficulty_points = $this->request->param('difficulty_points',1);

            $task_list = array_merge($records,$no_records);
            $area_ids = explode(',',$area_ids);
            $school_ids = explode(',',$school_ids);
            $grade_ids = explode(',',$grade_ids);


            $teacher_id = $this->request->param('teacher_id',''); // 评委老师
            $show_result = $this->request->param('show_result',0);
            $pass_text = $this->request->param('pass_text','');
            $no_pass_text = $this->request->param('no_pass_text','');

            $insert = [
                'mode' => $mode,
                'type' => $type,
                'image' => $image,
                'title' => $title,
                'depict' => $depict,
                'picword' => $picword,
                'start_date' => strtotime($start_date),
                'end_date' => strtotime($end_date),
                'task_id' => $task_id,
                'create_time' => time(),
                'difficulty_points' => $difficulty_points,
                'status' => $status,
                'person_num' => $person_num,
                'show_result' => $show_result,
                'pass_text' => $pass_text,
                'no_pass_text' => $no_pass_text,
                'brage' => serialize($brage),
                'admin_id' => $this->adminId
            ];
            db()->startTrans();
            try{
                $type_task_id = db('type_task_table')->insertGetId($insert);
                $logDatas = [];
                foreach ($area_ids as $area_id){
                    foreach ($school_ids as $school_id){
                        list($parentAreaId,$currentSid) = explode('-',$school_id);
                        if($area_id != $parentAreaId){
                            continue;
                        }
                        foreach ($grade_ids as $grade_id){
                            array_push($logDatas,[
                                'type_task_id' => $type_task_id,
                                'area_id' => $area_id,
                                'school_id' => $currentSid,
                                'grade_id' => $grade_id,
                                'teacher_id' => $teacher_id
                            ]);
                        }
                    }
                }
                $datas = [];
                foreach ($task_list as $item){
                    if(!isset($item['type'])){ $item['type'] = 1; }
                    array_push($datas,[
                        'type_task_id' => $type_task_id,
                        'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                        'task_id' => $item['task_id'],
                        'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                        'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
                    ]);
                }

                // 关联执行关系
                $res_1 = db('type_task_done_table')->insertAll($datas);
                // 关联索引
                $res_2 = db('type_task_log_table')->insertAll($logDatas);
                if($res_1 !== false && $res_2 !== false){
                    db()->commit();
                    return $this->returnJson([],'操作成功',1);
                }
                db()->rollback();
                return $this->returnJson([],'操作失败11');
            }catch (Exception $exception){
                db()->rollback();
                return $this->returnJson([],'操作失败:'.$exception->getMessage());
            }
        }

        public function add(){
            $type = $this->request->param('type','');
            $mode = $this->request->param('mode','');
            if($this->request->isPost()){
                try{
                    switch ($type){
                        case self::TYPE_HOME:
                            return $this->dealHome();
                            break;
                        case self::TYPE_SCHO:
                            return $this->dealSchool();
                            break;
                        case self::TYPE_SOFT:
                            return $this->dealSoft();
                            break;
                        case self::TYPE_BASE:
                            return $this->dealBase();
                            break;
                        case self::TYPE_JOBS:
                        case self::TYPE_BPUB:
                            return $this->dealPubjob($type,$mode);
                            break;
                        case self::TYPE_WORK:
                            return $this->dealWork();
                            break;
                    }
                }catch (PDOException $PDOException){
                }
            }
            return $this->returnJson([],'无效请求');
        }

        public function edit(){
            if($this->request->isPost()){
                $id = $this->request->param('id',0);
                // 检查当前项目是否已经派发，如果派发，提示用户先取消项目，再尝试修改
                // if(db('user_type_task_table')->where('type_task_id',$id)->count() + db('type_task_sign_table')->where('type_task_id',$id)->count() > 0){
                //     return $this->returnJson([],'当前项目已派发，请取消对应项目发布后再尝试！');
                // }
                $params = $this->request->param();
                // 所有项目都包含
                $mode = $params['mode'];
                $type = $params['type'];
                $image = $params['image'];
                $title = $params['title'];
                $depict = $params['depict'];
                if(empty($image)){
                    return $this->returnJson([],'请上传封面');
                }
                if(empty($title)){
                    return $this->returnJson([],'标题不能为空');
                }
                if(empty($depict)){
                    return $this->returnJson([],'描述不能为空');
                }
                $start_date = $params['start_date'];
                $end_date = $params['end_date'];
                $task_id = $params['task_id'];
                $difficulty_points = $params['difficulty_points'];
                $status = $params['status'];
                // 以下可能包含
                $records = $this->request->param('records',[]);
                $no_records = $this->request->param('no_records',[]);

                $teacher_ids = $this->request->param('teacher_ids',[]);
                $task_list = array_merge_recursive($records,$no_records);

                $content = $this->request->param('content','');

                $avail_days = $this->request->param('avail_days',0);
                $tasked_id = $this->request->param('tasked_id',0);

                $edit_tasking = $this->request->param('edit_tasking',0);
                $is_record = $this->request->param('is_record',1);
                $is_eval = $this->request->param('is_eval',1);
                $is_upt_img = $this->request->param('is_upt_img',1);
                $is_upt_word = $this->request->param('is_upt_word',1);

                $base_teacher_ids = $this->request->param('base_teacher_ids',[]);
                $area_ids = $this->request->param('area_ids','');
                $school_ids = $this->request->param('school_id','');
                $grade_ids = $this->request->param('grade_id','');
                $person_num = $this->request->param('person_num',0);
                $picword = $this->request->param('picword','');
                $brage = $this->request->param('brage',[]);

                $teacher_id = $this->request->param('teacher_id',''); // 评委老师
                $show_result = $this->request->param('show_result',0);
                $pass_text = $this->request->param('pass_text','');
                $no_pass_text = $this->request->param('no_pass_text','');

                $area_ids = explode(',',$area_ids);
                $school_ids = explode(',',$school_ids);
                $grade_ids = explode(',',$grade_ids);

                $logDatas = [];
                $datas = [];
                if($mode == self::MODE_ONE){
                    // 处理关联数据
                    switch ($type){
                        case self::TYPE_HOME:
                        case self::TYPE_SCHO:
                            foreach ($teacher_ids as $class_id => $teacher_id){
                                array_push($logDatas,[
                                    'type_task_id' => $id,
                                    'class_id' => $class_id,
                                    'teacher_id' => $teacher_id
                                ]);
                            }
                            break;
                        case self::TYPE_BASE:
                            foreach ($teacher_ids as $class_id => $teacher_id){
                                foreach ($base_teacher_ids as $base_id => $base_teacher_id){
                                    array_push($logDatas,[
                                        'type_task_id' => $id,
                                        'class_id' => $class_id,
                                        'teacher_id' => $teacher_id,
                                        'base_id' => str_replace('b','',$base_id),
                                        'base_teacher_id' => $base_teacher_id
                                    ]);
                                }
                            }
                            break;
                    }
                    // 处理执行数据
                    switch ($type){
                        case self::TYPE_HOME:
                            foreach ($task_list as $key => $item){
                                if(!isset($item['type'])){ $item['type'] = 0; }
                                if($item['task_id'] == $task_id){
                                    $item['type_task_id'] = $id;
                                    $item['type'] = $item['type'] == 0 ? 11 : 10;
                                    $item['done_time'] = $item['done_time'] == 0?'':strtotime($item['done_time']);
                                    array_push($datas,$item);
                                }
                            }
                            break;
                        case self::TYPE_SCHO:
                            foreach ($task_list as $item){
                                if(!isset($item['type'])){ $item['type'] = 1; }
                                array_push($datas,[
                                    'type_task_id' => $id,
                                    'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                                    'task_id' => $item['task_id'],
                                    'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                                    'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
                                ]);
                            }
                            break;
                        case self::TYPE_BASE:
                            foreach ($task_list as $item){
                                if(!isset($item['type'])){ $item['type'] = 1; }
                                array_push($datas,[
                                    'type_task_id' => $id,
                                    'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                                    'task_id' => $item['task_id'],
                                    'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                                    'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
                                ]);
                            }
                            break;
                    }
                }else{
                    // 处理关联数据
                    switch ($type){
                        case self::TYPE_JOBS:
                        case self::TYPE_BPUB:
                            foreach ($base_teacher_ids as $base_id => $base_teacher_id){
                                foreach ($area_ids as $area_id){
                                    foreach ($school_ids as $school_id){
                                        list($parentAreaId,$currentSid) = explode('-',$school_id);
                                        if($area_id != $parentAreaId){
                                            continue;
                                        }
                                        foreach ($grade_ids as $grade_id){
                                            array_push($logDatas,[
                                                'type_task_id' => $id,
                                                'area_id' => $area_id,
                                                'school_id' => $currentSid,
                                                'grade_id' => $grade_id,
                                                'base_id' => str_replace('b','',$base_id),
                                                'base_teacher_id' => $base_teacher_id
                                            ]);
                                        }
                                    }
                                }
                            }
                            break;
                        case self::TYPE_WORK:
                            foreach ($area_ids as $area_id){
                                foreach ($school_ids as $school_id){
                                    list($parentAreaId,$currentSid) = explode('-',$school_id);
                                    if($area_id != $parentAreaId){
                                        continue;
                                    }
                                    foreach ($grade_ids as $grade_id){
                                        array_push($logDatas,[
                                            'type_task_id' => $id,
                                            'area_id' => $area_id,
                                            'school_id' => $currentSid,
                                            'grade_id' => $grade_id,
                                            'teacher_id' => $teacher_id
                                        ]);
                                    }
                                }
                            }
                            break;
                    }
                    // 处理执行信息
                    switch ($type){
                        case self::TYPE_JOBS:
                        case self::TYPE_BPUB:
                            foreach ($task_list as $item){
                                if(!isset($item['type'])){ $item['type'] = 1; }
                                array_push($datas,[
                                    'type_task_id' => $id,
                                    'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                                    'task_id' => $item['task_id'],
                                    'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                                    'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
                                ]);
                            }
                            break;
                        case self::TYPE_WORK:
                            foreach ($task_list as $item){
                                if(!isset($item['type'])){ $item['type'] = 1; }
                                array_push($datas,[
                                    'type_task_id' => $id,
                                    'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                                    'task_id' => $item['task_id'],
                                    'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                                    'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
                                ]);
                            }
                            break;
                    }
                }

                $update = [
                    'image' => $image,
                    'content' => $content,
                    'title' => $title,
                    'depict' => $depict,
                    'start_date' => strtotime($start_date),
                    'end_date' => strtotime($end_date),
                    'task_id' => $task_id,
                    'tasked_id' => $tasked_id,
                    'edit_tasking' => $edit_tasking,
                    'is_record' => $is_record,
                    'is_eval' => $is_eval,
                    'is_upt_img' => $is_upt_img,
                    'is_upt_word' => $is_upt_word,
                    'avail_days' => $avail_days,
                    'status' => $status,
                    'person_num' => $person_num,
                    'picword' => $picword,
                    'brage' => empty($brage) ? '' : serialize($brage),
                    'show_result' => $show_result,
                    'pass_text' => $pass_text,
                    'no_pass_text' => $no_pass_text,
                    'update_time' => time(),
                    'difficulty_points' => $difficulty_points
                ];

                db()->startTrans();
                try{
                    $res = db('type_task_table')->where('id',$id)->update($update);
                    if($res !== false){
                        // 关联表数据更新【先删除指定数据，再新增改变后的数据】
                        $del_res_1 = db('type_task_log_table')->where('type_task_id',$id)->delete();
                        $insert_res_1 = db('type_task_log_table')->insertAll($logDatas);
                        // 关联执行表数据【先删除指定数据，再新增改变后的数据】
                        $del_res_2 = db('type_task_done_table')->where('type_task_id',$id)->delete();
                        $insert_res_2 = db('type_task_done_table')->insertAll($datas);
                        if($del_res_1 !== false && $insert_res_1 !== false && $del_res_2 !== false && $insert_res_2 !== false){
                            db()->commit();
                            insert_admin_log('项目信息修改成功');
                            return $this->returnJson([],'操作成功',1);
                        }
                    }
                    db()->rollback();
                    insert_admin_log('项目信息修改失败');
                    return $this->returnJson([],'操作失败');
                }catch (Exception $exception){
                    db()->rollback();
                    insert_admin_log('项目信息修改失败：'.$exception->getMessage());
                    return $this->returnJson([],'操作失败');
                }
            }
            $id = $this->request->param('id',0); // 项目id
            $info = db('type_task_table')->where('id',$id)->find();
            $task_info = db('task')->where('id',$info['task_id'])->find();
            $recordList = [];
            $noRecord = [];
            if($task_info['type'] == 1){
                // 记录题
                $recordList = db('type_task_done_table')
                    ->where('type_task_id',$id)
                    ->where('task_id',$task_info['id'])
                    ->whereIn('type',[self::CLASS_BEFORE_R,self::CLASS_BEFORE])
                    ->order('done_time asc')
                    ->field('FROM_UNIXTIME(done_time,"%Y-%m-%d") done_time')
                    ->select();
            }else{
                $noRecord = ['id' => $task_info['id'],'name' => $task_info['name']];
            }
            $info['task_name'] = $task_info['name'];
            $info['recordList'] = $recordList;
            $info['noRecord'] = $noRecord;
            // 获取关联信息
            $typeTaskLogs = db('type_task_log_table')
                ->alias('ttlt')
                ->join('class_group cg','cg.id = ttlt.class_id','left')
                ->join('teacher t','t.id = ttlt.teacher_id','left')
                ->join('teacher t1','t1.id = ttlt.base_teacher_id','left')
                ->join('base b','b.id = ttlt.base_id','left')
                ->join('area a','a.id = ttlt.area_id','left')
                ->join('grade g','g.id = ttlt.grade_id','left')
                ->join('school s','s.id = ttlt.school_id','left')
                ->where('ttlt.type_task_id',$id)
                ->field("ttlt.id,ttlt.class_id,ttlt.teacher_id,ttlt.base_id,ttlt.base_teacher_id,ttlt.area_id,ttlt.grade_id,ttlt.school_id,cg.`name` class_name,t.`username` teacher_name,b.`name` base_name,t1.`username` base_teacher_name,a.`name` area_name,g.`name` grade_name,s.`name` school_name")
                ->select();
            $class_ids = array_filter(array_column($typeTaskLogs,'class_id'));
            $class_names = array_filter(array_column($typeTaskLogs,'class_name'));
            $choose_teacher_ids = array_filter(array_column($typeTaskLogs,'teacher_id'));
            $info['class_ids'] = implode(',',array_unique($class_ids));
            $info['class_names'] = implode(',',array_unique($class_names));
            $info['choose_teacher_ids'] = implode(',',$choose_teacher_ids);
            $info['base_ids'] = implode(',',array_filter(array_unique(array_column($typeTaskLogs,'base_id'))));
            $info['bases_names'] = implode(',',array_filter(array_unique(array_column($typeTaskLogs,'base_name'))));
            $info['choose_base_teacher_ids'] = implode(',',array_filter(array_column($typeTaskLogs,'base_teacher_id')));

            $info['area_ids'] = implode(',',array_filter(array_unique(array_column($typeTaskLogs,'area_id'))));
            $info['area_names'] = implode(',',array_filter(array_unique(array_column($typeTaskLogs,'area_name'))));
            $info['school_ids'] = implode(',',array_filter(array_unique(array_column($typeTaskLogs,'school_id'))));
            $info['grade_ids'] = implode(',',array_filter(array_unique(array_column($typeTaskLogs,'grade_id'))));

            $info['brage'] = empty($info['brage']) ? [] : unserialize($info['brage']);

            $type = $info['type'];
            $mode = $info['mode'];
            $teacher_id = '';
            if($mode == self::MODE_TWO){
                $logs = db('type_task_log_table')->where('type_task_id',$id)->field('id,teacher_id,CONCAT_WS("-",area_id,school_id) school_id')->select();
                if($type == self::TYPE_WORK){
                    $teacher_id = $logs[0]['teacher_id'];
                }
                $info['school_ids'] = implode(',',array_filter(array_unique(array_column($logs,'school_id'))));
            }
            $info['teacher_id'] = $teacher_id;

            $task_info = db('task')->where('id',$info['tasked_id'])->find();
            $recordedList = [];
            $noRecorded = [];
            if(!empty($task_info)){
                if($task_info['type'] == 1){
                    // 记录题
                    $recordedList = db('type_task_done_table')
                        ->where('type_task_id',$id)
                        ->where('task_id',$task_info['id'])
                        ->whereIn('type',[self::CLASS_AFTER_R,self::CLASS_AFTER])
                        ->order('done_day asc')
                        ->field('done_day')
                        ->select();
                }else{
                    $noRecorded = ['id' => $task_info['id'],'name' => $task_info['name']];
                }
            }
            $info['tasked_name'] = $task_info['name'];
            $info['recordedList'] = $recordedList;
            $info['noRecorded'] = $noRecorded;
            return $this->fetch('edit',compact('info'));
        }

        public function homeAdd(){
            return $this->fetch('save',['type' => self::TYPE_HOME,'mode' => self::MODE_ONE]);
        }

        public function schoolAdd(){
            return $this->fetch('save',['type' => self::TYPE_SCHO,'mode' => self::MODE_ONE]);
        }
        public function softAdd(){
            return $this->fetch('save_soft',['type' => self::TYPE_SOFT,'mode' => self::MODE_ONE]);
        }

        public function baseAdd(){
            return $this->fetch('save',['type' => self::TYPE_BASE,'mode' => self::MODE_ONE]);
        }
        public function pubAdd(){
            return $this->fetch('save',['type' => self::TYPE_BPUB,'mode' => self::MODE_TWO]);
        }

        public function jobsAdd(){
            return $this->fetch('save',['type' => self::TYPE_JOBS,'mode' => self::MODE_TWO]);
        }

        public function workAdd(){
            return $this->fetch('save',['type' => self::TYPE_WORK,'mode' => self::MODE_TWO]);
        }

        public function state(){
            $id = $this->request->param('id', 0);
            $info = db('type_task_table')->where('id',$id)->find();
            if(empty($info) || ($info['admin_id'] != cookie('id') && cookie('id') != config('rx.adminId'))){
                return $this->returnJson([],'操作失败：您没有操作权限');
            }
            $status = $this->request->param('status', 0);
            db('type_task_table')->where("id = {$id}")->update(['status'=>$status]);
            return $this->returnJson([], '操作成功',1);
        }

        // 删除
        public function del(){
            $id = $this->request->param('id', 0);
            db('type_task_table')->where("id = {$id}")->delete();
            // 剔除相关信息
            // 1. 自选类型任务报名表
            db('type_task_sign_table')->where('type_task_id',$id)->delete();
            // 2. 用户总类型任务状态表
            $user_type_task_table_list = db('user_type_task_table')->where('type_task_id',$id)->select();
            db('user_type_task_table')->whereIn('id',array_column($user_type_task_table_list,'id'))->delete();
            // 3. 用户阶段任务执行表
            $user_type_task_log_table_list = db('user_type_task_log_table')->whereIn('user_type_task_id',array_column($user_type_task_table_list,'id'))->select();
            db('user_type_task_log_table')->whereIn('id',array_column($user_type_task_log_table_list,'id'))->delete();
            // 4. 用户类型任务答题记录表
            db('user_question_answer_table')->whereIn('user_type_task_log_id',array_column($user_type_task_log_table_list,'id'))->delete();
            // 5. 用户学分增减记录表
            db('user_reckon_score_table')->whereIn('user_type_task_id',array_column($user_type_task_table_list,'id'))->delete();
            // 6. 用户劳豆增减记录表
            db('user_work_bean_table')->whereIn('user_type_task_id',array_column($user_type_task_table_list,'id'))->delete();
            // 7. 用户劳动大赛评分表
            db('user_work_task_log_table')->whereIn('user_type_task_log_id',array_column($user_type_task_log_table_list,'id'))->delete();
            // 8. 用户评分表
            db('user_mark_table')->whereIn('user_type_task_id',array_column($user_type_task_table_list,'id'))->delete();

            return $this->returnJson([], '操作成功');
        }

        // 审核通过的报名用户列表
        public function signUser(){
            $id = $this->request->param('id',0);
            if($this->request->isPost()){
                $page = $this->request->post('page',$this->page);
                $limit = $this->request->post('limit',$this->limit);
                $where = [];
                $where[] = ['uttt.type_task_id','=',$id];
                $list = db('user_type_task_table')
                    ->alias('uttt')
                    ->join('user u','uttt.user_id = u.id')
                    ->join('school s','u.school_id = s.id','left')
                    ->join('grade g','u.grade_id = g.id','left')
                    ->field('FROM_UNIXTIME(uttt.create_time) create_time,u.id,u.sex,u.avatar,if(u.`name` = "",u.nickname,u.`name`) student_name,s.`name` school_name,g.`name` grade_name')
                    ->where($where)
                    ->order('uttt.status asc')
                    ->limit(($page-1)*$limit,$limit)
                    ->select();
                $total = db('user_type_task_table')
                    ->alias('uttt')
                    ->join('user u','uttt.user_id = u.id')
                    ->where($where)
                    ->count();
                return $this->returnTabelJson($list,'查询成功',$total);
            }
            return $this->fetch('sign',compact('id'));
        }

        // 作品评选
        public function selectionOfWorks(){
            if($this->request->isPost()){
                $page = $this->request->post('page',$this->page);
                $limit = $this->request->post('limit',$this->limit);
                $where = [];
                if(cookie('id') != config('rx.adminId')){
                    $where[] = ['uwtlt.teacher_id','=',cookie('id')];
                }
                $where[] = ['uwtlt.status','=',0];
                $list = db('user_work_task_log_table')
                    ->alias('uwtlt')
                    ->join('task t','uwtlt.task_id = t.id')
                    ->join('admin a','uwtlt.teacher_id = a.id')
//                    ->join('user_type_task_log_table uttlt','uwtlt.user_type_task_log_id = uttlt.id')
                    ->join('user_type_task_table uttt','uwtlt.user_type_task_id = uttt.id')
                    ->join('type_task_table ttt','uttt.type_task_id = ttt.id')
                    ->join('user u','uttt.user_id = u.id')
                    ->join('school s','u.school_id = s.id','left')
                    ->join('grade g','u.grade_id = g.id','left')
                    ->field('uwtlt.user_type_task_id id,if(u.`name` = "",u.nickname,u.`name`) student_name,u.sex,u.avatar,s.`name` school_name,g.`name` grade_name,t.`name` task_name,ttt.type type_task_type,a.`name` teacher_name,uwtlt.status')
                    ->where($where)
                    ->order('uttt.status asc')
                    ->group('uwtlt.user_type_task_id')
                    ->limit(($page-1)*$limit,$limit)
                    ->select();
                $total = db('user_work_task_log_table')
                    ->alias('uwtlt')
                    ->where($where)
                    ->count();
                return $this->returnTabelJson($list,'查询成功',$total);
            }
            return $this->fetch('works');
        }


        // 评委评价
        public function work_view(){
            $id = $this->request->param('id',0);
            if($this->request->isPost()){
                $sorce = $this->request->param('sorce',1);
                if($this->adminId == config('rx.adminId')){
                    return $this->returnJson([],'您不可以评分哦');
                }
                $infos =  db('user_work_task_log_table')->where('user_type_task_id',$id)->where('teacher_id',$this->adminId)->select();
                db('user_work_task_log_table')->whereIn('id',array_column($infos,'id'))->update(['sorce'=>$sorce,'status'=>self::EVAL_ED]);
                if(db('user_work_task_log_table')->where("user_type_task_id = {$id} and status = ".self::EVAL_NO)->count() == 0){
                    // todo::判断是否存在未评分记录，若没有，则计算平均分
                    $subSql = db('user_work_task_log_table')->where("user_type_task_id = {$id}")->field('teacher_id,sorce')->group('teacher_id')->select(false);
                    $sorce = Db::table("({$subSql}) t")->avg('t.sorce');
                    $logInfo = db('user_type_task_log_table')->where('user_type_task_id',$id)->order('id desc')->find();
                    $is_pass = 0;
                    // 判断是否通关
                    if($sorce >= config('sys_data.work_pass_score')){
                        $is_pass = 1;
                        // 任务过关发送消息通知
                        $this->messageToClient('活动过关通知',"您于".date('Y-m-d',$logInfo['create_time'])."报名参加的劳动大赛已成功过关",'',$logInfo['user_id'],1);
                    }
                    db('user_type_task_log_table')->where('user_type_task_id',$id)->update(['is_pass'=>$is_pass,'sroce'=>$sorce,'status'=>self::STATUS_ED]);
                    // todo::更新劳动大赛任务状态 - 【9课后已评分】
                    try{
                        $this->changeTypeTaskStatus(0,$logInfo['user_id'],self::STATUS_AFTER_EVAL_ED,$id);
                        // 计入学分
                        $this->reckonScore(0,$logInfo['user_id'],$logInfo['id']);
                    }catch (DataNotFoundException $dataNotFoundException){
                    }catch (ModelNotFoundException $modelNotFoundException){
                    }catch (DbException $dbException){
                    }
                    // 检查用户是否存在同任务总表下的其他阶段性任务
                    $typeLogInfo = db('user_type_task_log_table')->where('user_type_task_id',$logInfo['user_type_task_id'])->where('status',self::STATUS_NO)->order('id asc')->find();
                    if(!empty($typeLogInfo)){
                        db('user_type_task_log_table')->where('id',$typeLogInfo['id'])->update(['status'=>self::STATUS_ING]);
                    }
                }
                return $this->returnJson([],'评分成功',1);
            }
            $infos = db('user_work_task_log_table')->where('user_type_task_id',$id)->select();
//            $info = db('user_work_task_log_table')->where('id',$id)->find();
            if(empty($infos)){
                return $this->returnJson([],'当前用户的阶段任务不存在');
            }
            $taskName = db('task')->where('id',$infos[0]['task_id'])->value('name');
            $subAns = [];
            $objAns = [];
            try{
                foreach ($infos as $info){
                    // 主观题答案
                    $sub_ans = empty($info['sub_ans']) ? [] : json_decode(json_encode(json_decode($info['sub_ans'])),true);
                    // 客观题答案
                    $obj_ans = empty($info['obj_ans']) ? [] : json_decode(json_encode(json_decode($info['obj_ans'])),true);
                    // 主观题文件
                    $sub_files = empty($info['sub_files']) ? [] : json_decode(json_encode(json_decode($info['sub_files'])),true);
                    // 客观题文件
                    $obj_files = empty($info['obj_files']) ? [] : json_decode(json_encode(json_decode($info['obj_files'])),true);
                    $subAns[] = $this->combinAnswerList($sub_ans,$sub_files);
                    $objAns[] = $this->combinAnswerList($obj_ans,$obj_files);
                }
            }catch (DataNotFoundException $dataNotFoundException){
            }catch (ModelNotFoundException $modelNotFoundException){
            }catch (DbException $dbException){
            }
            $questionList = array_merge_recursive($subAns,$objAns);
            $questType = count($infos) > 0 ? 'RECORD_TYPE':'NORMAL_TYPE';
            return $this->fetch('work_view',compact('taskName','questionList','questType','id'));
        }

        public function copy(){
            $id = $this->request->param('id',0);
            $info = db('type_task_table t')
                ->field("t.title,t.image,t.type,t.mode,t.depict")
                ->where("t.id = {$id}")
                ->find();
            return $this->fetch('copy',compact('info'));
        }

    }