<?php
/**
 *  Encoding : UTF-8
 *  Separator : Unix and OS X (\n)
 *  File Name : Task.php
 *  Create Date : 2022/1/4 9:24
 *  Version : 0.1
 *  Copyright : skylong Project Team Copyright (C)
 *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
 */

namespace app\admin\controller\v2;
use app\common\controller\AdminController;
use think\Db;
use think\Exception;
use \think\facade\Cookie;
use think\facade\Env;

class Tasksee extends AdminController {

    public function initialize() {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index(){
        $where = [];
        if($this->request->isPost()){
            $page = $this->request->post('page',$this->page);
            $limit = $this->request->post('limit',$this->limit);
            $admin_id = Cookie::get('id');
            $whereStr = "ttt.id > 0 and ttt.status <> 0";
            $where[] = ['ttt.status','<>',0];
            $status = $this->request->param('status','');
            $startTime = strtotime(date('Y-m-d'));
            $endTime = $startTime + self::ONE_DAY - 1;
            if($admin_id != config('rx.adminId')){
                $whereStr = "ttt.admin_id = {$admin_id}";
                $where[] = ['ttt.admin_id','=',$admin_id];
            }
            if(!empty($status)){
                if($status == 1){
                    $whereStr .= " and ttlt.is_cancel = 0 and ttt.start_date <= {$startTime} and (uttt.task_over_time = 0 or uttt.task_over_time is null or uttt.task_over_time >= {$endTime})";
                    $where[] = ['ttt.start_date','<',time()];
                    $where[] = ['ttt.end_date','>=',time()];
                    $where[] = ['ttlt.is_cancel','=',0];
                }elseif ($status == 2){
                    $whereStr .= " and ttlt.is_cancel = 0 and uttt.task_over_time <> 0 and uttt.task_over_time < {$endTime}";
                    $where[] = ['ttt.end_date','<',time()];
                    $where[] = ['ttlt.is_cancel','=',0];
                }else{
                    $whereStr .= " and ttlt.is_cancel = 1";
                    $where[] = ['ttlt.is_cancel','=',1];
                }
            }
            $area_id = $this->request->param('area_ids','');
            if(!empty($area_id)){
                $whereStr .= " and ar.id in ({$area_id})";
                $where[] = ['ar.id','in',explode(',',$area_id)];
            }
            $school_id = $this->request->param('school_id','');
            if(!empty($school_id)){
                $whereStr .= " and s.id in ({$school_id})";
                $where[] = ['s.id','in',explode(',',$school_id)];
            }
            $grade_id = $this->request->param('grade_id','');
            if(!empty($grade_id)){
                $whereStr .= " and g.id in ({$grade_id})";
                $where[] = ['g.id','in',explode(',',$grade_id)];
            }
            $name = $this->request->param('name','');
            if(!empty($name)){
                $name = trim($name);
                $whereStr .= " and ttt.title like '%{$name}%'";
                $where[] = ['ttt.title','like',"%{$name}%"];
            }

            $home_sql = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttlt.type_task_id = ttt.id')
                ->join("class_group cla",'cla.id = ttlt.class_id')
                ->join("school s",'s.id = cla.school_id')
                ->join("grade g",'g.id = cla.grade_id')
                ->join("admin a",'a.id = ttt.admin_id')
                ->join("area ar",'ar.id = cla.area_id','left')
                ->field('CONCAT_WS("_",ttt.id,ttlt.class_id,ttt.type) id,ttt.`mode`,ttt.type,ttt.title,s.`name` school_name,g.`name` grade_name,FROM_UNIXTIME(ttt.start_date,"%Y-%m-%d") range_time,FROM_UNIXTIME(ttt.end_date,"%Y-%m-%d") end_date,FROM_UNIXTIME(ttt.create_time,"%Y-%m-%d") create_time,ar.`name` area_name,cla.`name` class_name,a.`name` admin_name,if(ttlt.is_cancel = 1,"3",if(ttt.end_date > '.$startTime.',"1","2")) status_text')
                ->where($where)
                ->where('ttt.type',self::TYPE_HOME)
                ->distinct(true)
                ->select(false);
            $work_sql = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttlt.type_task_id = ttt.id')
                ->join("school s",'s.id = ttlt.school_id')
                ->join("grade g",'g.id = ttlt.grade_id')
                ->join("admin a",'a.id = ttt.admin_id')
                ->join("area ar",'ar.id = ttlt.area_id')
                ->field('CONCAT_WS("_",ttt.id,ar.id,s.id,g.id,ttt.type) id,ttt.`mode`,ttt.type,ttt.title,s.`name` school_name,g.`name` grade_name,FROM_UNIXTIME(ttt.start_date,"%Y-%m-%d") range_time,FROM_UNIXTIME(ttt.end_date,"%Y-%m-%d") end_date,FROM_UNIXTIME(ttt.create_time,"%Y-%m-%d") create_time,ar.`name` area_name,"" class_name,a.`name` admin_name,if(ttlt.is_cancel = 1,"3",if(ttt.end_date > '.$startTime.',"1","2")) status_text')
                ->where($where)
                ->where('ttt.type',self::TYPE_WORK)
                ->distinct(true)
                ->select(false);
            $other_sql_one = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttlt.type_task_id = ttt.id')
                ->join("class_group cla",'cla.id = ttlt.class_id')
                ->join('user_type_task_table uttt','uttt.type_task_id = ttt.id','left')
                ->join("school s",'s.id = cla.school_id')
                ->join("grade g",'g.id = cla.grade_id')
                ->join("admin a",'a.id = ttt.admin_id')
                ->join("area ar",'ar.id = cla.area_id')
                ->field('CONCAT_WS("_",ttt.id,cla.id,ttt.type) id,ttt.`mode`,ttt.type,ttt.title,s.`name` school_name,g.`name` grade_name,FROM_UNIXTIME(ttt.start_date,"%Y-%m-%d") range_time,if(uttt.task_over_time =0 or uttt.task_over_time is null,"",FROM_UNIXTIME(uttt.task_over_time,"%Y-%m-%d")) end_date,FROM_UNIXTIME(ttt.create_time,"%Y-%m-%d") create_time,ar.`name` area_name,cla.`name` class_name,a.`name` admin_name,if(ttlt.is_cancel = 1,"3",if(uttt.task_over_time < '.$startTime.' and uttt.task_over_time <> 0,"2","1")) status_text')
                ->whereNotIn('ttt.type',[self::TYPE_HOME,self::TYPE_WORK])
                ->where($whereStr)
                ->distinct(true)
                ->select(false);
            $other_sql_two = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttlt.type_task_id = ttt.id')
                ->join('user_type_task_table uttt','uttt.type_task_id = ttt.id','left')
                ->join("school s",'s.id = ttlt.school_id')
                ->join("grade g",'g.id = ttlt.grade_id')
                ->join("admin a",'a.id = ttt.admin_id')
                ->join("area ar",'ar.id = ttlt.area_id')
                ->field('CONCAT_WS("_",ttt.id,ar.id,s.id,g.id,ttt.type) id,ttt.`mode`,ttt.type,ttt.title,s.`name` school_name,g.`name` grade_name,FROM_UNIXTIME(ttt.start_date,"%Y-%m-%d") range_time,if(uttt.task_over_time =0 or uttt.task_over_time is null,"",FROM_UNIXTIME(uttt.task_over_time,"%Y-%m-%d")) end_date,FROM_UNIXTIME(ttt.create_time,"%Y-%m-%d") create_time,ar.`name` area_name,"" class_name,a.`name` admin_name,if(ttlt.is_cancel = 1,"3",if(uttt.task_over_time < '.$startTime.' and uttt.task_over_time <> 0,"2","1")) status_text')
                ->whereNotIn('ttt.type',[self::TYPE_HOME,self::TYPE_WORK])
                ->where($whereStr)
                ->distinct(true)
                ->select(false);

            $listSql = Db::table("({$home_sql}) bf")
                      ->union($work_sql,true)
                    ->union($other_sql_one,true)
                    ->union($other_sql_two,true)
                    ->limit(($page-1)*$limit,$limit)
                    ->order('create_time desc')
                    ->select(false);
            $list = db()->query($listSql);
            // dump($list);exit();
            $totalSql = Db::table("({$home_sql}) bf")
                          ->union($work_sql,true)
                          ->union($other_sql_one,true)
                          ->union($other_sql_two,true)
                          ->select(false);
            $total = db()->query("SELECT COUNT(t.id) AS num FROM ({$totalSql}) t LIMIT 1");
            return $this->returnTabelJson($list,'查询成功',current($total)['num']);
        }
        $area = db('area')->where("p_id = 9")->select();
        $school = db('school')->where("state = 1")->select();
        $grade = db('grade')->where("state = 1")->select();
        return $this->fetch('index',compact('area','school','grade'));
    }

    // 取消任务
    public function cancelTask(){
        $id = $this->request->param('id',0);
        $explodeIds = explode('_',$id);
        switch (count($explodeIds)){
            case 3:
                // 必选项目
                list($typeTaskId,$classId,$typeTaskType) = $explodeIds;
                db('type_task_log_table')->where('type_task_id',$typeTaskId)->where('class_id',$classId)->update(['is_cancel'=>1]);
                break;
            case 5:
                // 自选项目
                list($typeTaskId,$areaId,$schoolId,$gradeId,$typeTaskType) = $explodeIds;
                db('type_task_log_table')->where('type_task_id',$typeTaskId)->where('area_id',$areaId)->where('school_id',$schoolId)->where('grade_id',$gradeId)->update(['is_cancel'=>1]);
                break;
        }
        insert_admin_log('取消任务');
        return $this->returnJson([], '操作成功',1);
    }

    // 任务进度查看
    public function processView(){
        $id = $this->request->param('id',0);
        if($this->request->isPost()){
            $explodeIds = explode('_',$id);
            $typeTaskType = end($explodeIds);
            if(in_array($typeTaskType,[self::TYPE_HOME,self::TYPE_WORK])){

            }
            switch (count($explodeIds)){
                case 3:
                    // 必选项目
                    list($typeTaskId,$classId,$typeTaskType) = $explodeIds;
                    if($typeTaskType == self::TYPE_HOME){
                        // 获取当前任务班级包含人数
                        $list = db('user_class_log')->where('class_group_id',$classId)->select();
                        $userNum = count($list);
                        // 获取任务名称
                        $task_name = db('type_task_table')->alias('ttt')->join('task t','t.id = ttt.task_id')->where('ttt.id',$typeTaskId)->value('t.name');
                        // 获取已完成人数
                        $doneNum = db('user_type_task_table')->whereIn('user_id',array_column($list,'u_id'))->where('type_task_id',$typeTaskId)->where('status','>=',self::STATUS_BEFORE_ED)->count();
                        // 获取及时已完成人数
                        $onceNum = db('user_type_task_table')->whereIn('user_id',array_column($list,'u_id'))->where('type_task_id',$typeTaskId)->where('status','>=',self::STATUS_BEFORE_ED)->where('is_once',1)->count();
                        $data = [
                            'done' => [
                                'title' => '任务完成比例',
                                'categories' => [$task_name],
                                'values' => empty($userNum)?[0] : [ceil($doneNum/$userNum*100)]
                            ],
                            'once' => [
                                'title' => '及时完成比例',
                                'categories' => [$task_name],
                                'values' => empty($userNum)?[0] : [ceil($onceNum/$userNum*100)]
                            ]
                        ];
                    }else{
                        $list = db('user_class_log')->where('class_group_id',$classId)->select();
                        $userNum = count($list);
                        // 获取任务详情
                        $taskInfo = db('type_task_table')->where('id',$typeTaskId)->find();
                        // 获取课前任务信息
                        $task_name = db('task')->where('id',$taskInfo['task_id'])->value('name');
                        // 获取已完成人数
                        $taskDoneNum = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->whereIn('uttlt.user_id',array_column($list,'u_id'))
                            ->where('uttt.type_task_id',$typeTaskId)
                            ->where('uttlt.task_id',$taskInfo['task_id'])
                            ->where('uttlt.status',self::STATUS_ED)
                            ->field("uttlt.user_type_task_id")
                            ->distinct(true)
                            ->count();
                        // 获取及时已完成人数
                        $taskOnceNum = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->whereIn('uttlt.user_id',array_column($list,'u_id'))
                            ->where('uttt.type_task_id',$typeTaskId)
                            ->where('uttlt.task_id',$taskInfo['task_id'])
                            ->where('uttlt.status',self::STATUS_ED)
                            ->where('uttlt.is_once',1)
                            ->field("uttlt.user_type_task_id")
                            ->distinct(true)
                            ->count();
                        // 获取课前任务信息
                        $tasked_name = db('task')->where('id',$taskInfo['tasked_id'])->value('name');
                        // 获取已完成人数
                        $taskedDoneNum = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->whereIn('uttlt.user_id',array_column($list,'u_id'))
                            ->where('uttt.type_task_id',$typeTaskId)
                            ->where('uttlt.task_id',$taskInfo['tasked_id'])
                            ->where('uttlt.status',self::STATUS_ED)
                            ->field("uttlt.user_type_task_id")
                            ->distinct(true)
                            ->count();
                        // 获取及时已完成人数
                        $taskedOnceNum = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->whereIn('uttlt.user_id',array_column($list,'u_id'))
                            ->where('uttt.type_task_id',$typeTaskId)
                            ->where('uttlt.task_id',$taskInfo['tasked_id'])
                            ->where('uttlt.status',self::STATUS_ED)
                            ->where('uttlt.is_once',1)
                            ->field("uttlt.user_type_task_id")
                            ->distinct(true)
                            ->count();

                        $data = [
                            'done' => [
                                'title' => '任务完成比例',
                                'categories' => ["课前任务：{$task_name}","课后任务：{$tasked_name}"],
                                'values' => empty($userNum)?[0,0] : [ceil($taskDoneNum/$userNum*100),ceil($taskedDoneNum/$userNum*100)]
                            ],
                            'once' => [
                                'title' => '及时完成比例',
                                'categories' => ["课前任务：{$task_name}","课后任务：{$tasked_name}"],
                                'values' => empty($userNum)?[0,0] : [ceil($taskOnceNum/$userNum*100),ceil($taskedOnceNum/$userNum*100)]
                            ]
                        ];
                    }
                    break;
                case 5:
                    // 自选项目
                    list($typeTaskId,$areaId,$schoolId,$gradeId,$typeTaskType) = $explodeIds;
                    $taskInfo = db('type_task_table')->where('id',$typeTaskId)->find();
                    if($typeTaskType == self::TYPE_WORK){
                        // 获取当前任务班级包含人数
                        $userNum = $taskInfo['person_num'];
                        // 获取任务名称
                        $task_name = db('type_task_table')->alias('ttt')->join('task t','t.id = ttt.task_id')->where('ttt.id',$typeTaskId)->value('t.name');
                        // 获取已完成人数
                        $doneNum = db('user_type_task_table')->where('type_task_id',$typeTaskId)->where('status','>=',self::STATUS_BEFORE_ED)->count();
                        // 获取及时已完成人数
                        $onceNum = db('user_type_task_table')->where('type_task_id',$typeTaskId)->where('status','>=',self::STATUS_BEFORE_ED)->where('is_once',1)->count();
                        $data = [
                            'done' => [
                                'title' => '任务完成比例',
                                'categories' => [$task_name],
                                'values' => empty($userNum)?[0] : [ceil($doneNum/$userNum*100)]
                            ],
                            'once' => [
                                'title' => '及时完成比例',
                                'categories' => [$task_name],
                                'values' => empty($userNum)?[0] : [ceil($onceNum/$userNum*100)]
                            ]
                        ];
                    }else{
                        $userNum = $taskInfo['person_num'];
                        // 获取任务详情
                        $taskInfo = db('type_task_table')->where('id',$typeTaskId)->find();
                        // 获取课前任务信息
                        $task_name = db('task')->where('id',$taskInfo['task_id'])->value('name');
                        // 获取已完成人数
                        $taskDoneNum = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->where('uttt.type_task_id',$typeTaskId)
                            ->where('uttlt.task_id',$taskInfo['task_id'])
                            ->where('uttlt.status',self::STATUS_ED)
                            ->field("uttlt.user_type_task_id")
                            ->distinct(true)
                            ->count();
                        // 获取及时已完成人数
                        $taskOnceNum = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->where('uttt.type_task_id',$typeTaskId)
                            ->where('uttlt.task_id',$taskInfo['task_id'])
                            ->where('uttlt.status',self::STATUS_ED)
                            ->where('uttlt.is_once',1)
                            ->field("uttlt.user_type_task_id")
                            ->distinct(true)
                            ->count();
                        // 获取课前任务信息
                        $tasked_name = db('task')->where('id',$taskInfo['tasked_id'])->value('name');
                        // 获取已完成人数
                        $taskedDoneNum = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->where('uttt.type_task_id',$typeTaskId)
                            ->where('uttlt.task_id',$taskInfo['tasked_id'])
                            ->where('uttlt.status',self::STATUS_ED)
                            ->field("uttlt.user_type_task_id")
                            ->distinct(true)
                            ->count();
                        // 获取及时已完成人数
                        $taskedOnceNum = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->where('uttt.type_task_id',$typeTaskId)
                            ->where('uttlt.task_id',$taskInfo['tasked_id'])
                            ->where('uttlt.status',self::STATUS_ED)
                            ->where('uttlt.is_once',1)
                            ->field("uttlt.user_type_task_id")
                            ->distinct(true)
                            ->count();

                        $data = [
                            'done' => [
                                'title' => '任务完成比例',
                                'categories' => ["课前任务：{$task_name}","课后任务：{$tasked_name}"],
                                'values' => empty($userNum)?[0,0] : [ceil($taskDoneNum/$userNum*100),ceil($taskedDoneNum/$userNum*100)]
                            ],
                            'once' => [
                                'title' => '及时完成比例',
                                'categories' => ["课前任务：{$task_name}","课后任务：{$tasked_name}"],
                                'values' => empty($userNum)?[0,0] : [ceil($taskOnceNum/$userNum*100),ceil($taskedOnceNum/$userNum*100)]
                            ]
                        ];
                    }
                    break;
            }
            return json($data);
        }
        return $this->fetch('process',compact('id'));
    }


    public function feedback(){
        $where = [];
        if($this->request->isPost()){
            $page = $this->request->post('page',$this->page);
            $limit = $this->request->post('limit',$this->limit);
            $params = $this->request->param();
            if(isset($params['class_ids']) && !empty($params['class_ids'])){
                if(!empty($params['class_names'])){
                    $where[] = ['cg.id','in',explode(',',$params['class_ids'])];
                }
            }
            if(isset($params['uids']) && !empty($params['uids'])){
                if(!empty($params['user_names'])){
                    $where[] = ['u.id','in',explode(',',$params['uids'])];
                }
            }
            if(isset($params['typeStatus']) && !empty($params['typeStatus'])){
                $where[] = ['q.type',$params['typeStatus'] == 1 ? 'not in':'in',self::OBJ_LIST];
            }
            $list = db('user_question_answer_table')
                ->alias('uqat')
                ->join('question q','q.id = uqat.question_id')
                ->join('user u','u.id = uqat.user_id')
                ->join('user_class_log ucl','u.id = ucl.u_id','left')
                ->join('class_group cg','cg.id = ucl.class_group_id','left')
                ->join('school s','s.id = cg.school_id','left')
                ->join('user_type_task_log_table uttlt','uttlt.id = uqat.user_type_task_log_id')
                ->join('task t','t.id = uttlt.task_id')
                ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                ->join('type_task_table ttt','ttt.id = uttt.type_task_id')
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->field('uqat.id,q.`name` question_name,u.`name` user_name,cg.`name` class_name,s.`name` school_name,t.`name` task_name,uttlt.type,ttt.title,q.type,uqat.answer_text,uqat.answer_file,uqat.truth_text,FROM_UNIXTIME(uqat.create_time,"%Y-%m-%d") create_time')
                ->select();
            $total = db('user_question_answer_table')
                ->alias('uqat')
                ->join('question q','q.id = uqat.question_id')
                ->join('user u','u.id = uqat.user_id')
                ->join('user_class_log ucl','u.id = ucl.u_id','left')
                ->join('class_group cg','cg.id = ucl.class_group_id','left')
                ->join('school s','s.id = cg.school_id','left')
                ->join('user_type_task_log_table uttlt','uttlt.id = uqat.user_type_task_log_id')
                ->join('task t','t.id = uttlt.task_id')
                ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                ->join('type_task_table ttt','ttt.id = uttt.type_task_id')
                ->where($where)
                ->count();
            return $this->returnTabelJson($list,'查询成功',$total);
        }
        return $this->fetch('feedback');
    }
}