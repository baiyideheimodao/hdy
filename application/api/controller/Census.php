<?php
    /**
     *  统计类
     *  Encoding : UTF-8
     *  Separator : Unix and OS X (\n)
     *  File Name : Census.php
     *  Create Date : 2022/1/15 22:25
     *  Version : 0.1
     *  Copyright : skylong Project Team Copyright (C)
     *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
     */
    namespace app\api\controller;
    use app\common\controller\WeChatFactory;

    class Census extends WeChatFactory {
        private $u_id = 0;
        private $openid = '';

        public function initialize() {
            parent::initialize(); // TODO: Change the autogenerated stub
            $this->openid = $this->request->param('openid');
            $info = db('user')->where("openid = '{$this->openid}'")->find();
            if(!empty($info)){
                $this->u_id = $info['id'];
            }
        }

        // 本周
        public function week(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            $week = get_week();
            $start_time = strtotime(current($week)['date'].' 00:00:00');
            $end_time = strtotime(end($week)['date'].' 23:59:59');
            list($through_rate,$done_rate,$record_datas) = $this->deal_census($start_time,$end_time);
            return $this->returnJson(compact('through_rate','done_rate','record_datas'),'获取成功',1);
        }

        // 本月
        public function month(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            $start_time = strtotime(date('Y-m-1').' 00:00:00');
            $end_time = strtotime(date('Y-m-t').' 23:59:59');
            list($through_rate,$done_rate,$record_datas) = $this->deal_census($start_time,$end_time);
            return $this->returnJson(compact('through_rate','done_rate','record_datas'),'获取成功',1);
        }

        // 三个月
        public function three_month(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            $start_time = strtotime(date('Y-m-1',strtotime('-3 month')).' 00:00:00');
            $end_time = strtotime(date('Y-m-t').' 23:59:59');
            list($through_rate,$done_rate,$record_datas) = $this->deal_census($start_time,$end_time);
            return $this->returnJson(compact('through_rate','done_rate','record_datas'),'获取成功',1);
        }

        /**
         * 处理统计信息
         * @param int $start_time
         * @param int $end_time
         * @return array
         */
        private function deal_census($start_time = 0,$end_time = 0){
            // 1.获取指定时间范围下的所有任务
            $allot_task_ids = db('task_allot_log')
                ->alias('tal')
                ->join('task t','tal.task_id = t.id')
                ->join('user_class_log ucl','ucl.class_group_id = tal.class_or_group_id')
                ->where("tal.done_time >= {$start_time} and tal.done_time <= {$end_time} and t.type = 0 and ucl.u_id = {$this->u_id} and tal.type = 1")
                ->field('DISTINCT tal.id')
                ->select();
            $truth_nums = 0;
            $total_nums = 0;
            if(count($allot_task_ids) > 0){
                $allot_task_ids = implode(',',array_column($allot_task_ids,'id'));
                // 2.获取所有正确题数量及总题数量
                $truth_nums = db('task_log')->where("task_id in ({$allot_task_ids}) and u_id = {$this->u_id}")->sum('truth_num');
                $total_nums = db('task_log')->where("task_id in ({$allot_task_ids}) and u_id = {$this->u_id}")->sum('total_num');
            }
            // 3.获取总任务数
            $total_count = db('task_allot_log')
                ->alias('tal')
                ->join('user_class_log ucl','ucl.class_group_id = tal.class_or_group_id')
                ->where("tal.done_time >= {$start_time} and tal.done_time <= {$end_time} and ucl.u_id = {$this->u_id} and tal.type = 1")
                ->field('DISTINCT tal.id')
                ->count();
            // 4.获取已完成任务数
            $truth_count = db('task_allot_log')
                ->alias('tal')
                ->join('user_class_log ucl','ucl.class_group_id = tal.class_or_group_id')
                ->join('task_log tl','tl.task_id = tal.id')
                ->where("tal.done_time >= {$start_time} and tal.done_time <= {$end_time} and ucl.u_id = {$this->u_id} and tl.u_id = {$this->u_id} and tl.done_time > 0 and tal.type = 1")
                ->field('DISTINCT tal.id')
                ->count();
            // 5.获取记录题数据
            $record_datas = [];
            // 5.1 获取所有可分配任务
            $allot_task_list = db('task_allot_log')
                ->alias('tal')
                ->join('task t','tal.task_id = t.id')
                ->join('user_class_log ucl','ucl.class_group_id = tal.class_or_group_id')
                ->where("tal.done_time >= {$start_time} and tal.done_time <= {$end_time} and t.type = 1 and ucl.u_id = {$this->u_id} and tal.type = 1")
                ->field('DISTINCT tal.id,t.name')
                ->select();
            foreach ($allot_task_list as $item){
                $options = db('task_log')->where("task_id = {$item['id']} and u_id = {$this->u_id} and next_record_time > 0")->value('options');
                if(empty($options)){
                    continue;
                }
                array_push($record_datas,$this->getRecordData($item['name'],unserialize($options),$item['id']));

                // array_push($record_datas,[
                //    'id' => $item['id'],
                //    'name' => $item['name'],
                //    'options' => unserialize($options)
                // ]);
            }
            $through_rate = [
              'truth_num' => $truth_nums,
              'total_num' => $total_nums,
              'rate' => empty($total_nums)?0:($truth_nums/$total_nums)*100
            ];
            $done_rate = [
              'truth_count' => $truth_count,
              'total_count' => $total_count,
              'rate' => empty($total_count)?0:($truth_count/$total_count)*100
            ];
            return [$through_rate,$done_rate,$record_datas];
        }
        /**
         * 检查用户是否登录
         * @return array
         */
        private function checkLogin(){
            if(intval($this->u_id) <= 0){
                return [false,$this->returnJson([],'用户不存在')];
            }
            return [true,[]];
        }

        /**
         * 获取拼接数据
         * @param     $task_name
         * @param     $record_data
         * @param int $tal_id
         * @return array|\think\response\Json
         */
        private function getRecordData($task_name,$record_data,$tal_id = 0){
            $categories = [];
            // 获取data_x,data_y的值
            $taskInfo = db('question')
                ->alias('q')
                ->join("task_question_log tql","tql.question_id = q.id")
                ->join("task t","t.id = tql.task_id")
                ->join("task_allot_log tal","tal.task_id = tql.task_id")
                ->where("tal.id = {$tal_id} and q.type = 2")
                ->field("tal.id,t.name,q.ext")
                ->find();
            if(empty($taskInfo)){
                return $this->returnJson([],'记录不存在');
            }
            $ext = unserialize($taskInfo['ext']);
            $data_x_list = array_column($record_data,'data_x');
            $data_y_list = array_column($record_data,'data_y');
            $categories_list = array_column($record_data,'time');
            foreach ($categories_list as $item){
                array_push($categories,date('m月d日',$item));
            }
            $series = [
                [
                    'name' => $ext['data_x'],
                    'data' => $data_x_list
                ],
                [
                    'name' => $ext['data_y'],
                    'data' => $data_y_list
                ]
            ];
            return [
                'name' => $task_name,
                'categories' => $categories,
                'series' => $series
            ];
        }
    }