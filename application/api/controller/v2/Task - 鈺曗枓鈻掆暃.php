<?php
    /**
     *  Encoding : UTF-8
     *  Separator : Unix and OS X (\n)
     *  File Name : Task.php
     *  Create Date : 2022/7/12 10:54
     *  Version : 0.1
     *  Copyright : skylong Project Team Copyright (C)
     *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
     */

    namespace app\api\controller\v2;

    use app\common\controller\WeChatFactory;
    use think\Db;
    use think\db\exception\DataNotFoundException;
    use think\db\exception\ModelNotFoundException;
    use think\Exception;
    use think\exception\DbException;
    use think\exception\PDOException;

    class Task extends WeChatFactory {
        private $info   = [];
        private $openid = '';
        private $webUrl = '';

        public function initialize() {
            parent::initialize(); // TODO: Change the autogenerated stub
            $this->openid = $this->request->param('openid','');
            $this->webUrl = config('sys_data.web_site');
            if(empty($this->openid)){
                return $this->returnJson([],'请先登录',-1);
            }
            $info         = db('user')->alias('u')->where("u.openid = '{$this->openid}'")->find();
            if (!empty($info)) {
                $class_ids         = db('user_class_log')->where('u_id', $info['id'])->select();
                $class_ids         = array_column($class_ids, 'class_group_id');
                $info['class_ids'] = implode(',', $class_ids);
                $this->info        = $info;
                // 检查用户必选任务是否完成10次
                $this->checkIsTensBrage($info['id']);
            }
        }

        // 家庭项目列表
        private function typeTaskListOfHome(){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);
            $status = $this->request->param('status',''); // 状态筛选，默认显示全部

            $year = $this->request->param('year',date('Y')); // 年筛选-默认当前年
            $month = $this->request->param('month',date('m')); // 月筛选-默认当前月
            $day = $this->request->param('day',date('d')); // 日筛选-默认当天

            if(empty($year) && empty($month) && empty($day)){
                $searchStartDate = date('Y-m-d');
                $searchEndDate = date('Y-m-d');
            }else{
                if(empty($month) && empty($day)){
                    $searchStartDate = "{$year}-01-01";
                    $searchEndDate = "{$year}-12-31";
                }else{
                    if(empty($day)){
                        $searchStartDate = "{$year}-{$month}-01";
                        $searchEndDate = "{$year}-{$month}-".date('t');
                    }else{
                        $searchStartDate = "{$year}-{$month}-{$day}";
                        $searchEndDate = "{$year}-{$month}-{$day}";
                    }
                }
            }
            $startTime = strtotime($searchStartDate . '00:00:00');
            $endTime = strtotime($searchEndDate . '23:59:59');
            $having = '';
            if(!empty($status)){
                $having = '`type_status` = ' . ($status == -1 ? 0 : $status);
            }
            $list = db('type_task_table')
                ->alias('ttt')
                ->join('task t','t.id = ttt.task_id')
                ->join("task_index ti",'ti.task_id = t.id','left')
                ->join("subject su",'su.id = ti.subject_id','left')
                ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                ->join("(SELECT id, (end_date + ".self::ONE_DAY." - 1) AS end_date_time FROM {$this->prefix}type_task_table) sttt","sttt.id = ttt.id")
                ->join('user_type_task_table uttt',"uttt.type_task_id = ttt.id and uttt.user_id = {$this->info['id']}",'left')
                ->where('ttt.type',self::TYPE_HOME)
                ->where('ttt.status',self::STATE_OPEN)
                // todo::筛选未取消任务
                ->where('ttlt.is_cancel',self::DEFAULT_NO)
                ->where("({$endTime} >= ttt.start_date and {$endTime} <= sttt.end_date_time) or ({$startTime} <= ttt.start_date and {$endTime} >= sttt.end_date_time)")
                ->whereIn('ttlt.class_id',$this->info['class_ids'])
                ->limit(($page-1)*$limit,$limit)
                ->field("t.id task_id,ttt.id,ttt.`mode`,uttt.id user_type_id,if(instr(ttt.image,'http')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,t.`name`,su.`name` subject_name,ti.`level`,if(ti.level is null,\"无\",if(ti.`level` = 1,\"A\",if(ti.`level` = 2,\"B\",\"C\"))) level_name,t.`desc`,t.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ifnull(uttt.`status`,0) type_status")
                ->group('ttt.id')
                ->having($having)
                ->select();
            foreach ($list as $key => $item){
                $user_type_id = $item['user_type_id'];
                unset($list[$key]['user_type_id']);
                if($item['type'] == 0){
                    continue;
                }
                // 记录题，需判断是否中断
                // 获取阶段任务未完成记录第一条
                $firstInfo = db('user_type_task_log_table')->where('user_type_task_id',$user_type_id)->where('status','<>',self::STATUS_ED)->order('id asc')->find();
                if(empty($firstInfo)){
                    // 找不到，不管他
                    continue;
                }
                if($firstInfo['done_time'] < strtotime(date('Y-m-d'))){
                    // 判断执行日期是否小于当前日期，则将状态设置为【-4已中断】
                    $list[$key]['type_status'] = -4;
                }
            }
            $total = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                ->join("(SELECT id, (end_date + ".self::ONE_DAY." - 1) AS end_date_time FROM {$this->prefix}type_task_table) sttt","sttt.id = ttt.id")
                ->join('user_type_task_table uttt',"uttt.type_task_id = ttt.id and uttt.user_id = {$this->info['id']}",'left')
                ->where('ttt.type',self::TYPE_HOME)
                ->where('ttt.status',self::STATE_OPEN)
                // todo::筛选未取消任务
                ->where('ttlt.is_cancel',self::DEFAULT_NO)
                ->where("({$endTime} >= ttt.start_date and {$endTime} <= sttt.end_date_time) or ({$startTime} <= ttt.start_date and {$endTime} >= sttt.end_date_time)")
                // ->where('ttt.start_date','<=',$startTime)
                // ->where('sttt.end_date_time','>=',$endTime)
                ->whereIn('ttlt.class_id',$this->info['class_ids'])
                ->field("ttt.id,ttt.`mode`,if(instr(ttt.image,'http')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ifnull(uttt.`status`,0) type_status")
                ->group('ttt.id')
                ->having($having)
                ->count();
            return $this->returnJson(['list' => $list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
        }

        /**
         * 必选任务列表
         * @param int $type
         * @return \think\response\Json
         */
        private function typeTaskList($type = self::TYPE_SCHO){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);
            $status = $this->request->param('status',''); // 状态筛选，默认显示全部

            $year = $this->request->param('year',date('Y')); // 年筛选-默认当前年
            $month = $this->request->param('month',date('m')); // 月筛选-默认当前月
            $day = $this->request->param('day',date('d')); // 日筛选-默认当天

            if(empty($year) && empty($month) && empty($day)){
                $searchStartDate = date('Y-m-d');
                $searchEndDate = date('Y-m-d');
            }else{
                if(empty($month) && empty($day)){
                    $searchStartDate = "{$year}-01-01";
                    $searchEndDate = "{$year}-12-31";
                }else{
                    if(empty($day)){
                        $searchStartDate = "{$year}-{$month}-01";
                        $searchEndDate = "{$year}-{$month}-".date('t');
                    }else{
                        $searchStartDate = "{$year}-{$month}-{$day}";
                        $searchEndDate = "{$year}-{$month}-{$day}";
                    }
                }
            }
            $startTime = strtotime($searchStartDate . '00:00:00');
            $endTime = strtotime($searchEndDate . '23:59:59');
            $having = '';
            if(!empty($status)){
                $having = '`type_status` = ' . ($status == -1 ? 0 : $status);
            }
            $list = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                ->join('user_type_task_table uttt',"uttt.type_task_id = ttt.id and uttt.user_id = {$this->info['id']}",'left')
                ->where('ttt.type',$type)
                ->where('ttt.status',self::STATE_OPEN)
                // todo::筛选未取消任务
                ->where('ttlt.is_cancel',self::DEFAULT_NO)
                ->where("(ttt.start_date <= {$endTime} and (uttt.task_over_time = 0 or uttt.task_over_time is null or uttt.task_over_time >= {$startTime})) or (ttt.start_date >= {$startTime} and ttt.start_date <= {$endTime})")
                // ->where("ttt.start_date <= {$startTime} and (uttt.task_over_time = 0 or uttt.task_over_time is null or uttt.task_over_time >= {$endTime})")
                ->whereIn('ttlt.class_id',$this->info['class_ids'])
                ->limit(($page-1)*$limit,$limit)
                ->field("ttt.id,ttt.`mode`,uttt.id user_type_id,if(instr(ttt.image,'http')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,ttt.title,ttt.depict,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,if((uttt.task_over_time is null or uttt.task_over_time = 0),'',FROM_UNIXTIME(uttt.task_over_time,\"%Y-%m-%d\")) end_date,FROM_UNIXTIME(ttt.create_time,\"%Y-%m-%d\") create_time,ttt.difficulty_points,ifnull(uttt.`status`,0) type_status")
                // ->field("ttt.id,ttt.`mode`,if(instr(ttt.image,'{$aliDomin}')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,ttt.title,ttt.depict,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ifnull(uttt.`status`,0) type_status")
                ->group('ttt.id')
                ->having($having)
                ->select();
            foreach ($list as $key => $item){
                $user_type_id = $item['user_type_id'];
                unset($list[$key]['user_type_id']);
                // 记录题，需判断是否中断
                // 获取阶段任务未完成记录第一条
                $firstInfo = db('user_type_task_log_table')->where('user_type_task_id',$user_type_id)->where('status','<>',self::STATUS_ED)->order('id asc')->find();
                if(empty($firstInfo)){
                    // 找不到，不管他
                    continue;
                }
                if($firstInfo['done_time'] < strtotime(date('Y-m-d'))){
                    // 判断执行日期是否小于当前日期，则将状态设置为【-4已中断】
                    $list[$key]['type_status'] = -4;
                }
            }
            $total = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                ->join('user_type_task_table uttt',"uttt.type_task_id = ttt.id and uttt.user_id = {$this->info['id']}",'left')
                ->where('ttt.type',$type)
                ->where('ttt.status',self::STATE_OPEN)
                // todo::筛选未取消任务
                ->where('ttlt.is_cancel',self::DEFAULT_NO)
                ->where("(ttt.start_date <= {$endTime} and (uttt.task_over_time = 0 or uttt.task_over_time is null or uttt.task_over_time >= {$startTime})) or (ttt.start_date >= {$startTime} and ttt.start_date <= {$endTime})")
                // ->where("ttt.start_date <= {$startTime} and (uttt.task_over_time = 0 or uttt.task_over_time is null or uttt.task_over_time >= {$endTime})")
                ->whereIn('ttlt.class_id',$this->info['class_ids'])
                ->limit(($page-1)*$limit,$limit)
                ->field("ttt.id,ttt.`mode`,if(instr(ttt.image,'http')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,ttt.title,ttt.depict,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,if((uttt.task_over_time is null or uttt.task_over_time = 0),'',FROM_UNIXTIME(uttt.task_over_time,\"%Y-%m-%d\")) end_date,ttt.difficulty_points,ifnull(uttt.`status`,0) type_status")
                ->group('ttt.id')
                ->having($having)
                ->count();
            return $this->returnJson(['list' => $list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
        }

        /**
         * 达人项目列表
         * @param int $type
         * @return \think\response\Json
         */
        private function noTypeTaskList($type = self::TYPE_JOBS){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);
            $status = $this->request->param('status',''); // 状态筛选，默认显示全部

            $year = $this->request->param('year',date('Y')); // 年筛选-默认当前年
            $month = $this->request->param('month',date('m')); // 月筛选-默认当前月
            $day = $this->request->param('day',date('d')); // 日筛选-默认当天

            if(empty($year) && empty($month) && empty($day)){
                $searchStartDate = date('Y-m-d');
                $searchEndDate = date('Y-m-d');
            }else{
                if(empty($month) && empty($day)){
                    $searchStartDate = "{$year}-01-01";
                    $searchEndDate = "{$year}-12-31";
                }else{
                    if(empty($day)){
                        $searchStartDate = "{$year}-{$month}-01";
                        $searchEndDate = "{$year}-{$month}-".date('t');
                    }else{
                        $searchStartDate = "{$year}-{$month}-{$day}";
                        $searchEndDate = "{$year}-{$month}-{$day}";
                    }
                }
            }
            $startTime = strtotime($searchStartDate . '00:00:00');
            $endTime = strtotime($searchEndDate . '23:59:59');
            $having = '';
            if(!empty($status)){
                $having = '`type_status` = ' . ($status == -1 ? 0 : $status);
            }
            $where = [];
            if(!empty($this->info['area_id'])){
                $where['ttlt.area_id'] = $this->info['area_id'];
            }
            if(!empty($this->info['school_id'])){
                $where['ttlt.school_id'] = $this->info['school_id'];
            }
            if(!empty($this->info['grade_id'])){
                $where['ttlt.grade_id'] = $this->info['grade_id'];
            }
            $now = time();
            $aliDomin = config('sys_data.bucket') . '.' . config('sys_data.endpoint');
            $list = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                // ->join("(SELECT id, (end_date + ".self::ONE_DAY." - 1) AS end_date_time FROM {$this->prefix}type_task_table) sttt","sttt.id = ttt.id")
                ->join('user_type_task_table uttt',"uttt.type_task_id = ttt.id and uttt.user_id = {$this->info['id']}",'left')
                ->join('type_task_sign_table ttst',"ttst.type_task_id = ttt.id and ttst.user_id = {$this->info['id']}",'left')
                ->where('ttt.mode',self::MODE_TWO)
                ->where('ttt.type',$type)
                ->where('ttt.status',self::STATE_OPEN)
                // todo::筛选未取消任务
                ->where('ttlt.is_cancel',self::DEFAULT_NO)
                ->where("(ttt.start_date <= {$endTime} and (uttt.task_over_time = 0 or uttt.task_over_time is null or uttt.task_over_time >= {$startTime})) or (ttt.start_date >= {$startTime} and ttt.start_date <= {$endTime})")
                // ->where("ttt.start_date <= {$startTime} and (uttt.task_over_time = 0 or uttt.task_over_time is null or uttt.task_over_time >= {$endTime})")
                // ->where('ttt.start_date','<=',$startTime)
                // ->where('sttt.end_date_time','>=',$endTime)
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->field("ttt.id,if(instr(ttt.image,'http')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,uttt.id user_type_id,ttt.title,ttt.depict,ttt.person_num,count(DISTINCT uttt.id) had_person_num,ttt.content,ttt.`mode`,ttt.type,FROM_UNIXTIME(ttt.create_time,'%Y-%m-%d') create_time,FROM_UNIXTIME(ttt.start_date,'%Y-%m-%d') start_date,if((uttt.task_over_time is null or uttt.task_over_time = 0),'',FROM_UNIXTIME(uttt.task_over_time,\"%Y-%m-%d\")) end_date,ttt.difficulty_points,if(ttst.`status`=0,-2,if(uttt.`status` is null,0,uttt.`status`)) type_status")
                // ->field("ttt.id,if(instr(ttt.image,'{$aliDomin}')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,ttt.title,ttt.depict,ttt.person_num,count(DISTINCT uttt.id) had_person_num,ttt.content,ttt.`mode`,ttt.type,FROM_UNIXTIME(ttt.create_time,'%Y-%m-%d') create_time,FROM_UNIXTIME(ttt.start_date,'%Y-%m-%d') start_date,FROM_UNIXTIME(ttt.end_date,'%Y-%m-%d') end_date,ttt.difficulty_points,if(ttst.`status`=0,-2,if(uttt.`status` is null,0,uttt.`status`)) type_status")
                ->group('ttt.id')
                ->having($having)
                ->select();
            foreach ($list as $key => $item){
                $user_type_id = $item['user_type_id'];
                unset($list[$key]['user_type_id']);
                // 记录题，需判断是否中断
                // 获取阶段任务未完成记录第一条
                $firstInfo = db('user_type_task_log_table')->where('user_type_task_id',$user_type_id)->where('status','<>',self::STATUS_ED)->order('id asc')->find();
                if(empty($firstInfo)){
                    // 找不到，不管他
                    continue;
                }
                if($firstInfo['done_time'] < strtotime(date('Y-m-d'))){
                    // 判断执行日期是否小于当前日期，则将状态设置为【-4已中断】
                    $list[$key]['type_status'] = -4;
                }
            }
            $total = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                // ->join("(SELECT id, (end_date + ".self::ONE_DAY." - 1) AS end_date_time FROM {$this->prefix}type_task_table) sttt","sttt.id = ttt.id")
                ->join('user_type_task_table uttt',"uttt.type_task_id = ttt.id and uttt.user_id = {$this->info['id']}",'left')
                ->join('type_task_sign_table ttst',"ttst.type_task_id = ttt.id and ttst.user_id = {$this->info['id']}",'left')
                ->where('ttt.mode',self::MODE_TWO)
                ->where('ttt.type',$type)
                ->where('ttt.status',self::STATE_OPEN)
                // todo::筛选未取消任务
                ->where('ttlt.is_cancel',self::DEFAULT_NO)
                ->where("(ttt.start_date <= {$endTime} and (uttt.task_over_time = 0 or uttt.task_over_time is null or uttt.task_over_time >= {$startTime})) or (ttt.start_date >= {$startTime} and ttt.start_date <= {$endTime})")
                // ->where("ttt.start_date <= {$startTime} and (uttt.task_over_time = 0 or uttt.task_over_time is null or uttt.task_over_time >= {$endTime})")
                // ->where('ttt.start_date','<=',$startTime)
                // ->where('sttt.end_date_time','>=',$endTime)
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->field("ttt.id,if(instr(ttt.image,'http')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,ttt.title,ttt.depict,ttt.person_num,count(DISTINCT uttt.id) had_person_num,ttt.content,ttt.`mode`,ttt.type,FROM_UNIXTIME(ttt.create_time,'%Y-%m-%d') create_time,FROM_UNIXTIME(ttt.start_date,'%Y-%m-%d') start_date,if((uttt.task_over_time is null or uttt.task_over_time = 0),'',FROM_UNIXTIME(uttt.task_over_time,\"%Y-%m-%d\")) end_date,ttt.difficulty_points,if(ttst.`status`=0,-2,if(uttt.`status` is null,0,uttt.`status`)) type_status")
                // ->field("ttt.id,if(instr(ttt.image,'{$aliDomin}')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,ttt.title,ttt.depict,ttt.person_num,count(DISTINCT uttt.id) had_person_num,ttt.content,ttt.`mode`,ttt.type,FROM_UNIXTIME(ttt.create_time,'%Y-%m-%d') create_time,FROM_UNIXTIME(ttt.start_date,'%Y-%m-%d') start_date,FROM_UNIXTIME(ttt.end_date,'%Y-%m-%d') end_date,ttt.difficulty_points,if(ttst.`status`=0,-2,if(uttt.`status` is null,0,uttt.`status`)) type_status")
                ->group('ttt.id')
                ->having($having)
                ->count();
            return $this->returnJson(['list' => $list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
        }
        /**
         * 劳动大赛项目列表
         * @param int $type
         * @return \think\response\Json
         */
        private function workTaskList($type = self::TYPE_WORK){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);
            $status = $this->request->param('status',''); // 状态筛选，默认显示全部

            $year = $this->request->param('year',date('Y')); // 年筛选-默认当前年
            $month = $this->request->param('month',date('m')); // 月筛选-默认当前月
            $day = $this->request->param('day',date('d')); // 日筛选-默认当天

            if(empty($year) && empty($month) && empty($day)){
                $searchStartDate = date('Y-m-d');
                $searchEndDate = date('Y-m-d');
            }else{
                if(empty($month) && empty($day)){
                    $searchStartDate = "{$year}-01-01";
                    $searchEndDate = "{$year}-12-31";
                }else{
                    if(empty($day)){
                        $searchStartDate = "{$year}-{$month}-01";
                        $searchEndDate = "{$year}-{$month}-".date('t');
                    }else{
                        $searchStartDate = "{$year}-{$month}-{$day}";
                        $searchEndDate = "{$year}-{$month}-{$day}";
                    }
                }
            }
            $startTime = strtotime($searchStartDate . '00:00:00');
            $endTime = strtotime($searchEndDate . '23:59:59');
            $having = '';
            if(!empty($status)){
                $having = '`type_status` = ' . ($status == -1 ? 0 : $status);
            }
            $where = [];
            if(!empty($this->info['area_id'])){
                $where['ttlt.area_id'] = $this->info['area_id'];
            }
            if(!empty($this->info['school_id'])){
                $where['ttlt.school_id'] = $this->info['school_id'];
            }
            if(!empty($this->info['grade_id'])){
                $where['ttlt.grade_id'] = $this->info['grade_id'];
            }
            $list = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                ->join("(SELECT id, (end_date + ".self::ONE_DAY." - 1) AS end_date_time FROM {$this->prefix}type_task_table) sttt","sttt.id = ttt.id")
                ->join('user_type_task_table uttt',"uttt.type_task_id = ttt.id and uttt.user_id = {$this->info['id']}",'left')
                ->join('type_task_sign_table ttst',"ttst.type_task_id = ttt.id and ttst.user_id = {$this->info['id']}",'left')
                ->where('ttt.mode',self::MODE_TWO)
                ->where('ttt.type',$type)
                ->where('ttt.status',self::STATE_OPEN)
                // todo::筛选未取消任务
                ->where('ttlt.is_cancel',self::DEFAULT_NO)
                ->where("(ttt.start_date <= {$endTime} and sttt.end_date_time >= {$endTime}) or (ttt.start_date >= {$startTime} and sttt.end_date_time <= {$endTime})")
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->field("ttt.id,if(instr(ttt.image,'http')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,uttt.id user_type_id,ttt.title,ttt.depict,ttt.person_num,count(DISTINCT uttt.id) had_person_num,ttt.content,ttt.`mode`,ttt.type,FROM_UNIXTIME(ttt.create_time,'%Y-%m-%d') create_time,FROM_UNIXTIME(ttt.start_date,'%Y-%m-%d') start_date,FROM_UNIXTIME(ttt.end_date,'%Y-%m-%d') end_date,ttt.difficulty_points,if(ttst.`status`=0,-2,if(uttt.`status` is null,0,uttt.`status`)) type_status")
                ->group('ttt.id')
                ->having($having)
                ->select();
            foreach ($list as $key => $item){
                $user_type_id = $item['user_type_id'];
                unset($list[$key]['user_type_id']);
                if($item['type'] == 0){
                    continue;
                }
                // 记录题，需判断是否中断
                // 获取阶段任务未完成记录第一条
                $firstInfo = db('user_type_task_log_table')->where('user_type_task_id',$user_type_id)->where('status','<>',self::STATUS_ED)->order('id asc')->find();
                if(empty($firstInfo)){
                    // 找不到，不管他
                    continue;
                }
                if($firstInfo['done_time'] < strtotime(date('Y-m-d'))){
                    // 判断执行日期是否小于当前日期，则将状态设置为【-4已中断】
                    $list[$key]['type_status'] = -4;
                }
            }
            $total = db('type_task_table')
                ->alias('ttt')
                ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                ->join("(SELECT id, (end_date + ".self::ONE_DAY." - 1) AS end_date_time FROM {$this->prefix}type_task_table) sttt","sttt.id = ttt.id")
                ->join('user_type_task_table uttt',"uttt.type_task_id = ttt.id and uttt.user_id = {$this->info['id']}",'left')
                ->join('type_task_sign_table ttst',"ttst.type_task_id = ttt.id and ttst.user_id = {$this->info['id']}",'left')
                ->where('ttt.mode',self::MODE_TWO)
                ->where('ttt.type',$type)
                ->where('ttt.status',self::STATE_OPEN)
                // todo::筛选未取消任务
                ->where('ttlt.is_cancel',self::DEFAULT_NO)
                ->where("({$endTime} >= ttt.start_date and {$endTime} <= sttt.end_date_time) or ({$startTime} <= ttt.start_date and {$endTime} >= sttt.end_date_time)")
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->field("ttt.id,if(instr(ttt.image,'http')>0,ttt.image,concat('{$this->webUrl}',ttt.image)) image,ttt.title,ttt.depict,ttt.person_num,count(DISTINCT uttt.id) had_person_num,ttt.content,ttt.`mode`,ttt.type,FROM_UNIXTIME(ttt.create_time,'%Y-%m-%d') create_time,FROM_UNIXTIME(ttt.start_date,'%Y-%m-%d') start_date,FROM_UNIXTIME(ttt.end_date,'%Y-%m-%d') end_date,ttt.difficulty_points,if(ttst.`status`=0,-2,if(uttt.`status` is null,0,uttt.`status`)) type_status")
                ->group('ttt.id')
                ->having($having)
                ->count();
            return $this->returnJson(['list' => $list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
        }

        // 项目列表
        public function taskList(){
            $type = $this->request->param('type',self::TYPE_HOME);

            if(empty($this->info)){
                return $this->returnJson([],'请先登录');
            }
            switch ($type){
                case self::TYPE_HOME:
                    //家庭任务
                    return $this->typeTaskListOfHome();
                    break;
                case self::TYPE_SCHO:
                case self::TYPE_BASE:
                    //校内和基地活动
                    return $this->typeTaskList($type);
                    break;
                case self::TYPE_JOBS:
                case self::TYPE_BPUB:
                    return $this->noTypeTaskList($type);
                    break;
                    //劳动大赛
                case self::TYPE_WORK:
                    return $this->workTaskList($type);
                    break;
                default:
                    return $this->returnJson([],'类型任务不存在');
                    break;
            }
        }

        // 获取课前阶段
        private function getBeforeLevel($task_id = 0,$type_task_id = 0,$status = 0,$endStatus = 0){
            $taskInfo = db('task')
                ->alias('t')
                ->join("task_index ti",'ti.task_id = t.id','left')
                ->join("subject su",'su.id = ti.subject_id','left')
                ->where('t.id',$task_id)
                ->field('t.id task_id,t.`name`,su.`name` subject_name,ti.`level`,if(ti.level is null,"无",if(ti.`level` = 1,"A",if(ti.`level` = 2,"B","C"))) level_name,t.`image`,t.`desc`,t.type')
                ->find();
            $taskInfo['type_task_id'] = $type_task_id;
            if($status < $endStatus){
                $taskInfo['status'] = 0;
            }else{
                $taskInfo['status'] = 1;
            }
            return $taskInfo;
        }

        // 获取课后阶段
        private function getAfterLevel($task_id = 0,$type_task_id = 0,$status = 0){
            $taskInfo = db('task')
                ->alias('t')
                ->join("task_index ti",'ti.task_id = t.id','left')
                ->join("subject su",'su.id = ti.subject_id','left')
                ->where('t.id',$task_id)
                ->field('t.id task_id,t.`name`,su.`name` subject_name,ti.`level`,if(ti.level is null,"无",if(ti.`level` = 1,"A",if(ti.`level` = 2,"B","C"))) level_name,t.`image`,t.`desc`,t.type')
                ->find();
            $taskInfo['type_task_id'] = $type_task_id;
            if($status >= self::STATUS_AFTER_ED){
                $taskInfo['status'] = 1;
            }elseif($status == self::STATUS_EVAL_ED){
                $taskInfo['status'] = 0;
            }else{
                $taskInfo['status'] = -1;
            }
            return $taskInfo;
        }


        // 项目内部列表
        public function innerList(){
            $id = $this->request->param('id',0); // 项目id
            $info = db('type_task_table')
                ->alias('ttt')
                ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id','left')
                ->where('ttt.id',$id)
                ->where('uttt.user_id',$this->info['id'])
                ->where('ttt.status',self::STATE_OPEN)
                ->field('ttt.id,ttt.content,ttt.task_id,ttt.tasked_id,uttt.id user_type_task_id,ifnull(uttt.status,0) status,ttt.mode,ttt.type,ttt.is_eval,ttt.is_upt_img,ttt.is_upt_word')
                ->find();
            $info['content'] = str_replace('/upload/',config('sys_data.web_site')."/upload/",$info['content']);
            $list['content'] = $info['content'];
            if (empty($info)) {
                // 说明当前类型任务首次被用户查看
                $type_task_info = db('type_task_table')->where('id',$id)->find();
                switch (intval($type_task_info['type'])){
                    case self::TYPE_HOME:
                        // 家庭任务，只包含课前
                        $taskInfo = $this->getBeforeLevel($type_task_info['task_id'],$id,0,self::STATUS_BEFORE_ED);
                        $list['before'] = $taskInfo;
                        break;
                    case self::TYPE_WORK:
                        // 劳动大赛，只包含课前
                        $taskInfo = $this->getBeforeLevel($type_task_info['task_id'],$id,0,self::STATUS_AFTER_ED);
                        $list['before'] = $taskInfo;
                        break;
                    default:
                        $taskInfo = $this->getBeforeLevel($type_task_info['task_id'],$id,0,self::STATUS_BEFORE_ED);
                        $list['before'] = $taskInfo;
                        // 课中
                        if($type_task_info['is_eval'] == 1 || $type_task_info['is_upt_img'] || $type_task_info['is_upt_word']){
                            $teacher_id = $this->getTeacherIdOfTypeTask($id);
                            $teacher_name = db('teacher')->where('id',$teacher_id)->value('username');
                            $list['ing'] = [
                                'teacher_name' => $teacher_name
                            ];
                        }
                        // 课后
                        $taskInfo = $this->getAfterLevel($type_task_info['tasked_id'],$id,0);
                        $list['after'] = $taskInfo;
                        break;
                }
                return $this->returnJson(compact('list'),'获取成功',1);
            }
            if($info['type'] == self::TYPE_HOME){
                // 家庭任务，只包含课前
                $taskInfo = $this->getBeforeLevel($info['task_id'],$id,$info['status'],self::STATUS_BEFORE_ED);
                $list['before'] = $taskInfo;
            }elseif ($info['type'] == self::TYPE_WORK){
                // 劳动大赛，只包含课前
                $taskInfo = $this->getBeforeLevel($info['task_id'],$id,$info['status'],self::STATUS_AFTER_ED);
                $list['before'] = $taskInfo;
            }else{
                $taskInfo = $this->getBeforeLevel($info['task_id'],$id,$info['status'],self::STATUS_BEFORE_ED);
                $list['before'] = $taskInfo;
                // 课中
                if($info['is_eval'] == 1 || $info['is_upt_img'] || $info['is_upt_word']){
                    $teacher_id = $this->getTeacherIdOfTypeTask($id);
                    $teacher_name = db('teacher')->where('id',$teacher_id)->value('username');
                    $list['ing'] = [
                        'teacher_name' => $teacher_name
                    ];
                }
                // 课后
                $taskInfo = $this->getAfterLevel($info['tasked_id'],$id,$info['status']);
                $list['after'] = $taskInfo;
            }
            return $this->returnJson(compact('list'),'获取成功',1);
        }

        /**
         * 验证当前用户是否已经报名
         * @param int $type_task_id
         * @return array
         */
        private function checkUserSignStatus($type_task_id = 0) {
            $info = db('type_task_sign_table')
                ->where('type_task_id', $type_task_id)
                ->where('user_id', $this->info['id'])
                ->column('id,status,content');
            return empty($info) ? [
                false,
                0,
                ''
            ] : [
                true,
                current($info)['status'],
                current($info)['content']
            ];
        }

        // 获取指定类型任务的活动详情
        public function modeTaskInfo() {
            $id   = $this->request->param('id', 0);
            $info = db('type_task_table')
                ->where('id', $id)
                ->where('mode', self::MODE_TWO)
                ->where('status', $this->status['NORMAL'])
                ->field('id,picword,title,image,FROM_UNIXTIME(create_time,"%Y-%m-%d") create_time')
                ->find();
            if (empty($info)) {
                return $this->returnJson([], '活动不存在');
            }
            list($is_sign, $status, $content) = $this->checkUserSignStatus($id);
            $info['is_sign'] = $is_sign;
            $info['status']  = $status;
            $info['content'] = $content;
            return $this->returnJson(compact('info'), '获取成功', 1);
        }

        // 用户报名
        public function signTask() {
            $id   = $this->request->param('id', 0);
            $info = db('type_task_table')
                ->where('id', $id)
                ->where('mode', self::MODE_TWO)
                ->where('status', $this->status['NORMAL'])
                ->find();
            if (empty($info)) {
                return $this->returnJson([], '活动不存在');
            }
            $userId = $this->info['id'];
            list($is_sign, $status, $content) = $this->checkUserSignStatus($id);
            if ($is_sign) {
                return $this->returnJson([], '您已经报过名了，不可重复报名');
            }
            $insert                 = [];
            $insert['user_id']      = $userId;
            $insert['type_task_id'] = $id;
            $insert['create_time']  = time();
            $id                     = db('type_task_sign_table')->insertGetId($insert);
            if ($id > 0) {
                return $this->returnJson(['id' => $id], '报名成功，请耐心等待审核', 1);
            }
            return $this->returnJson([], '报名失败：请联系管理员');
        }

        /**
         * 设置课前阶段任务执行表
         * @param int   $id
         * @param array $item
         * @param array $arr
         * @return array
         */
        private function setBeforeTaskLogs($id = 0,$item = [],$arr = []){
            $list = db('type_task_done_table')
                ->where('type_task_id',$item['type_task_id'])
                ->whereIn('type',[self::CLASS_BEFORE,self::CLASS_BEFORE_R])
                ->order('done_time asc')
                ->select();

            $teacher_id = $this->getTeacherIdOfTypeTask($item['type_task_id']);
            foreach ($list as $key => $value){
                array_push($arr,[
                    'user_id' => $this->info['id'],
                    'user_type_task_id' => $id,
                    'task_id' => $item['task_id'],
                    'create_time' => time(),
                    'type' => self::TASK_LEVEL_TYPE_B,
                    'teacher_id' => $teacher_id,
                    'status' => $key === 0 ? self::STATUS_ING : self::STATUS_NO,
                    'done_time' => $value['done_time']
                ]);
            }
            return $arr;
        }

        /**
         * 同步类型任务到评分表
         * @param int $user_task_log_id
         * @return bool
         */
        private function synWorkTask($user_task_log_id = 0){
            $info = db('user_type_task_log_table')
                ->alias('uttlt')
                ->join('user_type_task_table uttt','uttlt.user_type_task_id = uttt.id')
                ->join('type_task_table ttt','uttt.type_task_id = ttt.id')
                ->where('uttlt.id',$user_task_log_id)
                ->field('uttlt.id,ttt.type,uttlt.sub_ans,uttlt.obj_ans,uttlt.sub_files,uttlt.obj_files,uttlt.teacher_id,ttt.task_id')
                ->find();
            if($info['type'] == self::TYPE_WORK){
                if(db('user_work_task_log_table')->where('user_type_task_log_id',$user_task_log_id)->count() > 0){
                    // 已经同步，不需要重复同步
                    return true;
                }
                // 当为劳动大赛时，将用户提交答案提交到评委
                $teacher_ids = explode(',',$info['teacher_id']);
                $logs = [];
                foreach ($teacher_ids as $teacher_id){
                    array_push($logs,[
                        'user_type_task_log_id' => $user_task_log_id,
                        'task_id' => $info['task_id'],
                        'sub_ans' => $info['sub_ans'],
                        'obj_ans' => $info['obj_ans'],
                        'sub_files' => $info['sub_files'],
                        'obj_files' => $info['obj_files'],
                        'teacher_id' => $teacher_id
                    ]);
                }
                db('user_work_task_log_table')->insertAll($logs);
                // todo::劳动大赛更新任务状态,将状态更新为【8课后已完成】
                try{
                    $this->changeTypeTaskStatus($user_task_log_id,$this->info['id'],self::STATUS_AFTER_ED);
                }catch (DataNotFoundException $dataNotFoundException){
                }catch (ModelNotFoundException $modelNotFoundException){
                }catch (DbException $dbException){
                }
                return true;
            }
            return false;
        }

        // 获取任务详情
        public function detail() {
            $type_task_id = $this->request->param('type_task_id', 0);
            $type_task_info  = db('type_task_table')->where('id', $type_task_id)->find();
            if(empty($type_task_info)){
                return $this->returnJson([],'任务ID不存在');
            }
            $info = db('user_type_task_table')
                ->alias('uttt')
                ->where('uttt.type_task_id', $type_task_id)
                ->where('uttt.user_id', $this->info['id'])
                ->find();
            if (empty($info)) {
                // 说明当前类型任务首次被用户查看，此时需关联类型任务到用户
                // 只有必选任务方可进入此步
                $user_type_task_table_id = db('user_type_task_table')
                    ->insertGetId([
                       'user_id'      => $this->info['id'],
                       'type_task_id' => $type_task_id,
                       'status' => self::STATUS_BEFORE_N // 去完成状态
                   ]
                );
                // 将阶段类型任务同步给当前用户
                $logs = [];
                $type_task_info['type_task_id'] = $type_task_info['id'];
                $logs = $this->setBeforeTaskLogs($user_type_task_table_id,$type_task_info,$logs);

                db('user_type_task_log_table')->insertAll($logs);
                $info = [
                    'id' => $user_type_task_table_id,
                    'user_id'      => $this->info['id'],
                    'type_task_id' => $type_task_id,
                    'status' => self::STATUS_BEFORE_N,
                    'record' => 0,
                    'eval' => '',
                    'upt_media' => '',
                    'upt_word' => '',
                ];
            }
            // 获取当前类型任务正在进行的阶段任务
            $task_log = db('user_type_task_table')
                ->alias('uttt')
                ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                ->where('uttt.type_task_id',$type_task_id)
                ->where('uttlt.status',self::STATUS_ING)
                ->field('uttlt.id,uttlt.task_id,uttlt.sub_ans,uttlt.obj_ans,uttlt.sub_files,uttlt.obj_files,uttlt.done_time,uttlt.sub_sorce,uttlt.obj_sorce,uttlt.truth_num,uttlt.total_num,uttlt.type,uttlt.status log_status')
                ->find();
            // todo::若当前没有正在进行中任务
            $task_logs = [];
            if(empty($task_log)){
                if(in_array($info['status'],[self::STATUS_BEFORE_ED,self::STATUS_WAIT_R,self::STATUS_WAIT_SCAN,self::STATUS_EVAL_N,self::STATUS_UPLOAD_N])){
                    // todo::1.状态处于【2课前已完成 3课中待考勤 4课中待打卡 5课中待评价 6课中待上传】
                    $task_logs = db('user_type_task_log_table')
                        ->alias('uttlt')
                        ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                        ->where('uttt.type_task_id',$type_task_id)
                        ->where('uttt.user_id',$this->info['id'])
                        ->where('uttlt.user_id',$this->info['id'])
                        ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                        ->field('uttlt.id,uttlt.task_id,uttlt.sub_ans,uttlt.obj_ans,uttlt.sub_files,uttlt.obj_files,uttlt.done_time,uttlt.sub_sorce,uttlt.obj_sorce,uttlt.truth_num,uttlt.total_num,uttlt.status log_status')
                        ->select();
                }elseif (in_array($info['status'],[self::STATUS_AFTER_ED,self::STATUS_AFTER_EVAL_ED])){
                    // todo::2.状态处于【8课后已完成 9课后已评分】
                    if($type_task_info['type'] == self::TYPE_WORK){
                        // 当为劳动大赛时，状态8表示为【作品评选状态】
                        $task_logs = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->where('uttt.type_task_id',$type_task_id)
                            ->where('uttt.user_id',$this->info['id'])
                            ->where('uttlt.user_id',$this->info['id'])
                            ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                            ->field('uttlt.id,uttlt.task_id,uttlt.sub_ans,uttlt.obj_ans,uttlt.sub_files,uttlt.obj_files,uttlt.done_time,uttlt.sub_sorce,uttlt.obj_sorce,uttlt.truth_num,uttlt.total_num,uttlt.is_pass,uttlt.status log_status')
                            ->select();
                    }else if($type_task_info['type'] == self::TYPE_HOME){
                        $task_logs = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->where('uttt.type_task_id',$type_task_id)
                            ->where('uttt.user_id',$this->info['id'])
                            ->where('uttlt.user_id',$this->info['id'])
                            ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                            ->field('uttlt.id,uttlt.task_id,uttlt.sub_ans,uttlt.obj_ans,uttlt.sub_files,uttlt.obj_files,uttlt.done_time,uttlt.sub_sorce,uttlt.obj_sorce,uttlt.truth_num,uttlt.total_num,uttlt.status log_status')
                            ->select();
                    }else{
                        $task_logs = db('user_type_task_log_table')
                            ->alias('uttlt')
                            ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                            ->where('uttt.type_task_id',$type_task_id)
                            ->where('uttt.user_id',$this->info['id'])
                            ->where('uttlt.user_id',$this->info['id'])
                            ->where('uttlt.type',self::TASK_LEVEL_TYPE_A)
                            ->field('uttlt.id,uttlt.task_id,uttlt.sub_ans,uttlt.obj_ans,uttlt.sub_files,uttlt.obj_files,uttlt.done_time,uttlt.sub_sorce,uttlt.obj_sorce,uttlt.truth_num,uttlt.total_num,uttlt.status log_status')
                            ->select();
                    }
                }
                foreach ($task_logs as $key => $item){
                    $doneTime = $item['done_time'];
                    $task_logs[$key]['sub_ans'] = empty($item['sub_ans']) ? [] : json_decode(json_encode(json_decode($item['sub_ans'])),true);
                    $task_logs[$key]['obj_ans'] = empty($item['obj_ans']) ? [] : json_decode(json_encode(json_decode($item['obj_ans'])),true);
                    $task_logs[$key]['sub_files'] = empty($item['sub_files']) ? [] : json_decode(json_encode(json_decode($item['sub_files'])),true);
                    $task_logs[$key]['obj_files'] = empty($item['obj_files']) ? [] : json_decode(json_encode(json_decode($item['obj_files'])),true);
                    $task_logs[$key]['done_time'] = empty($doneTime) ? '' : date('Y-m-d',$doneTime);
                    $task_logs[$key]['done_status'] = !empty($item['sub_ans']) || !empty($item['obj_ans']) ? 1 : ($this->checkIsDone($doneTime) && $item['log_status'] == 1 ? 0 : 1); // 可做状态：1不可 0可以
                }
                $task_log = current($task_logs);
            }else{
                // todo::检查当前任务是否是记录任务，如果是，则获取当前阶段当前任务当前用户的待完成记录列表
                $isRecord = db('task')->where('id',$task_log['task_id'])->value('type');
                if($isRecord == 1){
                    $task_logs = db('user_type_task_log_table')
                        ->alias('uttlt')
                        ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                        ->where('uttt.type_task_id',$type_task_id)
                        ->where('uttt.user_id',$this->info['id'])
                        ->where('uttlt.user_id',$this->info['id'])
                        ->where('uttlt.type',$task_log['type'])
                        ->field('uttlt.id,uttlt.task_id,uttlt.sub_ans,uttlt.obj_ans,uttlt.sub_files,uttlt.obj_files,uttlt.done_time,uttlt.sub_sorce,uttlt.obj_sorce,uttlt.truth_num,uttlt.total_num,uttlt.status log_status')
                        ->select();
                    foreach ($task_logs as $key => $item){
                        $doneTime = $item['done_time'];
                        $task_logs[$key]['sub_ans'] = empty($item['sub_ans']) ? [] : json_decode(json_encode(json_decode($item['sub_ans'])),true);
                        $task_logs[$key]['obj_ans'] = empty($item['obj_ans']) ? [] : json_decode(json_encode(json_decode($item['obj_ans'])),true);
                        $task_logs[$key]['sub_files'] = [];
                        $task_logs[$key]['obj_files'] = [];
                        if(!empty($item['sub_files'])){
                            $sub_files = json_decode(json_encode(json_decode($item['sub_files'])),true);
                            foreach ($sub_files as $k => $v){
                                $pre_image = $v['image'];
                                if(is_array($pre_image)){
                                    foreach ($pre_image as $pre_key => $pre_value){
                                        $pre_image[$pre_key] = $this->changeUrl($pre_value);
                                    }
                                }else{
                                    $pre_image = $this->changeUrl($pre_image);
                                }
                                $sub_files[$k]['image'] = $pre_image;
                            }
                            $task_logs[$key]['sub_files'] = $sub_files;
                        }
                        if(!empty($item['obj_files'])){
                            $obj_files = json_decode(json_encode(json_decode($item['obj_files'])),true);
                            foreach ($obj_files as $k => $v){
                                $pre_image = $v['image'];
                                if(is_array($pre_image)){
                                    foreach ($pre_image as $pre_key => $pre_value){
                                        $pre_image[$pre_key] = $this->changeUrl($pre_value);
                                    }
                                }else{
                                    $pre_image = $this->changeUrl($pre_image);
                                }
                                $obj_files[$k]['image'] = $pre_image;
                            }
                            $task_logs[$key]['obj_files'] = $obj_files;
                        }
                        $task_logs[$key]['done_time'] = empty($doneTime) ? '' : date('Y-m-d',$doneTime);
                        $task_logs[$key]['done_status'] = !empty($item['sub_ans']) || !empty($item['obj_ans']) ? 1 : ($this->checkIsDone($doneTime) && $item['log_status'] == 1 ? 0 : 1); // 可做状态：1不可 0可以
                    }
                }else{
                    $doneTime = $task_log['done_time'];
                    $task_log['sub_ans'] = empty($task_log['sub_ans']) ? [] : json_decode(json_encode(json_decode($task_log['sub_ans'])),true);
                    $task_log['obj_ans'] = empty($task_log['obj_ans']) ? [] : json_decode(json_encode(json_decode($task_log['obj_ans'])),true);
                    $task_log['sub_files'] = [];
                    $task_log['obj_files'] = [];
                    if(!empty($task_log['sub_files'])){
                        $sub_files = json_decode(json_encode(json_decode($task_log['sub_files'])),true);
                        foreach ($sub_files as $k => $v){
                            $pre_image = $v['image'];
                            if(is_array($pre_image)){
                                foreach ($pre_image as $pre_key => $pre_value){
                                    $pre_image[$pre_key] = $this->changeUrl($pre_value);
                                }
                            }else{
                                $pre_image = $this->changeUrl($pre_image);
                            }
                            $sub_files[$k]['image'] = $pre_image;
                        }
                        $task_log['sub_files'] = $sub_files;
                    }
                    if(!empty($task_log['obj_files'])){
                        $obj_files = json_decode(json_encode(json_decode($task_log['obj_files'])),true);
                        foreach ($obj_files as $k => $v){
                            $pre_image = $v['image'];
                            if(is_array($pre_image)){
                                foreach ($pre_image as $pre_key => $pre_value){
                                    $pre_image[$pre_key] = $this->changeUrl($pre_value);
                                }
                            }else{
                                $pre_image = $this->changeUrl($pre_image);
                            }
                            $obj_files[$k]['image'] = $pre_image;
                        }
                        $task_log['obj_files'] = $obj_files;
                    }
                    $task_log['done_time'] = empty($doneTime) ? '' : date('Y-m-d',$doneTime);
                    $task_log['done_status'] = !empty($task_log['sub_ans']) || !empty($task_log['obj_ans']) ? 1 : ($this->checkIsDone($doneTime) && $task_log['log_status'] == 1 ? 0 : 1); // 可做状态：1不可 0可以
                    $task_logs[] = $task_log;
                }
            }
            // 获取当前任务下的问题
            $questions = db('question')
                ->alias('q')
                ->join("subject s",'q.subject_id = s.id','left')
                ->join("subject_version sv",'q.version_id = sv.id','left')
                ->join("subject_version_maker svm",'q.maker_id = svm.id','left')
                ->join("data_log dl",'q.data_log_id = dl.id','left')
                ->join("task_question_log tql",'q.id = tql.question_id')
                ->where("tql.task_id = {$task_log['task_id']}")
                ->order("tql.question_sort asc")
                ->field('q.id,s.name subject_name,sv.name version_name,q.question_num,svm.name maker_name,q.level,q.pages,q.page_num,q.answer_file_image,q.answer_file_text,q.type,q.name,q.desc,q.options,q.images,q.file_type,q.answer,q.ext')
                ->select();

            foreach ($questions as $key => $item){
                if($item['type'] == 2){
                    $questions[$key]['options'] = str_replace('/kindeditor/php/../../',config('sys_data.web_site'),$item['options']);
                    $questions[$key]['options'] = str_replace('/upload/image/',config('sys_data.web_site')."/upload/image/",$item['options']);
                }else{
                    $questions[$key]['options'] = empty($item['options'])?'':unserialize($item['options']);
                }
                $answer = '';
                if(!empty($item['answer'])){
                    $answer = unserialize($item['answer']);
                    $answer['image'] = isset($answer['image'])?$this->changeUrl($answer['image']):'';
                }
                $questions[$key]['answer'] = $answer;
                $questions[$key]['ext'] = empty($item['ext'])?'':unserialize($item['ext']);
                $questions[$key]['subject_name'] = empty($item['subject_name'])?'':$item['subject_name'];
                $questions[$key]['version_name'] = empty($item['version_name'])?'':$item['version_name'];
                $questions[$key]['maker_name'] = empty($item['maker_name'])?'':$item['maker_name'];

                $questions[$key]['images'] = $this->changeUrl($questions[$key]['images']);
            }
            $info['task_log'] = $task_logs;
            $info['task_info'] = db('task')
                ->alias('t')
                ->where("t.state = {$this->status['NORMAL']} and t.id = {$task_log['task_id']}")
                ->find();
            $info['task_info']['image'] = $this->changeUrl($info['task_info']['image']);
            $info['list'] = $questions;
            return $this->returnJson(compact('info'),'获取成功',1);
        }

        // 详情查看
        public function oldDetail() {
            $type_task_id = $this->request->param('type_task_id', 0);
            $task_id = $this->request->param('task_id', 0);
            $type_task_info  = db('type_task_table')->where('id', $type_task_id)->find();
            if(empty($type_task_info)){
                return $this->returnJson([],'任务ID不存在');
            }
            $info = db('user_type_task_table')
                ->alias('uttt')
                ->where('uttt.type_task_id', $type_task_id)
                ->where('uttt.user_id', $this->info['id'])
                ->find();
            // todo::若当前没有正在进行中任务
            $isRecord = db('task')->where('id',$task_id)->value('type');
            if(!in_array($task_id,[$type_task_info['task_id'],$type_task_info['tasked_id']])){
                return $this->returnJson([],'任务ID不存在');
            }
            $type = $task_id == $type_task_info['task_id'] ? 1 : 2;
            $task_logs = db('user_type_task_log_table')
                ->alias('uttlt')
                ->join('user_type_task_table uttt','uttt.id = uttlt.user_type_task_id')
                ->where('uttt.type_task_id',$type_task_id)
                ->where('uttt.user_id',$this->info['id'])
                ->where('uttlt.user_id',$this->info['id'])
                ->where('uttlt.type',$type)
                ->field('uttlt.id,uttlt.task_id,uttlt.sub_ans,uttlt.obj_ans,uttlt.sub_files,uttlt.obj_files,uttlt.done_time,uttlt.sub_sorce,uttlt.obj_sorce,uttlt.truth_num,uttlt.total_num,uttlt.status log_status,uttlt.is_pass,uttlt.sroce,uttlt.user_type_task_id')
                ->select();
            if($isRecord == 1){
                foreach ($task_logs as $key => $item){
                    $doneTime = $item['done_time'];
                    $task_logs[$key]['sub_ans'] = empty($item['sub_ans']) ? [] : json_decode(json_encode(json_decode($item['sub_ans'])),true);
                    $task_logs[$key]['obj_ans'] = empty($item['obj_ans']) ? [] : json_decode(json_encode(json_decode($item['obj_ans'])),true);
                    $task_logs[$key]['sub_files'] = [];
                    $task_logs[$key]['obj_files'] = [];
                    if(!empty($item['sub_files'])){
                        $sub_files = json_decode(json_encode(json_decode($item['sub_files'])),true);
                        foreach ($sub_files as $k => $v){
                            $pre_image = $v['image'];
                            if(is_array($pre_image)){
                                foreach ($pre_image as $pre_key => $pre_value){
                                    $pre_image[$pre_key] = $this->changeUrl($pre_value);
                                }
                            }else{
                                $pre_image = $this->changeUrl($pre_image);
                            }
                            $sub_files[$k]['image'] = $pre_image;
                        }
                        $task_logs[$key]['sub_files'] = $sub_files;
                    }
                    if(!empty($item['obj_files'])){
                        $obj_files = json_decode(json_encode(json_decode($item['obj_files'])),true);
                        foreach ($obj_files as $k => $v){
                            $pre_image = $v['image'];
                            if(is_array($pre_image)){
                                foreach ($pre_image as $pre_key => $pre_value){
                                    $pre_image[$pre_key] = $this->changeUrl($pre_value);
                                }
                            }else{
                                $pre_image = $this->changeUrl($pre_image);
                            }
                            $obj_files[$k]['image'] = $pre_image;
                        }
                        $task_logs[$key]['obj_files'] = $obj_files;
                    }
                    $task_logs[$key]['done_time'] = empty($doneTime) ? '' : date('Y-m-d',$doneTime);
                    $task_logs[$key]['done_status'] = !empty($item['sub_ans']) || !empty($item['obj_ans']) ? 1 : ($this->checkIsDone($doneTime) && $item['log_status'] == 1 ? 0 : 1); // 可做状态：1不可 0可以
                }
            }else{
                $task_log = current($task_logs);
                $doneTime = $task_log['done_time'];
                $task_log['sub_ans'] = empty($task_log['sub_ans']) ? [] : json_decode(json_encode(json_decode($task_log['sub_ans'])),true);
                $task_log['obj_ans'] = empty($task_log['obj_ans']) ? [] : json_decode(json_encode(json_decode($task_log['obj_ans'])),true);
                $task_log['sub_files'] = [];
                $task_log['obj_files'] = [];
                if(!empty($task_log['sub_files'])){
                    $sub_files = json_decode(json_encode(json_decode($task_log['sub_files'])),true);
                    foreach ($sub_files as $k => $v){
                        $pre_image = $v['image'];
                        if(is_array($pre_image)){
                            foreach ($pre_image as $pre_key => $pre_value){
                                $pre_image[$pre_key] = $this->changeUrl($pre_value);
                            }
                        }else{
                            $pre_image = $this->changeUrl($pre_image);
                        }
                        $sub_files[$k]['image'] = $pre_image;
                    }
                    $task_log['sub_files'] = $sub_files;
                }
                if(!empty($task_log['obj_files'])){
                    $obj_files = json_decode(json_encode(json_decode($task_log['obj_files'])),true);
                    foreach ($obj_files as $k => $v){
                        $pre_image = $v['image'];
                        if(is_array($pre_image)){
                            foreach ($pre_image as $pre_key => $pre_value){
                                $pre_image[$pre_key] = $this->changeUrl($pre_value);
                            }
                        }else{
                            $pre_image = $this->changeUrl($pre_image);
                        }
                        $obj_files[$k]['image'] = $pre_image;
                    }
                    $task_log['obj_files'] = $obj_files;
                }
                $task_log['done_time'] = empty($doneTime) ? '' : date('Y-m-d',$doneTime);
                $task_log['done_status'] = !empty($task_log['sub_ans']) || !empty($task_log['obj_ans']) ? 1 : ($this->checkIsDone($doneTime) && $task_log['log_status'] == 1 ? 0 : 1); // 可做状态：1不可 0可以
                $task_logs = [$task_log];
            }
            // 获取当前任务下的问题
            $questions = db('question')
                ->alias('q')
                ->join("subject s",'q.subject_id = s.id','left')
                ->join("subject_version sv",'q.version_id = sv.id','left')
                ->join("subject_version_maker svm",'q.maker_id = svm.id','left')
                ->join("data_log dl",'q.data_log_id = dl.id','left')
                ->join("task_question_log tql",'q.id = tql.question_id')
                ->where("tql.task_id = {$task_id}")
                ->order("tql.question_sort asc")
                ->field('q.id,s.name subject_name,sv.name version_name,q.question_num,svm.name maker_name,q.level,q.pages,q.page_num,q.answer_file_image,q.answer_file_text,q.type,q.name,q.desc,q.options,q.images,q.file_type,q.answer,q.ext')
                ->select();

            foreach ($questions as $key => $item){
                if($item['type'] == 2){
                    $questions[$key]['options'] = str_replace('/kindeditor/php/../../',config('sys_data.web_site'),$item['options']);
                    $questions[$key]['options'] = str_replace('/upload/image/',config('sys_data.web_site')."/upload/image/",$item['options']);
                }else{
                    $questions[$key]['options'] = empty($item['options'])?'':unserialize($item['options']);
                }
                $answer = '';
                if(!empty($item['answer'])){
                    $answer = unserialize($item['answer']);
                    $answer['image'] = isset($answer['image'])?$this->changeUrl($answer['image']):'';
                }
                $questions[$key]['answer'] = $answer;
                $questions[$key]['ext'] = empty($item['ext'])?'':unserialize($item['ext']);
                $questions[$key]['subject_name'] = empty($item['subject_name'])?'':$item['subject_name'];
                $questions[$key]['version_name'] = empty($item['version_name'])?'':$item['version_name'];
                $questions[$key]['maker_name'] = empty($item['maker_name'])?'':$item['maker_name'];

                $questions[$key]['images'] = $this->changeUrl($questions[$key]['images']);
            }
            $info['task_log'] = $task_logs;
            $info['task_info'] = db('task')
                ->alias('t')
                ->where("t.state = {$this->status['NORMAL']} and t.id = {$task_id}")
                ->find();
            $endLog = end($task_logs);
            $info['task_info']['image'] = $this->changeUrl($info['task_info']['image']);
            $info['list'] = $questions;
            $info['show_result'] = $type_task_info['show_result'];
            $info['pass_text'] = str_replace('/upload/image/',config('sys_data.web_site')."/upload/image/",$type_task_info['pass_text']);
            $info['no_pass_text'] = str_replace('/upload/image/',config('sys_data.web_site')."/upload/image/",$type_task_info['no_pass_text']);
            $info['is_pass'] = $endLog['is_pass'];
            $info['brage_image'] = $this->getBrage(empty($type_task_info['brage'])?[]:unserialize($type_task_info['brage']),$endLog['sroce'],$this->info['id'],$endLog['user_type_task_id'],$type_task_info['type']);
            return $this->returnJson(compact('info'),'获取成功',1);
        }

        // 获取徽章
        private function getBrage($brages = [],$score = 0,$user_id = 0,$user_type_task_id = 0,$type = self::TYPE_JOBS){
            $brageInfo = [];
            foreach ($brages as $item){
                if($score >= $item['min_score'] && $score <= $item['max_score']){
                    $brageInfo = $item;
                    break;
                }
            }
            if(empty($brageInfo)){
                return '';
            }
            $user_brage_info = db('user_brage_log_table')->where('user_id',$user_id)->where('user_type_task_id',$user_type_task_id)->find();
            if(empty($user_brage_info)){
                db('user_brage_log_table')->insertGetId([
                                                            'user_id' => $user_id,
                                                            'user_type_task_id' => $user_type_task_id,
                                                            'create_time' => time(),
                                                            'brage_name' => $brageInfo['name'],
                                                            'brage_image' => $brageInfo['image'],
                                                            'score' => $score,
                                                            'descript' => $type == self::TYPE_JOBS ? '职场体验' : ($type == self::TYPE_BPUB ? '公益活动' : '劳动大赛')
                                                        ]);
            }
            return $this->changeUrl($brageInfo['image']);
        }

        /**
         * 判断是否可执行
         * @param int $done_time
         * @return bool
         */
        private function checkIsDone($done_time = 0){
            if(empty($done_time)) return true;
            $doneStartTime = strtotime(date('Y-m-d 00:00:00',$done_time));
            $doneEndTime = strtotime(date('Y-m-d 23:59:59',$done_time));
            if($doneStartTime <= time() && $doneEndTime >= time()){
                return true;
            }
            return false;
        }

        // 答案提交
        public function sub_answer(){
            $user_task_log_id = $this->request->param('task_log_id',0);
            $truth_num = $this->request->param('truth_num',0);
            $total_num = $this->request->param('total_num',0);
            $obj_num = $this->request->param('obj_num',0);

            $status = $this->request->param('status',0); // 当前任务状态，只有课后提交时有用
            // todo::判断当前任务状态是否为【1课前待完成】或者【7课中已评价且课后待完成】
            if(!in_array($status,[self::STATUS_BEFORE_N,self::STATUS_EVAL_ED])){
                // todo::不是，则返回不可提交
                return $this->returnJson([],'当前任务状态不可提交答案');
            }

            $sub_ans = $this->request->param('sub_ans',[]); // 主观
            $obj_ans = $this->request->param('obj_ans',[]); // 客观

            $sub_files = $this->request->param('sub_files',[]);
            $obj_files = $this->request->param('obj_files',[]);
            if(empty($sub_ans) && empty($obj_ans) && empty($sub_files) && empty($obj_files)){
                return $this->returnJson([],'请提交有效答案');
            }

            // todo::判断当前提交记录是否是否可以提交答案，获取当前记录执行日期
            // todo::若为0，说明当前记录为非记录题，不需要判断是否可做
            // todo::反之，需判断当前提交答案时间是否在执行日期内
            $task_log_info = db('user_type_task_log_table')
                ->where('id',$user_task_log_id)
                ->where('status',self::STATUS_ING)
                ->find();
            if(empty($task_log_info)){
                return $this->returnJson([],'提交失败：记录ID不存在');
            }

            //测试注释代码，测试记录题
           $done_time = $task_log_info['done_time'];
           if(!$this->checkIsDone($done_time)){
               return $this->returnJson([],'答案提交失败：当前日期不可提交');
           }
            $now = time();
            $updates = [
                'sub_ans' => json_encode($sub_ans),
                'obj_ans' => json_encode($obj_ans),
                'sub_files' => json_encode($sub_files),
                'obj_files' => json_encode($obj_files),
                'obj_sorce' => $truth_num * 3,
                'truth_num' => $truth_num,
                'total_num' => $total_num,
                'obj_num' => $obj_num,
                'update_time' => $now,
                'status' => self::STATUS_ED
            ];
            $taskInfo = db('user_type_task_log_table')
                ->alias('uttlt')
                ->join('user_type_task_table uttt','uttlt.user_type_task_id = uttt.id')
                ->join('type_task_table ttt','uttt.type_task_id = ttt.id')
                ->where('uttlt.id',$user_task_log_id)
                ->field('ttt.mode,ttt.type,ttt.start_date,ttt.end_date,uttt.id user_type_task_id,uttt.task_over_time')
                ->find();
            db()->startTrans();
            try{
                $res = db('user_type_task_log_table')
                    ->where('id',$user_task_log_id)
                    ->update($updates);
                if($res !== false){
                    // todo::同步到后台评委老师评分表
                    // logs('1111');
                    if(!$this->synWorkTask($user_task_log_id)){
                        // logs('2222');
                        // todo::若不是劳动大赛，则需要更新用户任务总类型状态
                        try{
                            if(!$this->checkIsHasOtherLogs($user_task_log_id)){
                                // logs('3333');
                                // todo::判断答案提交时任务状态，若为[课中已评价且课后待完成]，则只需要将状态更新到[课后已完成]
                                if($status == self::STATUS_EVAL_ED){
                                    // logs('4444');
                                    $status = empty($sub_ans) && empty($sub_files) ? self::STATUS_AFTER_EVAL_ED : self::STATUS_AFTER_ED;
                                    $this->changeTypeTaskStatus($user_task_log_id,$this->info['id'],$status);
                                    if($status == self::STATUS_AFTER_EVAL_ED){
                                        // 判断提交答案时是否在项目起止日期内
                                        $user_log_end_date = $taskInfo['task_over_time'] == 0 ? $taskInfo['end_date'] : $taskInfo['task_over_time'];
                                        $this->checkTaskIsOnce($taskInfo['user_type_task_id'],$user_log_end_date,$now);
                                        // $this->checkTaskIsOnce($taskInfo['user_type_task_id'],$taskInfo['end_date'],$now);
                                        // todo::计入学分
                                        $this->reckonScore(0,$this->info['id'],$user_task_log_id);
                                    }
                                    $this->synUserAnswers($this->info['id'],$user_task_log_id,[$sub_ans,$obj_ans,$sub_files,$obj_files]);
                                    db()->commit();
                                    return $this->returnJson([],'提交成功',1);
                                }
                                // todo::若为[课前待完成]，则只需要将状态更新到[课前已完成]
                                list($flag,$status) = $this->checkTypeTaskEditor($user_task_log_id);
                                if(empty($sub_ans) && empty($sub_files)){
                                    // logs('5555');
                                    // todo::当前任务没有主观题，则不需要指定教师评分，所以不用进入【2课前已完成】状态
                                    if(!$flag){
                                        // logs('6666');
                                        // todo::当前任务需要课中考勤及评价，则需要将状态设置为【3课中待考勤】状态
                                        $this->changeTypeTaskStatus($user_task_log_id,$this->info['id'],self::STATUS_WAIT_R);
                                    }else{
                                        // logs('7777');
                                        // todo::获取类型任务模式：必选或自选
                                        if($taskInfo['type'] == self::TYPE_HOME){
                                            // logs('8888');
                                            // todo::为家庭任务，直接将状态设置为【9课后已评分】
                                            // 判断提交答案时是否在项目起止日期内
                                            $user_log_end_date = $taskInfo['task_over_time'] == 0 ? $taskInfo['end_date'] : $taskInfo['task_over_time'];
                                            $this->checkTaskIsOnce($taskInfo['user_type_task_id'],$user_log_end_date,$now);
                                            // $this->checkTaskIsOnce($taskInfo['user_type_task_id'],$taskInfo['end_date'],$now);
                                            $this->changeTypeTaskStatus($user_task_log_id,$this->info['id'],self::STATUS_AFTER_EVAL_ED);
                                            // todo::计入学分
                                            $this->reckonScore(0,$this->info['id'],$user_task_log_id);
                                        }else{
                                            // logs('9999');
                                            switch ($status){
                                                case '0000':
                                                    // logs('10000');
                                                    // todo::不考勤、不评价、不上传图片、不上传文字，则需要将状态设置为【7课中已评价且课后待完成】状态
                                                    $this->changeTypeTaskStatus($user_task_log_id,$this->info['id'],self::STATUS_EVAL_ED);
                                                    // todo::并且同步当前用户的课后任务
                                                    $user_type_task_id = db('user_type_task_log_table')->where('id',$user_task_log_id)->value('user_type_task_id');
                                                    $this->synUserAfterTask(db('user_type_task_table')->where('id',$user_type_task_id)->find());
                                                    break;
                                                case '0001':
                                                    // logs('111111');
                                                    // todo::不考勤、不评价、不上传图片、上传文字，则需要将状态设置为【6课中待上传】状态
                                                case '0010':
                                                    // logs('12222');
                                                    // todo::不考勤、不评价、上传图片、不上传文字，则需要将状态设置为【6课中待上传】状态
                                                case '0011':
                                                    // logs('13333');
                                                    // todo::不考勤、不评价、上传图片、上传文字，则需要将状态设置为【6课中待上传】状态
                                                    $this->changeTypeTaskStatus($user_task_log_id,$this->info['id'],self::STATUS_UPLOAD_N);
                                                    break;
                                                case '0101':
                                                    // logs('14444');
                                                    // todo::不考勤、评价、不上传图片、上传文字，则需要将状态设置为【5课中待评价】状态
                                                case '0111':
                                                    // logs('15555');
                                                    // todo::不考勤、评价、上传图片、上传文字，则需要将状态设置为【5课中待评价】状态
                                                case '0110':
                                                    // logs('16666');
                                                    // todo::不考勤、评价、上传图片、不上传文字，则需要将状态设置为【5课中待评价】状态
                                                    $this->changeTypeTaskStatus($user_task_log_id,$this->info['id'],self::STATUS_EVAL_N);
                                                    break;
                                                case '1000':
                                                    // logs('17777');
                                                    // todo::考勤、不评价、不上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                                                case '1001':
                                                    // logs('18888');
                                                    // todo::考勤、不评价、不上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                                                case '1011':
                                                    // logs('199999');
                                                    // todo::考勤、不评价、上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                                                case '1010':
                                                    // logs('20000');
                                                    // todo::考勤、不评价、上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                                                case '1111':
                                                    // logs('211111');
                                                    // todo::考勤、评价、上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                                                case '1110':
                                                    // logs('2222222');
                                                    // todo::考勤、评价、上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                                                case '1100':
                                                    // logs('233333');
                                                    // todo::考勤、评价、不上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                                                case '1101':
                                                    // logs('2444444');
                                                    // todo::考勤、评价、不上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                                                    $this->changeTypeTaskStatus($user_task_log_id,$this->info['id'],$taskInfo['mode'] == self::MODE_ONE ? self::STATUS_WAIT_R : self::STATUS_WAIT_SCAN);
                                                    break;
                                            }
                                        }
                                    }
                                }else{
                                    // logs('255555');
                                    // todo::反之需要进入【2课前已完成】状态
                                    $this->changeTypeTaskStatus($user_task_log_id,$this->info['id'],self::STATUS_BEFORE_ED);
                                }

                                $this->synUserAnswers($this->info['id'],$user_task_log_id,[$sub_ans,$obj_ans,$sub_files,$obj_files]);
                                db()->commit();
                                return $this->returnJson([],'提交成功',1);
                            }
                            // logs('266666');
                            $this->synUserAnswers($this->info['id'],$user_task_log_id,[$sub_ans,$obj_ans,$sub_files,$obj_files]);
                            db()->commit();
                            return $this->returnJson([],'提交成功',1);
                        }catch (DataNotFoundException $dataNotFoundException){
                            // logs('27777');
                            db()->rollback();
                            return $this->returnJson([],'提交失败:'.$dataNotFoundException->getMessage());
                        }catch (ModelNotFoundException $modelNotFoundException){
                            // logs('28888');
                            db()->rollback();
                            return $this->returnJson([],'提交失败:'.$modelNotFoundException->getMessage());
                        }catch (DbException $dbException){
                            // logs('29999');
                            db()->rollback();
                            return $this->returnJson([],'提交失败:'.$dbException->getMessage());
                        }catch (Exception $PDOException){
                            // logs('300000');
                            db()->rollback();
                            return $this->returnJson([],'提交失败:'.$PDOException->getMessage());
                        }
                    }
                    // logs('311111');
                    return $this->returnJson([],'提交成功',1);
                }
            }catch (Exception $exception){
                // logs('322222');
                db()->rollback();
                return $this->returnJson([],'提交失败:'.$exception->getMessage());
            }

            // return $this->returnJson([],'提交失败');
        }


        // 已完成项目 - 可按年月筛选
        public function complatedTypeTaskList(){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);
            $type = $this->request->param('type',self::TYPE_HOME);
            $year = $this->request->param('year',date('Y')); // 筛选年月
            $month = $this->request->param('month',''); // 筛选年月
            $where[] = ['uttt.user_id','=',$this->info['id']];
            $where[] = ['ttt.type','=',$type];
            $where[] = ['uttt.status','=',self::STATUS_AFTER_EVAL_ED];
            if(!empty($status)){
                $where[] = ['uttt.status','=',$status];
            }
            if(!empty($month)){
                $startTime = strtotime("{$year}-{$month}-01 00:00:00");
                $endTime = strtotime(date('Y-m-t 23:59:59',$startTime));
                $where[] = ['uttt.done_time','between',"{$startTime},{$endTime}"];
            }
            $list = db('user_type_task_table')
                ->alias('uttt')
                ->join('type_task_table ttt',"uttt.type_task_id = ttt.id")
                ->where($where)
                ->limit(($page-1)*$limit,$limit)
                ->field('ttt.id,ttt.title,ttt.task_id,ttt.depict,if(ttt.image is null,"",if(instr(ttt.image,"http") > 0,ttt.image,concat("'.$this->webUrl.'",ttt.image))) image,ttt.person_num,count(DISTINCT uttt.id) had_person_num,ttt.content,ttt.`mode`,ttt.type,FROM_UNIXTIME(ttt.start_date,"%Y-%m-%d") start_date,FROM_UNIXTIME(ttt.end_date,"%Y-%m-%d") end_date,FROM_UNIXTIME(ttt.create_time,"%Y-%m-%d") create_time,ttt.difficulty_points,uttt.`status` type_status')
                ->order('uttt.done_time desc')
                ->select();
            foreach ($list as $k => $val){
                if($val['had_person_num']==0){
                    unset($list[$k]);
                }
            }
            $total = db('user_type_task_table')
                ->alias('uttt')
                ->join('type_task_table ttt',"uttt.type_task_id = ttt.id")
                ->where($where)
                ->count();
            return $this->returnJson(['list' => $list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
        }

        // 逾期项目列表
        public function overdueTypeTaskList(){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);
            $year = $this->request->param('year',date('Y')); // 筛选年
            $month = $this->request->param('month',''); // 筛选月
            $where[] = ['uttt.user_id','=',$this->info['id']];
            $where[] = ['sttt.end_date_time','<',time()];
            $cwhere[] = ['uttt.user_id','=',$this->info['id']];
            $endTime = strtotime(date('Y-m-t 23:59:59',time()));
            if(!empty($month)){
                $startTime = strtotime("{$year}-{$month}-01 00:00:00");
                $endTime = strtotime(date('Y-m-t 23:59:59',$startTime));
                $where[] = ['ttt.start_date','>=',$startTime];
                $where[] = ['ttt.end_date','<=',$endTime];
                $cwhere[] = ['uttt.task_over_time','<',$endTime];
            }else{
                $cwhere[] = ['uttt.task_over_time','<',$endTime];
            }
            // 家庭任务和劳动大赛
            $home_work_task_sql = db('user_type_task_table')
                ->alias('uttt')
                ->join('type_task_table ttt',"uttt.type_task_id = ttt.id")
                ->join("(SELECT id, (end_date + ".self::ONE_DAY." - 1) AS end_date_time FROM {$this->prefix}type_task_table) sttt","sttt.id = uttt.type_task_id")
                ->where($where)
                ->where('uttt.status',self::STATUS_BEFORE_N)
                ->where('ttt.status',self::STATE_OPEN)
                ->whereIn('ttt.type',[self::TYPE_HOME,self::TYPE_WORK])
                ->field('ttt.id,if(ttt.image is null,"",if(instr(ttt.image,"http") > 0,ttt.image,concat("'.$this->webUrl.'",ttt.image))) image,sttt.end_date_time,ttt.person_num,ttt.content,ttt.`mode`,ttt.type,FROM_UNIXTIME(ttt.start_date,"%Y-%m-%d") start_date,FROM_UNIXTIME(ttt.end_date,"%Y-%m-%d") end_date,ttt.difficulty_points,-3 type_status')
                ->select(false);
            // 其余项目
            $other_task_sql = db('user_type_task_table')
                ->alias('uttt')
                ->join('type_task_table ttt',"uttt.type_task_id = ttt.id")
                ->where($cwhere)
                ->where('uttt.status',self::STATUS_EVAL_ED)
                ->where('ttt.status',self::STATE_OPEN)
                ->whereNotIn('ttt.type',[self::TYPE_HOME,self::TYPE_WORK])
                ->field('ttt.id,if(ttt.image is null,"",if(instr(ttt.image,"http") > 0,ttt.image,concat("'.$this->webUrl.'",ttt.image))) image,uttt.task_over_time end_date_time,ttt.person_num,ttt.content,ttt.`mode`,ttt.type,FROM_UNIXTIME(ttt.start_date,"%Y-%m-%d") start_date,FROM_UNIXTIME(uttt.task_over_time,"%Y-%m-%d") end_date,ttt.difficulty_points,-3 type_status')
                ->select(false);
            $list = Db::table("({$home_work_task_sql}) nttt")
                ->union($other_task_sql,true)
                ->limit(($page-1)*$limit,$limit)
                ->order('end_date_time desc')
                ->select();
            $total = count(db()->query($home_work_task_sql)) + count(db()->query($other_task_sql));
            return $this->returnJson(['list' => $list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
        }

        // 获取指定记录任务图表数据
        public function record_data(){
            $carouselList = [];
            $id = $this->request->param('id',0); // 项目id
            if(empty($id)) return $this->returnJson([],'无效请求');
            $info = db('user_type_task_table')->where('type_task_id',$id)->where('user_id',$this->info['id'])->find();
            if(empty($info)) return $this->returnJson([],'无效请求');
            if($info['status'] < self::STATUS_EVAL_ED){
                $type = self::TASK_LEVEL_TYPE_B;
            }else{
                $type = self::TASK_LEVEL_TYPE_A;
            }
            $list = db('user_type_task_log_table')
                ->where('user_type_task_id',$info['id'])
                ->where('type',$type)
                ->where('status',self::STATUS_ED)
                ->field("id,task_id,sub_ans,FROM_UNIXTIME(done_time,'%Y-%m-%d') done_time")
                ->order('done_time asc')
                ->select();
            // 检查已完成记录是否大于两条，若大于，则返回
            if(count($list) >= 2){
                // 获取当前阶段任务信息
                $task_id = current($list)['task_id'];
                $ext = db('task_question_log')
                    ->alias('tql')
                    ->join('question q','q.id = tql.question_id')
                    ->where('tql.task_id',$task_id)
                    ->value('q.ext');
                if(empty($ext)) return $this->returnJson([],'无效请求');
                $ext = unserialize($ext);
                $doneList = [
                    'times' => array_column($list,'done_time'),
                    'doneList' => []
                ];
                foreach ($ext as $key => $item){
                    $doneList['doneList'][$key] = [
                        'id' => $key,
                        'name' => $item['name'],
                        'unit' => $item['unit'],
                        'data' => []
                    ];
                }
                foreach ($list as $key => $item){
                    $sub_ans =  empty($item['sub_ans']) ? [] : json_decode(json_encode(json_decode($item['sub_ans'])),true);
                    if (empty($sub_ans)){
                        continue;
                    }
                    $answers = current($sub_ans)['answer'];
                    foreach ($answers as $k => $v){
                        $doneList['doneList'][$k]['data'][] = $v;
                    }
                }
                $carouselList = $doneList;
            }
            return $this->returnJson(compact('carouselList'),'获取成功',1);
        }


        // 本周
        public function week(){
            $week = get_week();
            $start_time = strtotime(current($week)['date'].' 00:00:00');
            $end_time = strtotime(end($week)['date'].' 23:59:59');
            list($through_rate,$done_rate,$record_datas) = $this->deal_census($start_time,$end_time);
            return $this->returnJson(compact('through_rate','done_rate','record_datas'),'获取成功',1);
        }

        // 本月
        public function month(){
            $start_time = strtotime(date('Y-m-1').' 00:00:00');
            $end_time = strtotime(date('Y-m-t').' 23:59:59');
            list($through_rate,$done_rate,$record_datas) = $this->deal_census($start_time,$end_time);
            return $this->returnJson(compact('through_rate','done_rate','record_datas'),'获取成功',1);
        }

        // 三个月
        public function three_month(){
            $season = ceil((date('n'))/3); //当前是第几季度
            $beginThisseason = date('Y-m-d H:i:s', mktime(0, 0, 0,$season*3-3+1,1,date('Y')));
            $endThisseason = date('Y-m-d H:i:s', mktime(23,59,59,$season*3,date('t',mktime(0, 0 , 0,$season*3,1,date("Y"))),date('Y')));
            $start_time = strtotime($beginThisseason);
            $end_time = strtotime($endThisseason);
            list($through_rate,$done_rate,$record_datas) = $this->deal_census($start_time,$end_time);
            return $this->returnJson(compact('through_rate','done_rate','record_datas'),'获取成功',1);
        }

        /**
         * 处理统计信息
         * @param int $start_time
         * @param int $end_time
         * @return array
         */
        private function deal_census($start_time = 0,$end_time = 0){
            // 1.获取指定时间范围下的所有任务
            $total_nums = db('user_type_task_log_table')
                ->where("update_time >= {$start_time} and update_time <= {$end_time}")
                ->where('user_id',$this->info['id'])
                ->sum('obj_num');
            // 2.获取所有正确题数量及总题数量
            $truth_nums = db('user_type_task_log_table')
                ->where("update_time >= {$start_time} and update_time <= {$end_time}")
                ->where('user_id',$this->info['id'])
                ->sum('truth_num');
            // 3.获取总任务数
            $total_count = db('user_type_task_log_table')
                ->where("update_time >= {$start_time} and update_time <= {$end_time}")
                ->where('user_id',$this->info['id'])
                ->distinct(true)
                ->count('task_id');
            // 4.获取已完成任务数
            $truth_count = db('user_type_task_log_table')
                ->where("update_time >= {$start_time} and update_time <= {$end_time}")
                ->where('user_id',$this->info['id'])
                ->where('status',self::STATUS_ED)
                ->distinct(true)
                ->count('task_id');
            // 5.获取记录题数据
            $record_datas = [];
            $list = db('user_type_task_log_table')
                ->alias('uttlt')
                ->join('task t','uttlt.task_id = t.id')
                ->where('t.type',self::TASK_RECORD_TYPE)
                ->where("uttlt.update_time >= {$start_time} and uttlt.update_time <= {$end_time}")
                ->where('uttlt.user_id',$this->info['id'])
                ->field("uttlt.id,uttlt.task_id,uttlt.sub_ans,FROM_UNIXTIME(uttlt.done_time,'%Y-%m-%d') done_time")
                ->order('uttlt.id asc')
                ->select();
            $task_ids = array_unique(array_column($list,'task_id'));
            foreach ($task_ids as $task_id){
                $preList = searchData($list,'task_id',$task_id);
                if(count($preList) < 2){
                    continue;
                }
                // 获取当前阶段任务信息
                $ext = db('task_question_log')
                    ->alias('tql')
                    ->join('question q','q.id = tql.question_id')
                    ->where('tql.task_id',$task_id)
                    ->value('q.ext');
                if(empty($ext)) return $this->returnJson([],'无效请求');
                $ext = unserialize($ext);
                $doneList = [
                    'id' => $task_id,
                    'task_name' => db('task')->where('id',$task_id)->value('name'),
                    'times' => array_column($preList,'done_time'),
                    'doneList' => []
                ];

                foreach ($preList as $key => $item){
                    $sub_ans =  empty($item['sub_ans']) ? [] : json_decode(json_encode(json_decode($item['sub_ans'])),true);
                    if (empty($sub_ans)){
                        continue;
                    }
                    $answer_text = current($sub_ans)['answer']['text'];
                    foreach ($answer_text as $k => $v){
                        $answer_text_list[$k]['data'][] = $v['text'];
                    }
                }
                foreach ($ext as $key => $item){
                    $doneList['doneList'][] = [
                        'name' => $item['name']."(".$item['unit'].")",
                        'data' => $answer_text_list[$key]['data']
                    ];
                }
                $record_datas[] = $doneList;
            }
            $through_rate = [
                'truth_num' => $truth_nums,
                'total_num' => $total_nums,
                'rate' => empty($total_nums)?0:($truth_nums/$total_nums)*100
            ];
            $done_rate = [
                'truth_count' => $truth_count,
                'total_count' => $total_count,
                'rate' => empty($total_count)?0:($truth_count/$total_count)*100
            ];
            return [$through_rate,$done_rate,$record_datas];
        }

        // 徽章列表
        public function userBrage(){
            $list = db('user_brage_log_table')
                ->where('user_id',$this->info['id'])
                ->whereBetween('create_time',[strtotime(date('Y-1-1') . ' 00:00:01'),strtotime(date('Y-12-31') . ' 23:59:59')])
                ->order('create_time')
                ->field("id,brage_name,brage_image,score,descript,type,FROM_UNIXTIME(create_time,\"%Y-%m-%d\") create_time")
                ->select();
            foreach ($list as $key => $item){
                $list[$key]['brage_image'] = $this->changeUrl($item['brage_image']);
            }
            return $this->returnJson(compact('list'),'获取成功',1);
        }

        // 指定班级学分排行
        public function scoreRank(){
            // 获取当前用户所在班级下的所有学生id
            $user_ids = db('user_class_log')->whereIn('class_group_id',$this->info['class_ids'])->distinct(true)->field('u_id')->select();
            $list = db('user_reckon_score_table')
                ->alias('urst')
                ->join('user u','u.id = urst.user_id')
                ->whereIn('urst.user_id',array_column($user_ids,'u_id'))
                ->where('urst.year',date('Y'))
                ->where('urst.status',1)
                ->field('u.id,u.`name`,u.avatar,round(sum(urst.score),2) score')
                ->order('score desc')
                ->group('u.id,u.`name`,u.avatar')
                ->select();
            return $this->returnJson(compact('list'),'获取成功',1);
        }

        // 指定班级学分排行
        public function scoreRankNews(){
            // 获取当前用户所在班级下的所有学生id
            $user_ids = db('user_class_log')->whereIn('class_group_id',$this->info['class_ids'])->distinct(true)->field('u_id')->select();
            $list = db('user')
                ->alias('u')
                ->field('u.id,u.`name`,u.avatar')
                ->whereIn('u.id',array_column($user_ids,'u_id'))
                ->select();
            foreach ($list as $k =>  $item){
                $list[$k]['score'] = db('user_reckon_score_table urst')
                    ->where('urst.user_id',$item['id'])
                    ->where('urst.year',date('Y'))
                    ->where('urst.status',1)
                    ->sum('score');
            }
            return $this->returnJson(compact('list'),'获取成功',1);
        }

    }