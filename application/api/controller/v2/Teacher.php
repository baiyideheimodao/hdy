<?php
    /**
     *  Encoding : UTF-8
     *  Separator : Unix and OS X (\n)
     *  File Name : Teacher.php
     *  Create Date : 2022/7/15 13:04
     *  Version : 0.1
     *  Copyright : skylong_ii Project Team Copyright (C)
     *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
     */

    namespace app\api\controller\v2;
    use app\common\controller\WeChatFactory;
    use think\Db;
    use think\db\exception\DataNotFoundException;
    use think\db\exception\ModelNotFoundException;
    use think\Exception;
    use think\exception\DbException;
    use think\exception\PDOException;

    class Teacher extends WeChatFactory {

        private $info   = [];
        private $openid = '';
        private $type = 1;
        private $webUrl = '';

        public function initialize() {
            parent::initialize(); // TODO: Change the autogenerated stub
            $this->openid = $this->request->param('openid');
            $this->webUrl = config('sys_data.web_site');
            $this->type = $this->request->param('type',self::TEACHER_SCHOOL);
            $info         = db('teacher')->where("openid = '{$this->openid}' and type = {$this->type}")->find();
            if (!empty($info)) {
                $this->info        = $info;
            }
        }

        // 账号密码登录
        private function pwLogin(){
            $code = $this->request->param('code','');
            $appid = 'wx32d11f1898c690d6';
            $secret = 'f0f5285f163324b11d3b2c0cb09ff8ac';
            $url = "https://api.weixin.qq.com/sns/jscode2session?appid=".$appid."&secret=".$secret."&js_code=".$code."";
            $res = $this->http_curl($url);
            $openid = $res['openid'];
            $phone = $this->request->param('phone','');
            $password = $this->request->param('password','');
            $info = db('teacher')
                ->where('phone',$phone)
                ->where('password',md5($password))
                ->where('type',$this->type)
                ->find();
            if(empty($info)){
                return $this->returnJson([],'登录无效');
            }
            db('teacher')->where('id',$info['id'])->update(['openid'=>$openid]);
            $info['openid'] = $openid;
            return $this->returnJson(compact('info'),'登录成功',1);
        }

        // 登录
        public function login(){
            if(empty($this->openid)){
                // 账号密码登录
                return $this->pwLogin();
            }else{
                // openid直接登录
                $info = $this->info;
                if(empty($info)){
                    return $this->returnJson([],'登录无效');
                }
                return $this->returnJson(compact('info'),'登录成功',1);
            }
        }

        // 修改个人资料
        public function changeInfo(){
            $nickname = $this->request->param('nickname', '');
            $avatar = $this->request->param('avatar', '');
            $password = $this->request->param('password', '');
            $update = [];
            if (!empty($nickname)) {
                $update['nickname'] = trim($nickname);
            }
            if (!empty($avatar)) {
                $update['avatar'] = trim($avatar);
            }
            if (!empty($password)) {
                $update['password'] = md5(trim($password));
            }
            if (empty($update)) {
                return $this->returnJson([], '修改成功', 1);
            }
            $res = db('teacher')->where("id = {$this->info['id']}")->update($update);
            if($res !== false){
                return $this->returnJson([], '修改成功', 1);
            }
            return $this->returnJson([], '修改失败');
        }

        // 基地教师 - 扫码打卡
        public function scan(){
            $id = $this->request->param('id',0); // 项目id
            $user_id = $this->request->param('user_id',0);

            $info = db('user_type_task_table')->where('type_task_id',$id)->where('user_id',$user_id)->find();
            if(empty($info)){
                return $this->returnJson([],'打卡失败');
            }
            // 检查当前任务是否需要评价
            $type_task_table_info = db('type_task_table')->where('id',$info['type_task_id'])->find();
            // todo::1.获取当前类型任务所选择的基地id
            $base_id = db('type_task_log_table')->where('type_task_id',$type_task_table_info['id'])->value('base_id');
            // todo::2.判断当前扫码人所属基地是否和$base_id相同
            if($this->info['base_id'] != $base_id){
                return $this->returnJson([],'打卡失败');
            }
            // todo::若用户的总类型任务状态表的状态在【课中待打卡】之后，则为已打卡
            if($info['status'] > self::STATUS_WAIT_SCAN){
                return $this->returnJson([],'已打卡');
            }
            $upt['record'] = 1;
            $upt['record_time'] = time();
            if($type_task_table_info['is_eval'] == 1){
                // todo::需要评价，则状态更新为【4课中待评价】
                $upt['status'] = self::STATUS_EVAL_N;
            }else if($type_task_table_info['is_upt_img'] == 1 || $type_task_table_info['is_upt_word'] == 1){
                // todo::不需要评价，但需上传图片或文字，则状态更新为【5课中待上传】
                $upt['status'] = self::STATUS_UPLOAD_N;
            }else{
                // todo::不需要评价，且不需上传图片或文字，则状态更新为【6课中已上传且课后待完成】
                $upt['status'] = self::STATUS_EVAL_ED;
            }
            db()->startTrans();
            $res = db('user_type_task_table')->where('id',$info['id'])->update($upt);
            if($res !== false){
                if($upt['status'] == self::STATUS_EVAL_ED){
                    $this->synUserAfterTask($info);
                }
                db()->commit();
                return $this->returnJson([],'打卡成功',1);
            }
            db()->rollback();
            return $this->returnJson([],'打卡失败');
        }

        // 获取待考勤项目列表
        public function recordList(){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);

            $list = db('type_task_table')
                ->alias('ttt')
                ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                ->join('task t','t.id = uttlt.task_id')
                ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                ->where('uttt.status',self::STATUS_WAIT_R)
                ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                ->where('ttt.status',self::STATE_OPEN)
                ->distinct(true)
                ->limit(($page-1)*$limit,$limit)
                ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days,ttt.is_eval,ttt.is_upt_img,ttt.is_upt_word")
                ->select();
            $total = db('type_task_table')
                ->alias('ttt')
                ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                ->join('task t','t.id = uttlt.task_id')
                ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                ->where('uttt.status',self::STATUS_WAIT_R)
                ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                ->where('ttt.status',self::STATE_OPEN)
                ->distinct(true)
                ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                ->count();

            $total1 = db('type_task_table')
                ->alias('ttt')
                ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                ->join('task t','t.id = ttt.tasked_id')
                ->where('uttt.status',self::STATUS_WAIT_R)
                ->where('ttt.status',self::STATE_OPEN)
                ->where('ttt.admin_id',$this->info['id'])
                ->distinct(true)
                ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.avail_days")
                ->select();

            $data_number = [$total,count($total1)];
            return $this->returnJson(['list'=>$list,'currentPage' => $page,'data_number'=>$data_number,'totalPage' => ceil($total/$limit)],'获取成功',1);
        }

        // 获取待打卡项目列表
        public function scanList(){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);

            $list = db('type_task_table')
                ->alias('ttt')
                ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                ->join('task t','t.id = uttlt.task_id')
                ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                ->where('uttt.status',self::STATUS_WAIT_SCAN)
                ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                ->where('ttt.status',self::STATE_OPEN)
                ->where('ttt.type',self::TYPE_BASE)
                ->distinct(true)
                ->limit(($page-1)*$limit,$limit)
                ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days,{$this->info['class_id']} class_id")
                ->select();
            $total = db('type_task_table')
                ->alias('ttt')
                ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                ->join('task t','t.id = uttlt.task_id')
                ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                ->where('uttt.status',self::STATUS_WAIT_SCAN)
                ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                ->where('ttt.status',self::STATE_OPEN)
                ->where('ttt.type',self::TYPE_BASE)
                ->distinct(true)
                ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                ->count();

            return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
        }

        // 获取待评价项目列表
        public function evalList(){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);
            if($this->type == self::TEACHER_SCHOOL){
                $list = db('type_task_table')
                    ->alias('ttt')
                    ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                    ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                    ->join('task t','t.id = uttlt.task_id')
                    ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                    ->where('uttt.status',self::STATUS_EVAL_N)
                    ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                    ->where('ttt.status',self::STATE_OPEN)
                    ->whereNotIn('ttt.type',[self::TYPE_BASE,self::TYPE_JOBS,self::TYPE_BPUB,self::TYPE_WORK])
                    ->distinct(true)
                    ->limit(($page-1)*$limit,$limit)
                    ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,ttt.is_upt_img,ttt.is_upt_word,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                    ->select();
                $total = db('type_task_table')
                    ->alias('ttt')
                    ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                    ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                    ->join('task t','t.id = uttlt.task_id')
                    ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                    ->where('uttt.status',self::STATUS_EVAL_N)
                    ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                    ->where('ttt.status',self::STATE_OPEN)
                    ->whereNotIn('ttt.type',[self::TYPE_BASE,self::TYPE_JOBS,self::TYPE_BPUB,self::TYPE_WORK])
                    ->distinct(true)
                    ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,ttt.is_upt_img,ttt.is_upt_word,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                    ->count();
                //课中待评价
                $qk_total = db('type_task_table')
                    ->alias('ttt')
                    ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                    ->join('task t','t.id = ttt.tasked_id')
                    ->where('uttt.status',self::STATUS_EVAL_N)
                    ->where('ttt.status',self::STATE_OPEN)
                    ->where('ttt.admin_id',$this->info['id'])
                    ->distinct(true)
                    ->field("ttt.id,ttt.image,ttt.is_upt_word,ttt.is_upt_img,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.avail_days")
                    ->select();
            }else{
                // 基地任务，所选基地教师批量考勤
                $list = db('type_task_table')
                    ->alias('ttt')
                    ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                    ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                    ->join('task t','t.id = ttt.task_id')
                    ->where("ttlt.base_teacher_id = {$this->info['id']}")
                    ->where('uttt.status',self::STATUS_EVAL_N)
                    ->where('ttt.status',self::STATE_OPEN)
                    // todo::筛选未取消任务
                    ->where('ttlt.is_cancel',self::DEFAULT_NO)
                    ->whereIn('ttt.type',[self::TYPE_BASE,self::TYPE_JOBS,self::TYPE_BPUB,self::TYPE_WORK])
                    ->distinct(true)
                    ->limit(($page-1)*$limit,$limit)
                    ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,ttt.is_upt_img,ttt.is_upt_word,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                    ->select();
                $total = db('type_task_table')
                    ->alias('ttt')
                    ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                    ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                    ->join('task t','t.id = ttt.task_id')
                    ->where("ttlt.base_teacher_id = {$this->info['id']}")
                    ->where('uttt.status',self::STATUS_EVAL_N)
                    ->where('ttt.status',self::STATE_OPEN)
                    // todo::筛选未取消任务
                    ->where('ttlt.is_cancel',self::DEFAULT_NO)
                    ->whereIn('ttt.type',[self::TYPE_BASE,self::TYPE_JOBS,self::TYPE_BPUB,self::TYPE_WORK])
                    ->distinct(true)
                    ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,ttt.is_upt_img,ttt.is_upt_word,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                    ->count();
            }
            if(@$qk_total){
                $z_total= count($qk_total);
            }else{
                $z_total= 0;
            }
            $data_number = [$total,$z_total];
            return $this->returnJson(['list'=>$list,'currentPage' => $page,'data_number'=>$data_number,'totalPage' => ceil($total/$limit)],'获取成功',1);
        }

        // 获取待上传项目列表
        public function uptList(){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);
            if($this->type == self::TEACHER_SCHOOL){
                $list = db('type_task_table')
                    ->alias('ttt')
                    ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                    ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                    ->join('task t','t.id = uttlt.task_id')
                    ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                    ->where('uttt.status',self::STATUS_UPLOAD_N)
                    ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                    ->where('ttt.status',self::STATE_OPEN)
                    ->whereNotIn('ttt.type',[self::TYPE_BASE,self::TYPE_JOBS,self::TYPE_BPUB,self::TYPE_WORK])
                    ->distinct(true)
                    ->limit(($page-1)*$limit,$limit)
                    ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.is_upt_img,ttt.is_upt_word,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                    ->select();
                $total = db('type_task_table')
                    ->alias('ttt')
                    ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                    ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                    ->join('task t','t.id = uttlt.task_id')
                    ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                    ->where('uttt.status',self::STATUS_UPLOAD_N)
                    ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                    ->where('ttt.status',self::STATE_OPEN)
                    ->whereNotIn('ttt.type',[self::TYPE_BASE,self::TYPE_JOBS,self::TYPE_BPUB,self::TYPE_WORK])
                    ->distinct(true)
                    ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.is_upt_img,ttt.is_upt_word,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                    ->count();
            }else{
                // 基地任务，所选基地教师批量考勤
                $list = db('type_task_table')
                    ->alias('ttt')
                    ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                    ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                    ->join('task t','t.id = ttt.task_id')
                    ->where("ttlt.base_teacher_id = {$this->info['id']}")
                    ->where('uttt.status',self::STATUS_UPLOAD_N)
                    ->where('ttt.status',self::STATE_OPEN)
                    // todo::筛选未取消任务
                    ->where('ttlt.is_cancel',self::DEFAULT_NO)
                    ->whereIn('ttt.type',[self::TYPE_BASE,self::TYPE_JOBS,self::TYPE_BPUB,self::TYPE_WORK])
                    ->distinct(true)
                    ->limit(($page-1)*$limit,$limit)
                    ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,ttt.is_upt_img,ttt.is_upt_word,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                    ->select();
                $total = db('type_task_table')
                    ->alias('ttt')
                    ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                    ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
                    ->join('task t','t.id = ttt.task_id')
                    ->where("ttlt.base_teacher_id = {$this->info['id']}")
                    ->where('uttt.status',self::STATUS_UPLOAD_N)
                    ->where('ttt.status',self::STATE_OPEN)
                    // todo::筛选未取消任务
                    ->where('ttlt.is_cancel',self::DEFAULT_NO)
                    ->whereIn('ttt.type',[self::TYPE_BASE,self::TYPE_JOBS,self::TYPE_BPUB,self::TYPE_WORK])
                    ->distinct(true)
                    ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,ttt.is_upt_img,ttt.is_upt_word,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                    ->count();
            }
            return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
        }

        // 获取指定考勤项目的用户列表
        public function recordUserList(){
            $taskId = $this->request->param('task_id',0);
            $list = db('user_type_task_table')
                ->alias('uttt')
                ->join('user u','uttt.user_id = u.id')
                ->where('type_task_id',$taskId)
                ->where('uttt.status',self::STATUS_WAIT_R)
                ->field('u.id,u.avatar,u.`name` username,u.sex')
                ->select();
            foreach ($list as $k => $val){
                $list[$k]['kq_value'] = true;
            }
            return $this->returnJson(['list'=>$list],'获取成功',1);
        }
        // 获取指定评价项目的用户列表
        public function evalUserList(){
            $taskId = $this->request->param('task_id',0);
            $list = db('user_type_task_table')
                ->alias('uttt')
                ->join('user u','uttt.user_id = u.id')
                ->where('type_task_id',$taskId)
                ->where('uttt.status',self::STATUS_EVAL_N)
                ->field('u.id,u.avatar,u.`name` username,u.sex,uttt.record')
                ->select();
            $uptUsers = [];
            $noRecord = []; // 未考勤列表
            foreach ($list as $k => $item){
                if($item['record'] == 0){
                    array_push($noRecord,$item);
                    unset($list[$k]);
                    continue;
                }
                $uptUsers[$k]['upt_word']='';
                $uptUsers[$k]['upt_media']='';
                $list[$k]['score']=2;
                $list[$k]['upt_file']=[];
                $list[$k]['upt_word']="";
                $list[$k]['upt_media']=[];
                $uptUsers[$k]['user_id']=$item['id'];
            }
            return $this->returnJson(['list'=>$list,'uptUsers'=>$uptUsers,'noRecord' => $noRecord],'获取成功',1);
        }
        // 获取指定待上传项目的用户列表
        public function uptUserList(){
            $taskId = $this->request->param('task_id',0);
            $list = db('user_type_task_table')
                ->alias('uttt')
                ->join('user u','uttt.user_id = u.id')
                ->where('type_task_id',$taskId)
                ->where('uttt.status',self::STATUS_UPLOAD_N)
                ->field('u.id,u.avatar,u.`name` username,u.sex,uttt.record')
                ->select();

            $noRecord = []; // 未考勤列表
            foreach ($list as $k => $item){
                if($item['record'] == 0){
                    array_push($noRecord,$item);
                    unset($list[$k]);
                    continue;
                }
            }
            return $this->returnJson(['list'=>$list,'noRecord' => $noRecord],'获取成功',1);
        }


        // 待评分任务列表
        public function markList(){
            $page  = $this->request->param('page', 1);
            $limit = $this->request->param('limit', 10);
            $status = $this->request->param('status',0);
            $task_type = $this->request->param('task_type',0);
            $where = [];
            if (!empty($task_type)){
                $where['ttt.type'] = $task_type;
            }
            switch ($status){
                case 1:
                    // 待课前评分
                    $list = db('type_task_table')
                        ->alias('ttt')
                        ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                        ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                        ->join('task t','t.id = uttlt.task_id')
                        ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                        ->where('uttt.status',self::STATUS_BEFORE_ED)
                        ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                        ->where('ttt.status',self::STATE_OPEN)
                        ->where($where)
                        ->distinct(true)
                        ->limit(($page-1)*$limit,$limit)
                        ->field("ttt.id,t.id rwid,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                        ->select();
                    $total = db('type_task_table')
                        ->alias('ttt')
                        ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                        ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                        ->join('task t','t.id = uttlt.task_id')
                        ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                        ->where('uttt.status',self::STATUS_BEFORE_ED)
                        ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                        ->where('ttt.status',self::STATE_OPEN)
                        ->where($where)
                        ->distinct(true)
                        ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                        ->count();
                    return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
                    break;
                case 2:
                    // 待课后评分
                    $list = db('type_task_table')
                        ->alias('ttt')
                        ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                        ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                        ->join('task t','t.id = uttlt.task_id')
                        ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                        ->where('uttt.status',self::STATUS_AFTER_ED)
                        ->where('uttlt.type',self::TASK_LEVEL_TYPE_A)
                        ->where('ttt.status',self::STATE_OPEN)
                        ->where($where)
                        ->distinct(true)
                        ->limit(($page-1)*$limit,$limit)
                        //卜阳修改
                        ->field("ttt.id,t.id rwid,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                        ->select();
                    $total = db('type_task_table')
                        ->alias('ttt')
                        ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
                        ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                        ->join('task t','t.id = uttlt.task_id')
                        ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
                        ->where('uttt.status',self::STATUS_AFTER_ED)
                        ->where('uttlt.type',self::TASK_LEVEL_TYPE_A)
                        ->where('ttt.status',self::STATE_OPEN)
                        ->where($where)
                        ->distinct(true)
                        ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days")
                        ->count();
                    return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
                    break;
                default:
                    return $this->returnJson([],'状态不存在');
                    break;
            }
        }

        /**
         * 拼接用户主观题答题列表
         * @param array $userLogTasks
         * @param int   $question_id
         * @return array
         */
        private function combinMarksList($userLogTasks = [],$question_id = 0){
            $list = [];
            foreach ($userLogTasks as $key => $item){
                $sub_ans = empty($item['sub_ans']) ? [] : json_decode(json_encode(json_decode($item['sub_ans'])),true);
                $sub_files = empty($item['sub_files']) ? [] : json_decode(json_encode(json_decode($item['sub_files'])),true);

                $sub_ans_obj = array_column($sub_ans,'answer','id');
                $sub_files_obj = array_column($sub_files,'image','id');
                $item['is_sys']==1 ? $difficulty_points = 0 : $difficulty_points = $item['difficulty_points'];
                // $ans_info = db('user_question_answer_table')
                //     ->where('user_id',$item['user_id'])
                //     ->where('question_id',$question_id)
                //     ->find();

                array_push($list,[
                   'user_id' =>  $item['user_id'],
                   'user_avatar' => $item['avatar'],
                   'user_name' => $item['name'],
                   'difficulty_points' => $difficulty_points,
                   'is_sys' => $item['is_sys'],
                   'user_type_task_id' => $item['user_type_task_id'],
                   'done_time' => $item['done_time'],
                   'sub_answer' => ['text'=>''],//$sub_ans_obj[$question_id],//,$ans_info['answer_text'],//
                   'sub_files' => isset($sub_files_obj[$question_id]) ? $sub_files_obj[$question_id] : []
                ]);
            }
            $userIndex = [];
            foreach ($list as $key => $item){
                if(!isset($userIndex[$item['user_id']])){
                    $userIndex[$item['user_id']] = [
                        'user_id' =>  $item['user_id'],
                        'user_avatar' => $item['user_avatar'],
                        'user_name' => $item['user_name'],
                        'user_type_task_id' => $item['user_type_task_id'],
                        'difficulty_points' => ($item['is_sys'] == 0 ? 2 : 0) ,
                        // 是否系统同步
                        'is_sys' => $item['is_sys'],
                        'answer' => []
                    ];
                }
                $pre_sub_files = $item['sub_files'];
                if(is_array($pre_sub_files)){
                    foreach ($pre_sub_files as $k => $pre){
                        $pre_sub_files[$k] = $this->changeUrl($pre);
                    }
                }else{
                    $pre_sub_files = $this->changeUrl($pre_sub_files);
                }
                array_push($userIndex[$item['user_id']]['answer'],[
                    'done_time' => $item['done_time'],
                    'sub_answer' => $item['sub_answer'],
                    'difficulty_points' => $item['difficulty_points'],
                    'sub_files' => $pre_sub_files
                ]);
            }
            return array_values($userIndex);
        }

        // 查看任务详情
        public function taskInfo(){
            $taskId = $this->request->param('task_id',0);
            $rw_id = $this->request->param('rw_id',0);
            $status = $this->request->param('status',0);
            switch ($status){
                case 1:
                    // 待课前评分
                    $list = db('user_type_task_table')
                        ->alias('uttt')
                        ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                        ->where('type_task_id',$taskId)
                        ->where('uttt.status',self::STATUS_BEFORE_ED)
                        ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
                        ->where('uttlt.teacher_id',$this->info['id'])
                        ->field('uttt.id,uttlt.task_id,group_concat(uttlt.id) log_ids')
                        ->group('uttt.id')
                        ->select();
                    break;
                case 2:
                    // 待课后评分
                    $list = db('user_type_task_table')
                        ->alias('uttt')
                        ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
                        ->where('type_task_id',$taskId)
                        ->where('uttt.status',self::STATUS_AFTER_ED)
                        ->where('uttlt.type',self::TASK_LEVEL_TYPE_A)
                        ->where('uttlt.teacher_id',$this->info['id'])
                        ->field('uttt.id,uttlt.task_id,group_concat(uttlt.id) log_ids')
                        ->group('uttt.id')
                        ->select();
                    break;
                default:
                    return $this->returnJson([],'状态不存在');
                    break;
            }
            if(empty($list)){
                return $this->returnJson(compact('list'),'获取成功',1);
            }
            printLog($list);
            $log_ids = explode(',',implode(',',array_column($list,'log_ids')));
            $taskLogList = db('user_type_task_log_table')
                ->alias('uttlt')
                ->join('user u','u.id = uttlt.user_id')
                ->join('user_type_task_table tt','tt.id = uttlt.user_type_task_id','left')
                ->join('type_task_table ttt','ttt.id = tt.type_task_id','left')
                ->whereIn('uttlt.id',$log_ids)
                ->field('uttlt.id,uttlt.is_sys,ttt.difficulty_points,uttlt.user_type_task_id,uttlt.sub_ans,uttlt.sub_files,u.id user_id,u.avatar,u.`name`,FROM_UNIXTIME(uttlt.update_time) done_time')
                ->select();
            $questions = db('question')
                ->alias('q')
                ->join("subject s",'q.subject_id = s.id','left')
                ->join("subject_version sv",'q.version_id = sv.id','left')
                ->join("subject_version_maker svm",'q.maker_id = svm.id','left')
                ->join("data_log dl",'q.data_log_id = dl.id','left')
                ->join("task_question_log tql",'q.id = tql.question_id')
                ->where("tql.task_id",current($list)['task_id'])
                ->whereNotIn('q.type',self::OBJ_LIST)
                ->order("tql.question_sort asc")
                ->field('q.id,s.name subject_name,sv.name version_name,q.question_num,svm.name maker_name,q.level,q.pages,q.page_num,q.answer_file_image,q.answer_file_text,q.type,q.name,q.desc,q.options,q.images,q.file_type,q.answer,q.ext')
                ->select();
            printLog([
                'taskloglist'=>$taskLogList,
                'questions'=>$questions
            ]);
            foreach ($questions as $key => $item){
                if($item['type'] == 2){
                    $questions[$key]['options'] = str_replace('/kindeditor/php/../../',config('sys_data.web_site'),$item['options']);
                    $questions[$key]['options'] = str_replace('/upload/image/',config('sys_data.web_site')."/upload/image/",$item['options']);
                }else{
                    $questions[$key]['options'] = empty($item['options'])?'':unserialize($item['options']);
                }

                $answer = '';
                if(!empty($item['answer'])){
                    $answer = unserialize($item['answer']);
                    $answer['image'] = isset($answer['image'])?$this->changeUrl($answer['image']):'';
                }
                $questions[$key]['answer'] = $answer;
                $questions[$key]['ext'] = empty($item['ext'])?'':unserialize($item['ext']);
                $questions[$key]['subject_name'] = empty($item['subject_name'])?'':$item['subject_name'];
                $questions[$key]['version_name'] = empty($item['version_name'])?'':$item['version_name'];
                $questions[$key]['maker_name'] = empty($item['maker_name'])?'':$item['maker_name'];

                $questions[$key]['images'] = $this->changeUrl($questions[$key]['images']);
                $questions[$key]['userAnswers'] = $this->combinMarksList($taskLogList,$item['id']);
            }
            $taskInfo = db('task')
                ->alias('t')
                ->join("task_index ti",'ti.task_id = t.id','left')
                ->join("subject su",'su.id = ti.subject_id','left')
                ->where('t.id',$rw_id)
                ->field('t.id task_id,t.`name`,su.`name` subject_name,ti.`level`,if(ti.level is null,"无",if(ti.`level` = 1,"A",if(ti.`level` = 2,"B","C"))) level_name,t.`image`,t.`desc`,t.type')
                ->find();

            return $this->returnJson(['list'=>$questions,'id'=>$taskId,'task_info' => $taskInfo],'获取成功',1);
        }


        // 用户评分【课前或课后】
        public function markUser(){
            $id = $this->request->param('id',0); // 类型任务id
            // 获取当前类型任务下
            $userScores = $this->request->param('userScores',[]);
            $marks = $this->request->param('userMarks',[]);
            $user_type_task_ids = array_column($userScores,'user_type_task_id');
            $status = db('user_type_task_table')->where('id',current($user_type_task_ids))->value('status');
            $marksInserts = [];
            foreach ($userScores as $key => $item){
                array_push($marksInserts,[
                    'user_type_task_id' => $item['user_type_task_id'],
                    'teacher_id' => $this->info['id'],
                    'create_time' => time(),
                    'user_id' => $item['user_id'],
                    'score' => $item['score'],
                    'marks' => empty($marks)?'':(isset($marks[$item['user_id']])?json_encode($marks[$item['user_id']]):''),
                    'type' => $status == self::STATUS_BEFORE_ED ? self::TASK_LEVEL_TYPE_B : self::TASK_LEVEL_TYPE_A
                ]);
            }
            db()->startTrans();
            try{
                $res = db('user_mark_table')->insertAll($marksInserts);
                if($res !== false){
                    // todo::检查当前任务状态，并判断当前任务是否考勤，课中评价等
                    if($status == self::STATUS_AFTER_ED){
                        // 判断提交答案时是否在项目起止日期内
                        $this->batchCheckTaskIsOnce($user_type_task_ids,$id,1);
                        // todo::若为课后已完成，只需将状态更新为【9课后已评分】
                        $this->batchChangeTypeTaskStatus($user_type_task_ids,self::STATUS_AFTER_EVAL_ED);
                        // todo::计入学分
                        $this->batchReckonScore($user_type_task_ids);
                    }else{
                        list($flag,$status) = $this->checkTypeTaskEditor(0,$id);
                        if(!$flag){
                            // todo::考勤、评价、上传图片、上传文字，只需将状态更新为【3课中待考勤】
                            $this->batchChangeTypeTaskStatus($user_type_task_ids,self::STATUS_WAIT_R);
                        }else{
                            // todo::获取类型任务模式：必选或自选
                            $taskInfo = db('type_task_table')->where('id',$id)->field('mode,type')->find();
                            if($taskInfo['type'] == self::TYPE_HOME){
                                // 判断提交答案时是否在项目起止日期内
                                $this->batchCheckTaskIsOnce($user_type_task_ids,$id);
                                // todo::为家庭任务，直接将状态设置为【9课后已评分】
                                $this->batchChangeTypeTaskStatus($user_type_task_ids,self::STATUS_AFTER_EVAL_ED);
                                // todo::计入学分
                                $this->batchReckonScore($user_type_task_ids);
                            }else {
                                switch ($status) {
                                    case '0000':
                                        // todo::不考勤、不评价、不上传图片、不上传文字，则需要将状态设置为【7课中已评价且课后待完成】状态
                                        $this->batchChangeTypeTaskStatus($user_type_task_ids, self::STATUS_EVAL_ED);
                                        // todo::并且同步当前用户的课后任务
                                        $this->bachSynUserAfterTask($user_type_task_ids);
                                        break;
                                    case '0001':
                                        // todo::不考勤、不评价、不上传图片、上传文字，则需要将状态设置为【6课中待上传】状态
                                    case '0010':
                                        // todo::不考勤、不评价、上传图片、不上传文字，则需要将状态设置为【6课中待上传】状态
                                    case '0011':
                                        // todo::不考勤、不评价、上传图片、上传文字，则需要将状态设置为【6课中待上传】状态
                                        $this->batchChangeTypeTaskStatus($user_type_task_ids, self::STATUS_UPLOAD_N);
                                        break;
                                    case '0101':
                                        // todo::不考勤、评价、不上传图片、上传文字，则需要将状态设置为【5课中待评价】状态
                                    case '0111':
                                        // todo::不考勤、评价、上传图片、上传文字，则需要将状态设置为【5课中待评价】状态
                                    case '0110':
                                        // todo::不考勤、评价、上传图片、不上传文字，则需要将状态设置为【5课中待评价】状态
                                        $this->batchChangeTypeTaskStatus($user_type_task_ids, self::STATUS_EVAL_N);
                                        break;
                                    case '1000':
                                        // todo::考勤、不评价、不上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                                    case '1001':
                                        // todo::考勤、不评价、不上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                                    case '1011':
                                        // todo::考勤、不评价、上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                                    case '1010':
                                        // todo::考勤、不评价、上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                                    case '1111':
                                        // todo::考勤、评价、上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                                    case '1110':
                                        // todo::考勤、评价、上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                                    case '1100':
                                        // todo::考勤、评价、不上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                                    case '1101':
                                        // todo::考勤、评价、不上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                                        $this->batchChangeTypeTaskStatus($user_type_task_ids, $taskInfo['mode'] == self::MODE_ONE ? self::STATUS_WAIT_R : self::STATUS_WAIT_SCAN);
                                        break;
                                }
                            }
                        }
                    }
                    db()->commit();
                    db('user_type_task_table')->where('done_time','<>',0)->update(['status'=>9]);
                    return $this->returnJson([],'评分成功',1);
                }
                db()->rollback();
                return $this->returnJson([],'评分失败');
            }catch (Exception $exception){
                db()->rollback();
                return $this->returnJson([],'请在次确认'.$exception->getMessage().Db::getLastSql());
            }catch (PDOException $PDOException){
                db()->rollback();
                return $this->returnJson([],'评分失败2:'.$PDOException->getMessage());
            }
        }

        // 校外自选课基地教师评价 - 批量评价上传【课中】
        public function evalAndUpdateUsers(){

            $id = $this->request->param('id',0); // 类型任务id
            $userScores = $this->request->param('userScores',[]);
            $noRecord = $this->request->param('noRecord',[]);
            if(empty($id) || empty($userScores)){
                return $this->returnJson([],'评价失败');
            }
            $sql = '';
            $now = time();
            $status = self::STATUS_EVAL_ED;
            $typeTaskInfo = db('type_task_table')->where('id',$id)->find();
            if(empty($typeTaskInfo)){
                return $this->returnJson([],'评价失败');
            }
            $updateDatas = [];

            foreach ($userScores as $key => $item){
                $upt_media = json_encode($item['upt_media']);
                $upt_word = $item['upt_word'];
                $rowId = db('user_type_task_table')->where("`type_task_id` = {$id} AND `user_id` = {$item['user_id']}")->value('id');
                array_push($updateDatas,[
                    'id' => $rowId,
                    'eval' => $item['score'],
                    'upt_media' => $upt_media,
                    'upt_word' => $upt_word,
                    'tasking_time' => $now,
                    'status' => $status
                ]);
            }

            foreach ($noRecord as $key => $item){
                $rowId = db('user_type_task_table')->where("`type_task_id` = {$id} AND `user_id` = {$item['user_id']}")->value('id');
                array_push($updateDatas,[
                    'id' => $rowId,
                    'eval' => 0,
                    'upt_media' => '[]',
                    'upt_word' => '',
                    'tasking_time' => 0,
                    'status' => $status
                ]);
            }
            $userIds = array_column($userScores,'user_id');
            $list = db('user_type_task_table')->where('type_task_id',$id)->whereIn('user_id',$userIds)->whereOr('tasking_time',0)->field('id')->select();
            $userTypeTaskIds = array_column($list,'id');

//            db()->startTrans();

            $res = model('user_type_task_table')->saveAll($updateDatas);

            if($res !== false){
                // 批量同步用户课后任务
                $this->bachSynUserAfterTask($userTypeTaskIds);
//                db()->commit();
                return $this->returnJson([],'评价完成',1);
            }
//            db()->rollback();
            return $this->returnJson([],'评价失败');
        }

        // 课中批量评价
        public function evalUsers(){
            $id = $this->request->param('id',0); // 类型任务id
            $userScores = $this->request->param('userScores',[]);
            $noRecord = $this->request->param('noRecord',[]);
            if(empty($id) || empty($userScores)){
                return $this->returnJson([],'评价失败');
            }
            $sql = '';
            $now = time();
            $typeTaskInfo = db('type_task_table')->where('id',$id)->find();
            if(empty($typeTaskInfo)){
                return $this->returnJson([],'评价失败');
            }
            $status = self::STATUS_EVAL_ED;
            if($typeTaskInfo['is_upt_img'] == 1 || $typeTaskInfo['is_upt_word'] == 1){
                $status = self::STATUS_UPLOAD_N;
            }

            foreach ($userScores as $key => $item){
                $sql .= "UPDATE `{$this->prefix}user_type_task_table`  SET `eval` = {$item['score']},`tasking_time` = {$now} ,`status` = {$status}  WHERE  `type_task_id` = {$id} AND `user_id` = {$item['user_id']};";
            }
            // 处理未考勤人员评价信息【分数0，上传图片及文字为空，评价时间为0】
            foreach ($noRecord as $key => $item){
                $sql .= "UPDATE `{$this->prefix}user_type_task_table`  SET `eval` = 0 ,`tasking_time` = 0 ,`status` = {$status}  WHERE  `type_task_id` = {$id} AND `user_id` = {$item['id']};";
            }
            $userIds = array_column($userScores,'user_id');
            $list = db('user_type_task_table')->where('type_task_id',$id)->whereIn('user_id',$userIds)->field('id')->select();
            $userTypeTaskIds = array_column($list,'id');
            db()->startTrans();
            $res = db()->execute($sql);
            if($res !== false){
                // 批量同步用户课后任务
                if($status == self::STATUS_EVAL_ED){
                    // 若为【7课中已上传且课后待完成】，批量同步用户课后任务
                    $this->bachSynUserAfterTask($userTypeTaskIds);
                }
                db()->commit();
                return $this->returnJson([],'评价完成',1);
            }
            db()->rollback();
            return $this->returnJson([],'评价失败');
        }

        // 课中批量上传评价
        public function uptUsers(){
            $id = $this->request->param('id',0); // 类型任务id
            $userScores = $this->request->param('userScores',[]);
            $noRecord = $this->request->param('noRecord',[]);
            if(empty($id) || empty($userScores)){
                return $this->returnJson([],'评价失败');
            }
            $typeTaskInfo = db('type_task_table')->where('id',$id)->find();
            if(empty($typeTaskInfo)){
                return $this->returnJson([],'评价失败');
            }
            $list = db('user_type_task_table')->where('type_task_id',$id)->whereIn('user_id',array_column($userScores,'user_id'))->field('id')->select();
            $userTypeTaskIds = array_column($list,'id');
            $status = self::STATUS_EVAL_ED;
            $sql = '';
            foreach ($userScores as $key => $item){
                $upt_media = json_encode($item['upt_media']);
                $upt_word = $item['upt_word'];
                $sql .= "UPDATE `{$this->prefix}user_type_task_table`  SET `upt_media` = '{$upt_media}' ,`upt_word` = '{$upt_word}',`status` = {$status}  WHERE  `type_task_id` = {$id} AND `user_id` = {$item['user_id']};";
            }
            // 处理未考勤人员评价信息【分数0，上传图片及文字为空，评价时间为0】
            foreach ($noRecord as $key => $item){
                $sql .= "UPDATE `{$this->prefix}user_type_task_table`  SET `upt_media` = '[]' ,`upt_word` = '' ,`status` = {$status}  WHERE  `type_task_id` = {$id} AND `user_id` = {$item['id']};";
            }
            db()->startTrans();
            $res = db()->execute($sql);
            // $res = db('user_type_task_table')
            //     ->where('type_task_id',$id)
            //     ->whereIn('user_id',$user_ids)
            //     ->update(['upt_media'=>$upt_media,'upt_word'=>$upt_word,'status'=>self::STATUS_EVAL_ED]);
            if($res !== false){
                // 若为【7课中已上传且课后待完成】，批量同步用户课后任务
                $this->bachSynUserAfterTask($userTypeTaskIds);
                db()->commit();
                return $this->returnJson([],'上传完成',1);
            }
            db()->rollback();
            return $this->returnJson([],'上传失败');
        }

        // 校外自选课基地教师评价 - 批量评价【课中】
        public function evalUser(){
            $id = $this->request->param('id',0);
            $eval = $this->request->param('eval',0);
            $upt_media = $this->request->param('upt_media',[]);
            $upt_word = $this->request->param('upt_word','');

            if(empty($id)){
                return $this->returnJson([],'评价失败');
            }
            $upt_media = json_encode($upt_media);
            db()->startTrans();
            $res = db('user_type_task_table')
                ->where('id',$id)
                ->update(['eval'=>$eval,'upt_media'=>$upt_media,'upt_word'=>$upt_word,'tasking_time'=>time(),'status'=>self::STATUS_EVAL_ED]);
            if($res !== false){
                // 批量同步用户课后任务
                $this->synUserAfterTask($id);
                db()->commit();
                return $this->returnJson([],'评价完成',1);
            }
            db()->rollback();
            return $this->returnJson([],'评价失败');
        }

        // 批量考勤
        public function batchRecordUser(){
            // todo::家庭任务不会进入此步
            $type_task_id = $this->request->param('type_task_id',0);
            // 获取类型任务
            $typeTaskInfo = db('type_task_table')->where('id',$type_task_id)->find();
            $user_ids = $this->request->param('user_ids',[]);
            // 获取类型任务班级id以及基地id
            $logInfo = db('type_task_log_table')->where('type_task_id',$type_task_id)->field('class_id,teacher_id,base_id,base_teacher_id')->find();
            if(empty($logInfo['class_id']) || empty($user_ids)){
                return $this->returnJson([],'批量考勤失败');
            }
            // todo::判断当前操作人是否有权限批量考勤
            if($typeTaskInfo['type'] == self::TYPE_BASE){
                // 基地任务
                // 不做操作
            }else{
                if($this->info['type'] == self::TEACHER_BASE || $logInfo['teacher_id'] != $this->info['id']){
                    // 若为基地教师
                    return $this->returnJson([],'批量考勤失败');
                }
            }
            $where['type_task_id'] = $type_task_id;
            $where['status'] = self::STATUS_WAIT_R;
            if(empty($logInfo['base_id'])){
                // todo::如果只存在班级id，说明当前类型任务为必选任务中的校内任务
                // todo::状态值更新为【5课中待评价】
                $update['status'] = self::STATUS_EVAL_N;
                // todo::不评价
                if($typeTaskInfo['is_eval'] == self::DEFAULT_NO){
                    $update['status'] = self::STATUS_UPLOAD_N;
                    // todo::不上传
                    if($typeTaskInfo['is_upt_img'] == self::DEFAULT_NO && $typeTaskInfo['is_upt_word'] == self::DEFAULT_NO){
                        $update['status'] = self::STATUS_EVAL_ED;
                    }
                }
                $update['record'] = 1;
            }else{
                // todo::若班级id存在且基地id也存在，说明当前类型任务为必选任务中的基地任务
                // todo::状态值更新为【4课中待打卡】
                $update['status'] = self::STATUS_WAIT_SCAN;
            }
            printLog([
                'logInfo'=>$logInfo,
                'update'=>$update,
                'where'=>$where,
                'user_id'=>$user_ids
            ]);
            $res = db('user_type_task_table')->where($where)->whereIn('user_id',$user_ids)->whereOr('tasking_time',0)->update($update);
            if($res !== false){
                return $this->returnJson([],'批量考勤完成',1);
            }
            return $this->returnJson([],'批量考勤失败2');
        }

        // 批量扫码
        public function batchScan(){
            $id = $this->request->param('id',0); // 项目id
            $class_id = $this->request->param('class_id',0);

            $userIds = db('user_class_log')->where('class_group_id',$class_id)->column('u_id');

            if(empty($id) || empty($class_id) || empty($userIds)){
                return $this->returnJson([],'打卡失败');
            }
            // 检查当前任务是否需要评价
            $type_task_table_info = db('type_task_table')->where('id',$id)->find();

            // todo::1.获取当前类型任务所选择的基地id
            $base_id = db('type_task_log_table')->where('type_task_id',$type_task_table_info['id'])->value('base_id');
            // todo::2.判断当前扫码人所属基地是否和$base_id相同
            if($this->info['base_id'] != $base_id){
                return $this->returnJson([],'打卡失败');
            }
            $upt['record'] = 1;
            $upt['record_time'] = time();
            if($type_task_table_info['is_eval'] == 1){
                // todo::需要评价，则状态更新为【4课中待评价】
                $upt['status'] = self::STATUS_EVAL_N;
            }else if($type_task_table_info['is_upt_img'] == 1 || $type_task_table_info['is_upt_word'] == 1){
                // todo::不需要评价，但需上传图片或文字，则状态更新为【5课中待上传】
                $upt['status'] = self::STATUS_UPLOAD_N;
            }else{
                // todo::不需要评价，且不需上传图片或文字，则状态更新为【6课中已上传且课后待完成】
                $upt['status'] = self::STATUS_EVAL_ED;
            }
            $userTypeTasks = db('user_type_task_table')->where('type_task_id',$id)->whereIn('user_id',$userIds)->select();

            if(empty($userTypeTasks)){
                return $this->returnJson([],'打卡失败');
            }

            $userTypeTaskIds = array_column($userTypeTasks,'id');

            db()->startTrans();
            $res = db('user_type_task_table')->whereIn('id',$userTypeTaskIds)->update($upt);
            if($res !== false){
                if($upt['status'] == self::STATUS_EVAL_ED){
                    $this->bachSynUserAfterTask($userTypeTaskIds);
                }
                db()->commit();
                return $this->returnJson([],'打卡成功',1);
            }
            db()->rollback();
            return $this->returnJson([],'打卡失败');
        }
    }