<?php
    /**
     *  Encoding : UTF-8
     *  Separator : Unix and OS X (\n)
     *  File Name : Cron.php
     *  Create Date : 2022/8/3 15:12
     *  Version : 0.1
     *  Copyright : skylong_ii Project Team Copyright (C)
     *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
     */

    namespace app\api\controller\v2;
    use app\common\controller\BaseController;
    use think\Exception;
    use think\facade\Env;

    class Cron extends BaseController {

        public function initialize() {
            parent::initialize(); // TODO: Change the autogenerated stub
            ignore_user_abort();//关掉浏览器，PHP脚本也可以继续执行.
            set_time_limit(0);// 通过set_time_limit(0)可以让程序无限制的执行下去
            ini_set('memory_limit','512M'); // 设置内存限制
        }

        public function userLearn(){

        }

        /**
         * 系统同步用户阶段任务信息
         * @param array $typeTaskInfo
         * @param array $uids
         * @param array $list
         * @param array $doneList
         * @param array $others
         * @param int   $status
         * @return array
         */
        private function synUserTaskLogOfMode_1BySys($typeTaskInfo = [],$uids = [],$list = [],$doneList = [],$others = [],$status = self::STATUS_BEFORE_ED){
            list($subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids) = $others;
            $user_type_task_log_table_insert = [];
            $Sql = '';
            $overTime = strtotime(date('Y-m-d').' 23:59:59') + self::ONE_DAY * intval($typeTaskInfo['avail_days']);
            foreach ($uids as $uid){
                $user_type_task_info = db('user_type_task_table')->where('user_id',$uid)->where('type_task_id',$typeTaskInfo['id'])->find();
                if(empty($user_type_task_info)){
                    $userTypeTaskInsert = [
                        'user_id' => $uid,
                        'type_task_id' => $typeTaskInfo['id'],
                        'status' => $status,
                        'record' => 0,
                        'create_time' => time(),
                        'task_over_time' => empty($doneList) ? 0 : $overTime
                    ];
                    $id = db('user_type_task_table')->insertGetId($userTypeTaskInsert);
                    // 同步课前
                    foreach ($list as $key => $value){
                        array_push($user_type_task_log_table_insert,[
                            'user_id' => $uid,
                            'user_type_task_id' => $id,
                            'task_id' => $typeTaskInfo['task_id'],
                            'create_time' => time(),
                            'sub_ans' => json_encode($subAnswer),
                            'obj_ans' =>json_encode($objAnswer),
                            'sub_files' => json_encode([]),
                            'obj_files' => json_encode([]),
                            'type' => self::TASK_LEVEL_TYPE_B,
                            'teacher_id' => $teacher_id,
                            'status' => self::STATUS_ED,
                            'is_once' => self::DEFAULT_NO,
                            'is_sys' => self::DEFAULT_ED,
                            'truth_num' => 0,
                            'obj_num' => count($obj_quest_ids),
                            'total_num' => count($sub_quest_ids) + count($obj_quest_ids),
                            'done_time' => $value['done_time']
                        ]);
                    }
                }else{
                    // 若学员已经查看对应类型任务
                    $id = $user_type_task_info['id'];
                    // 获取当前用户的阶段任务
                    $levels = db('user_type_task_log_table')->where('user_type_task_id',$id)->where('type',self::TASK_LEVEL_TYPE_B)->select();
                    foreach ($levels as $level){
                        if($level['status'] == self::STATUS_ED){
                            // 若当前阶段已完成，则跳过
                            continue;
                        }
                        $Sql .= "UPDATE `{$this->prefix}user_type_task_log_table`  SET `status` = " .self::STATUS_ED. ",`sub_ans` = '" .json_encode($subAnswer). "',`obj_ans` = '" .json_encode($objAnswer). "',`sub_files` = '[]',`obj_files` = '[]',`obj_num` = ".count($obj_quest_ids).",`total_num` = ".(count($sub_quest_ids) + count($obj_quest_ids)).",`is_sys` = 1,is_once = 0  WHERE  `id`  = {$level['id']};";
                    }
                    $Sql .= "UPDATE `{$this->prefix}user_type_task_table`  SET `status` = {$status}  WHERE  `id` = {$id};";
                }
                // 同步课后
                foreach ($doneList as $key => $value){
                    $done_time = 0;
                    if($value['type'] == self::CLASS_AFTER_R){
                        // 记录题
                        $done_time = strtotime(date('Y-m-d').' 00:00:01') + self::ONE_DAY * intval($value['done_day']);
                    }
                    array_push($user_type_task_log_table_insert,[
                        'user_id' => $uid,
                        'user_type_task_id' => $id,
                        'task_id' => $typeTaskInfo['tasked_id'],
                        'create_time' => time(),
                        'teacher_id' => $teacher_id,
                        'type' => self::TASK_LEVEL_TYPE_A,
                        'status' => $key === 0 ? self::STATUS_ING : self::STATUS_NO,
                        'is_once' => self::DEFAULT_NO,
                        'is_sys' => self::DEFAULT_ED,
                        'done_time' => $done_time
                    ]);
                }
            }
            return $user_type_task_log_table_insert;
        }

        /**
         * 系统同步用户自选项目信息
         * @param array $typeTaskInfo
         * @param array $ids
         * @param array $typeTaskList
         * @param array $doneList
         * @param array $others
         * @param int   $status
         * @return array
         */
        private function synUserTaskLogOfMode_2BySys($typeTaskInfo = [],$ids = [],$typeTaskList = [],$doneList = [],$others = [],$status = self::STATUS_BEFORE_ED){
            list($subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids) = $others;
            $user_type_task_log_table_insert = [];
            $overTime = strtotime(date('Y-m-d').' 23:59:59') + self::ONE_DAY * intval($typeTaskInfo['avail_days']);
            $type = self::TASK_LEVEL_TYPE_B;
            $obj_num = count($obj_quest_ids);
            $total_num = $obj_num + count($sub_quest_ids);
            if(empty($typeTaskList)){
                $Sql = "UPDATE `{$this->prefix}user_type_task_table`  SET `status` = {$status}  WHERE  `id` in ({$ids});";
            }else{
                $Sql = "UPDATE `{$this->prefix}user_type_task_table`  SET `status` = {$status},`task_over_time` = {$overTime}  WHERE  `id` in ({$ids});";
            }
            // 课前
            $Sql .= "UPDATE `{$this->prefix}user_type_task_log_table`  SET `status` = " .self::STATUS_ED. ",`sub_ans` = '" .json_encode($subAnswer). "',`obj_ans` = '" .json_encode($objAnswer). "',`sub_files` = '[]',`obj_files` = '[]',`obj_num` = {$obj_num},`total_num` = {$total_num},`is_sys` = 1  WHERE  `user_type_task_id` in ({$ids}) AND `type` = {$type};";
            // 课后
            foreach ($typeTaskList as $taskInfo){
                foreach ($doneList as $key => $value){
                    $done_time = 0;
                    if($value['type'] == self::CLASS_AFTER_R){
                        // 记录题
                        $done_time = strtotime(date('Y-m-d').' 00:00:01') + self::ONE_DAY * intval($value['done_day']);
                    }
                    array_push($user_type_task_log_table_insert,[
                        'user_id' => $taskInfo['user_id'],
                        'user_type_task_id' => $taskInfo['id'],
                        'task_id' => $typeTaskInfo['tasked_id'],
                        'create_time' => time(),
                        'teacher_id' => $teacher_id,
                        'type' => self::TASK_LEVEL_TYPE_A,
                        'status' => $key === 0 ? self::STATUS_ING : self::STATUS_NO,
                        'is_sys' => self::DEFAULT_ED,
                        'done_time' => $done_time
                    ]);
                }
            }
            return [$Sql,$user_type_task_log_table_insert];
        }

        /**
         * 拼接系统同步的空答案
         * @param array $ques_ids
         * @return array
         * @throws \think\db\exception\DataNotFoundException
         * @throws \think\db\exception\ModelNotFoundException
         * @throws \think\exception\DbException
         */
        private function combinAnswers($ques_ids = []){
            $list = db('question')->whereIn('id',$ques_ids)->select();
            $answer = [];
            foreach ($list as $item){
                $pre_answer = [];
                $pre_answer['id'] = $item['id'];
                $pre_answer['answer'] = [];
                if($item['type'] == 2){
                    // 记录题
                    // 获取额外数据
                    $ext = unserialize($item['ext']);
                    foreach ($ext as $key => $value){
                        $pre_answer['answer'][$key] = '';
                    }
                }else{
                    $pre_answer['answer']['text'] = '';
                }
                $answer[] = $pre_answer;
            }
            return $answer;
        }

        // 每天0点执行，系统同步前一天的项目
        private function dealNoDoseTask(){
            // 1. 获取当前截止日期 等于 当前日期的 项目列表,排除家庭项目和劳动大赛
            $typeList = db('type_task_table')->where('end_date',strtotime(date('Y-m-d',strtotime('-1 day'))))->whereNotIn('type',[self::TYPE_HOME,self::TYPE_WORK])->select();
            // todo::必选项目处理 - A - start
            logs('必选项目处理开始！！！','dealNoDoseTask');
            // A1. 获取必选项目列表
            $mTypeList = searchData($typeList,'mode',self::MODE_ONE);
            // A2. 获取项目下所有用户id
            $groupUids = db('type_task_log_table')
                ->alias('ttlt')
                ->join('user_class_log ucl','ucl.class_group_id = ttlt.class_id')
                ->whereIn('ttlt.type_task_id',array_column($mTypeList,'id'))
                ->field('ttlt.type_task_id,group_concat(ucl.u_id) uids')
                ->group('ttlt.type_task_id')
                ->select();
            // A3. 循环处理
            $user_type_task_log_table_insert = [];
            db()->startTrans();
            try{
                foreach ($groupUids as $item){
                    $typeTaskId = $item['type_task_id'];
                    $typeTaskInfo = db('type_task_table')->where('id',$typeTaskId)->find();
                    // 每组下包含的所有学员id
                    $uids = $item['uids'];
                    if(empty($uids)){
                        continue;
                    }
                    $uids = explode(',',$uids);
                    // 获取当前类型任务下，所有已完成课前任务的学员信息
                    $doneUsersList = db('user_type_task_table')->where('type_task_id',$typeTaskId)->where('status','>',self::STATUS_BEFORE_N)->field('user_id')->select();
                    // $doneUsersList = db('user_type_task_table')->where('type_task_id',$typeTaskId)->field('user_id')->select();
                    // 已经自我学习学员id
                    $doneUids = array_column($doneUsersList,'user_id');
                    // 获取差集，筛选出【未查看或者未完成课前任务的学员id】
                    $uids = array_diff($uids,$doneUids);
                    if(empty($uids)){
                        continue;
                    }
                    // 判断课前任务是否包含主观题
                    $sub_quest_ids = db('task_question_log')
                        ->alias('tql')
                        ->join('question q','q.id = tql.question_id')
                        ->whereNotIn('q.type',self::OBJ_LIST)
                        ->where('tql.task_id',$typeTaskInfo['task_id'])
                        ->distinct(true)
                        ->field('q.id')
                        ->select();
                    $obj_quest_ids = db('task_question_log')
                        ->alias('tql')
                        ->join('question q','q.id = tql.question_id')
                        ->whereIn('q.type',self::OBJ_LIST)
                        ->where('tql.task_id',$typeTaskInfo['task_id'])
                        ->distinct(true)
                        ->field('q.id')
                        ->select();
                    // 获取并拼接主观题答题列表
                    $subAnswer = $this->combinAnswers(array_column($sub_quest_ids,'id'));
                    $objAnswer = $this->combinAnswers(array_column($obj_quest_ids,'id'));
                    $list = db('type_task_done_table')
                        ->where('type_task_id',$typeTaskId)
                        ->whereIn('type',[self::CLASS_BEFORE,self::CLASS_BEFORE_R])
                        ->order('done_time asc')
                        ->select();

                    $teacher_id = $this->getTeacherIdOfTypeTask($typeTaskId);
                    if(count($sub_quest_ids) > 0){
                        // 课前任务中包含主观题,则需将对应用户的【用户总类型任务状态表】状态设置为【2课前已完成】,并同步课前任务到已完成
                        $user_type_task_log_table_insert = array_merge_recursive($user_type_task_log_table_insert,$this->synUserTaskLogOfMode_1BySys($typeTaskInfo,$uids,$list,[],[$subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids]));
                    }else{
                        // 不包含主观题，则需判断当前项目是否存在课中阶段
                        //若存在课中阶段，则需将【用户总类型任务状态表】状态设置为指定状态
                        //反之，需将【用户总类型任务状态表】状态设置为【7课中已上传且课后待完成】，并同步课后任务到【用户阶段任务执行表】
                        $status = "{$typeTaskInfo['is_record']}{$typeTaskInfo['is_eval']}{$typeTaskInfo['is_upt_img']}{$typeTaskInfo['is_upt_word']}";
                        $doneList = db('type_task_done_table')
                            ->where('type_task_id',$typeTaskId)
                            ->where('task_id',$typeTaskInfo['tasked_id'])
                            ->whereIn('type',[self::CLASS_AFTER_R,self::CLASS_AFTER])
                            ->order('done_day asc')
                            ->select();
                        switch ($status){
                            case '0000':
                                // todo::不考勤、不评价、不上传图片、不上传文字，则需要将状态设置为【7课中已评价且课后待完成】状态
                                // todo::并且同步当前用户的课后任务
                                $user_type_task_log_table_insert = array_merge_recursive($user_type_task_log_table_insert,$this->synUserTaskLogOfMode_1BySys($typeTaskInfo,$uids,$list,$doneList,[$subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids],self::STATUS_EVAL_ED));
                                break;
                            case '0001':
                                // todo::不考勤、不评价、不上传图片、上传文字，则需要将状态设置为【6课中待上传】状态
                            case '0010':
                                // todo::不考勤、不评价、上传图片、不上传文字，则需要将状态设置为【6课中待上传】状态
                            case '0011':
                                // todo::不考勤、不评价、上传图片、上传文字，则需要将状态设置为【6课中待上传】状态
                                $user_type_task_log_table_insert = array_merge_recursive($user_type_task_log_table_insert,$this->synUserTaskLogOfMode_1BySys($typeTaskInfo,$uids,$list,[],[$subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids],self::STATUS_UPLOAD_N));
                                break;
                            case '0101':
                                // todo::不考勤、评价、不上传图片、上传文字，则需要将状态设置为【5课中待评价】状态
                            case '0111':
                                // todo::不考勤、评价、上传图片、上传文字，则需要将状态设置为【5课中待评价】状态
                            case '0110':
                                // todo::不考勤、评价、上传图片、不上传文字，则需要将状态设置为【5课中待评价】状态
                                $user_type_task_log_table_insert = array_merge_recursive($user_type_task_log_table_insert,$this->synUserTaskLogOfMode_1BySys($typeTaskInfo,$uids,$list,[],[$subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids],self::STATUS_EVAL_N));
                                break;
                            case '1000':
                                // todo::考勤、不评价、不上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1001':
                                // todo::考勤、不评价、不上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1011':
                                // todo::考勤、不评价、上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1010':
                                // todo::考勤、不评价、上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1111':
                                // todo::考勤、评价、上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1110':
                                // todo::考勤、评价、上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1100':
                                // todo::考勤、评价、不上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1101':
                                // todo::考勤、评价、不上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                                $user_type_task_log_table_insert = array_merge_recursive($user_type_task_log_table_insert,$this->synUserTaskLogOfMode_1BySys($typeTaskInfo,$uids,$list,[],[$subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids],$typeTaskInfo['mode'] == self::MODE_ONE ? self::STATUS_WAIT_R : self::STATUS_WAIT_SCAN));
                                break;
                            default:
                                break;
                        }
                    }
                }
                // todo::必选项目处理完成 - A - end
                logs('必选项目处理完成！！！','dealNoDoseTask');
                logs('达人项目处理开始！！！','dealNoDoseTask');
                // todo::处理自选项目 - B - start

                // B1. 获取达人项目列表
                $nTypeList = searchData($typeList,'mode',self::MODE_TWO);
                // B2. 将【用户总类型任务状态表】状态设置为【2课前已完成】
                $userTypeTaskList = db('user_type_task_table')
                    ->alias('uttt')
                    ->whereIn('uttt.type_task_id',array_column($nTypeList,'id'))
                    ->where('uttt.status',self::STATUS_BEFORE_N)
                    ->field('uttt.type_task_id,group_concat(uttt.id) ids')
                    ->group('uttt.type_task_id')
                    ->select();
                $Sql = '';
                foreach ($userTypeTaskList as $item){
                    $typeTaskId = $item['type_task_id'];
                    $typeTaskInfo = db('type_task_table')->where('id',$typeTaskId)->find();
                    // 判断课前任务是否包含主观题
                    $sub_quest_ids = db('task_question_log')
                        ->alias('tql')
                        ->join('question q','q.id = tql.question_id')
                        ->whereNotIn('q.type',self::OBJ_LIST)
                        ->where('tql.task_id',$typeTaskInfo['task_id'])
                        ->distinct(true)
                        ->field('q.id')
                        ->select();
                    $obj_quest_ids = db('task_question_log')
                        ->alias('tql')
                        ->join('question q','q.id = tql.question_id')
                        ->whereIn('q.type',self::OBJ_LIST)
                        ->where('tql.task_id',$typeTaskInfo['task_id'])
                        ->distinct(true)
                        ->field('q.id')
                        ->select();
                    // 获取并拼接主观题答题列表
                    $subAnswer = $this->combinAnswers($sub_quest_ids);
                    $objAnswer = $this->combinAnswers($obj_quest_ids);
                    if(count($sub_quest_ids) > 0){
                        list($sql,$pre_user_type_task_log_table_insert) = $this->synUserTaskLogOfMode_2BySys($typeTaskInfo,$item['ids'],[],[],[$subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids],self::STATUS_BEFORE_ED);
                        $Sql .= $sql;
                        $user_type_task_log_table_insert = array_merge_recursive($user_type_task_log_table_insert,$pre_user_type_task_log_table_insert);
                    }else{
                        // 不包含主观题，则需判断当前项目是否存在课中阶段
                        //若存在课中阶段，则需将【用户总类型任务状态表】状态设置为指定状态
                        //反之，需将【用户总类型任务状态表】状态设置为【7课中已上传且课后待完成】，并同步课后任务到【用户阶段任务执行表】
                        $status = "{$typeTaskInfo['is_record']}{$typeTaskInfo['is_eval']}{$typeTaskInfo['is_upt_img']}{$typeTaskInfo['is_upt_word']}";
                        $doneList = db('type_task_done_table')
                            ->where('type_task_id',$typeTaskId)
                            ->where('task_id',$typeTaskInfo['tasked_id'])
                            ->whereIn('type',[self::CLASS_AFTER_R,self::CLASS_AFTER])
                            ->order('done_day asc')
                            ->select();
                        $typeTaskList = db('user_type_task_table')->whereIn('id',explode(',',$item['ids']))->select();
                        switch ($status){
                            case '0000':
                                // todo::不考勤、不评价、不上传图片、不上传文字，则需要将状态设置为【7课中已评价且课后待完成】状态
                                // todo::并且同步当前用户的课后任务
                                list($sql,$pre_user_type_task_log_table_insert) = $this->synUserTaskLogOfMode_2BySys($typeTaskInfo,$item['ids'],$typeTaskList,$doneList,[$subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids],self::STATUS_EVAL_ED);
                                $Sql .= $sql;
                                $user_type_task_log_table_insert = array_merge_recursive($user_type_task_log_table_insert,$pre_user_type_task_log_table_insert);
                                break;
                            case '0001':
                                // todo::不考勤、不评价、不上传图片、上传文字，则需要将状态设置为【6课中待上传】状态
                            case '0010':
                                // todo::不考勤、不评价、上传图片、不上传文字，则需要将状态设置为【6课中待上传】状态
                            case '0011':
                                // todo::不考勤、不评价、上传图片、上传文字，则需要将状态设置为【6课中待上传】状态
                                list($sql,$pre_user_type_task_log_table_insert) = $this->synUserTaskLogOfMode_2BySys($typeTaskInfo,$item['ids'],[],[],[$subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids],self::STATUS_UPLOAD_N);
                                $Sql .= $sql;
                                $user_type_task_log_table_insert = array_merge_recursive($user_type_task_log_table_insert,$pre_user_type_task_log_table_insert);
                                break;
                            case '0101':
                                // todo::不考勤、评价、不上传图片、上传文字，则需要将状态设置为【5课中待评价】状态
                            case '0111':
                                // todo::不考勤、评价、上传图片、上传文字，则需要将状态设置为【5课中待评价】状态
                            case '0110':
                                // todo::不考勤、评价、上传图片、不上传文字，则需要将状态设置为【5课中待评价】状态
                                list($sql,$pre_user_type_task_log_table_insert) = $this->synUserTaskLogOfMode_2BySys($typeTaskInfo,$item['ids'],[],[],[$subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids],self::STATUS_EVAL_N);
                                $Sql .= $sql;
                                $user_type_task_log_table_insert = array_merge_recursive($user_type_task_log_table_insert,$pre_user_type_task_log_table_insert);
                                break;
                            case '1000':
                                // todo::考勤、不评价、不上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1001':
                                // todo::考勤、不评价、不上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1011':
                                // todo::考勤、不评价、上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1010':
                                // todo::考勤、不评价、上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1111':
                                // todo::考勤、评价、上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1110':
                                // todo::考勤、评价、上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1100':
                                // todo::考勤、评价、不上传图片、不上传文字，则需要将状态设置为【3课中待考勤】状态
                            case '1101':
                                // todo::考勤、评价、不上传图片、上传文字，则需要将状态设置为【3课中待考勤】状态
                                list($sql,$pre_user_type_task_log_table_insert) = $this->synUserTaskLogOfMode_2BySys($typeTaskInfo,$item['ids'],[],[],[$subAnswer,$objAnswer,$teacher_id,$obj_quest_ids,$sub_quest_ids],$typeTaskInfo['mode'] == self::MODE_ONE ? self::STATUS_WAIT_R : self::STATUS_WAIT_SCAN);
                                $Sql .= $sql;
                                $user_type_task_log_table_insert = array_merge_recursive($user_type_task_log_table_insert,$pre_user_type_task_log_table_insert);
                                break;
                            default:
                                break;
                        }
                    }
                }
                // todo::自选项目处理完成 - B - end
                logs('达人项目处理完成！！！','dealNoDoseTask');
                if(!empty($user_type_task_log_table_insert)){
                    db('user_type_task_log_table')->insertAll($user_type_task_log_table_insert);
                }
                if(!empty($Sql)){
                    db()->execute($Sql);
                }
                db()->commit();
                logs('同步完成！！！','dealNoDoseTask');
            }catch (Exception $exception){
                db()->rollback();
                logs('同步失败！！！','dealNoDoseTask');
            }
        }
	
	    public function dayCorn(){
            $this->dealNoDoseTask();
        }

        public function monthCorn(){

        }

        public function yearCorn(){

        }
    }