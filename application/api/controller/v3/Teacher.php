<?php
/**
 *  轻任务发布 - v3
 *  Encoding : UTF-8
 *  Separator : Unix and OS X (\n)
 *  File Name : Task.php
 *  Create Date : 2022/10/23 10:32
 *  Version : 0.1
 *  Copyright : skylong Project Team Copyright (C)
 *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
 */
namespace app\api\controller\v3;
use app\common\controller\WeChatFactory;
use think\Exception;

class Teacher extends WeChatFactory {

    private $info   = [];
    private $openid = '';
    private $type = 1;
    private $webUrl = '';
    public function initialize() {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->openid = $this->request->param('openid');
        $this->webUrl = config('sys_data.web_site');
        $this->type = $this->request->param('type',self::TEACHER_SCHOOL);
        // var_dump($this->request);
        //
        $info         = db('teacher')->where("openid = '{$this->openid}' and type = {$this->type}")->find();
        printLog([
            'openid'=>$this->openid,
            'info'=>$info,
            'type'=>$this->type,
        ]);
        if (!empty($info)) {
            $this->info        = $info;
        }
    }

    // 查看轻任务列表
    public function pubList(){
        $page  = $this->request->param('page', 1);
        $limit = $this->request->param('limit', 10);

        $list = db('type_task_table')
            ->alias('ttt')
            ->join('task t','t.id = ttt.tasked_id')
            ->join("task_index ti",'ti.task_id = t.id','left')
            ->join("subject su",'su.id = ti.subject_id','left')
            ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
            ->where('ttt.type',self::TYPE_SOFT)
            ->where('ttt.admin_id',$this->info['id'])
            ->where('ttlt.is_cancel',self::DEFAULT_NO)
            ->limit(($page-1)*$limit,$limit)
            ->field("t.id task_id,ttt.id,ttt.`mode`,if(instr(t.image,'http')>0,t.image,concat('{$this->webUrl}',t.image)) image,t.`name`,su.`name` subject_name,ti.`level`,if(ti.level is null,\"无\",if(ti.`level` = 1,\"A\",if(ti.`level` = 2,\"B\",\"C\"))) level_name,t.`desc`,t.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.status")
            ->select();

        $total = db('type_task_table')
            ->alias('ttt')
            ->join('type_task_log_table ttlt','ttt.id = ttlt.type_task_id')
            ->where('ttt.type',self::TYPE_SOFT)
            ->where('ttt.admin_id',$this->info['id'])
            ->where('ttlt.is_cancel',self::DEFAULT_NO)
            ->count();
        return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
    }

    // 将轻任务状态设置为已发布，并同步类型任务到用户
    public function pubTask(){
        $taskId = $this->request->param('id',0); // 轻任务id
        $res = db('type_task_table')->where('id',$taskId)->update(['status' => self::STATE_OPEN]);
        if($res !== false){
            $class_id = db('type_task_log_table')->where('type_task_id',$taskId)->value('class_id');
            $this->sysSoftTask($taskId,$class_id);
            return $this->returnJson([],'发布成功',1);
        }
        return $this->returnJson([],'发布失败');
    }

    // 发布页信息【包括教师班级信息，及当前轻任务信息【若轻任务id存在，此接口为详情】】
    public function pubTaskPage(){
        // error_log(var_export([1,2],true),3,'log.txt');
        $taskId = $this->request->param('id',0); // 轻任务id
        $teacherId = $this->request->param('teacher_id',0); // 轻任务id
        $schoolData = db('teacher t')
            ->field("t.school_id,t.class_id,tas.id,tas.name,tas.image,tas.desc depict,tas.name,tas.type,tas.type
                ,if(tea.teacher_id = {$teacherId},1,0) done_type")
            ->join('subject_version ve','ve.school_id = t.school_id')
            ->join('class_group cla','cla.id = t.class_id')
            ->join('task_index tai','ve.id = tai.version_id')
            ->join('class_group claa','claa.grade_id = tai.grade_id')
            ->join('task tas','tas.id = tai.task_id')
            ->join('teacher_task_succ tea','tea.task_id = tas.id','left')
            ->join('task_index taii','cla.grade_id = taii.grade_id')
            ->group('tas.id')
            ->where(['t.id'=>$teacherId])
            ->where(['tas.state'=>1])
            ->where(['tas.is_fade'=>0])
            ->order('done_type desc,tas.id desc')
            ->select();

        $classInfo = []; // 班级信息
        $taskInfo = []; // 轻任务信息
        if(!empty($this->info['class_id'])){
            $classInfo = db('class_group')->where('id',$this->info['class_id'])->field('id,`name` class_name')->find();
        }
        // var_dump($taskInfo);
        if(!empty($taskId)){
            $taskInfo = db('type_task_table')->where('id',$taskId)->find();
            $taskInfo['task_done_list'] = db('type_task_done_table')->where('type_task_id',$taskId)->field('id,type_task_id,type,task_id,done_time,done_day')->select();
            $taskInfo['task_log_list'] = db('type_task_log_table')->where('type_task_id',$taskId)->field('id,type_task_id,class_id,teacher_id')->find();
            $taskInfo['task'] = db('task')->alias('t')->where('t.id',$taskInfo['tasked_id'])->field('t.`desc`,t.id task_id,t.name,if(t.image is null,"",if(instr(t.image,"http") > 0,t.image,concat("'.$this->webUrl.'",t.image))) task_image,t.desc task_desc')->find();
        }
        $columnData = [];
        $columns = [];
        $columns[0] = db('subject')
            ->alias('t')
            ->field("t.id,t.name")
            ->where('t.state',1)
            ->order('t.id desc')
            ->select();
        $columns[1] = db('subject_version t')
            ->field("t.id,t.name")
            ->where(['t.state'=>1,'t.subject_id'=>$columns[0][0]['id']])
            ->order('t.id desc')
            ->select();
        // var_dump($columns);
        // $currentTime = time()*1000;
        // $today = date('Y-m-d',time());
        // return $this->returnJson(compact('classInfo','taskInfo','columns','columnData','schoolData','currentTime','today'),'获取成功',1);
        foreach ($columns[0] as $k => $item){
            $columnData[] = db('subject_version s')
                ->field("s.id,s.name")
                ->where(['s.state'=>1,'s.subject_id'=>$item['id']])
                ->order('s.id desc')
                ->select();
        }
        $currentTime = time()*1000;
        $today = date('Y-m-d',time());
        return $this->returnJson(compact('classInfo','taskInfo','columns','columnData','schoolData','currentTime','today'),'获取成功',1);
    }

    public function configs(){
        // db('')
    }

    // 任务列表【用于选取课后任务】
    public function taskList(){
        $page  = $this->request->param('page', 1);
        $limit = $this->request->param('limit', 10);
        $where = [];
        // todo::当前列表只显示未被隐藏的任务
        $where[] = ['t.is_fade','=',0];
        $type = $this->request->param('type','');
        if($type !== ''){
            $where[] = ['t.type','=',$type];
        }
        $state = $this->request->param('state','');
        if($state !== ''){
            $where[] = ['t.state','=',$state];
        }
        $subject_id = $this->request->param('subject_id','');
        if(!empty($subject_id)){
            $where[] = ['ti.subject_id','=',$subject_id];
        }
        $version_id = $this->request->param('version_id','');
        if(!empty($version_id)){
            $where[] = ['ti.version_id','=',$version_id];
        }
        $project_id = $this->request->param('project_id','');
        if(!empty($project_id)){
            $where[] = ['ti.project_id','=',$project_id];
        }
        $course_index = $this->request->param('course_index','');
        if(!empty($course_index)){
            $course_index_id = get_course_index_id($course_index);
            if($course_index_id == 0){
                $where[] = ['t.course_index_id','=',$course_index];
            }else{
                $where[] = ['t.course_index_id','=',$course_index_id];
                $where[] = ['t.sub_course_index_id','=',$course_index];
            }
        }
        if($type == 0){
            $page_num_start = $this->request->param('page_num_start','');
            $page_num_end = $this->request->param('page_num_end','');
            if($page_num_start != 0 && $page_num_end != 0){
                $where[] = ['ti.page_num_start','>=',$page_num_start];
                $where[] = ['ti.page_num_end','<=',$page_num_end];
            }elseif ($page_num_start != 0 && $page_num_end == 0){
                $where[] = ['ti.page_num_start','>=',$page_num_start];
                $where[] = ['ti.page_num_end','<=',$page_num_start];
            }elseif($page_num_start == 0 && $page_num_end != 0){
                $where[] = ['ti.page_num_start','>=',$page_num_end];
                $where[] = ['ti.page_num_end','<=',$page_num_end];
            }
            $level = $this->request->param('level','');
            if(!empty($level)){
                $where[] = ['ti.level','=',$level];
            }
        }
        $name = $this->request->param('name','');
        if(!empty($name)){
            $where[] = ['t.name','like',"%{$name}%"];
        }

        $list = db('task')
            ->alias('t')
            ->join("admin a",'t.admin_id = a.id','left')
            ->join("task_index ti",'ti.task_id = t.id','left')
            ->join("subject su",'ti.subject_id = su.id','left')
            ->join("subject_version ve",'ti.version_id = ve.id','left')
            ->join('course_index sub','t.sub_course_index_id = sub.id','left')
            ->field("t.id,t.admin_id,concat('{$this->webUrl}',t.image) image,t.type,t.name,t.state,a.name admin_name,sub.`name` sub_name,t.times,FROM_UNIXTIME(t.create_time,'%Y-%m-%d') create_time,ti.level,su.name subject_name,ve.name version_name")
            ->where($where)
            ->limit(($page-1)*$limit,$limit)
            ->order('t.id desc')
            ->select();
        $total = db('task')
            ->alias('t')
            ->join("task_index ti",'ti.task_id = t.id','left')
            ->where($where)
            ->field("t.id")
            ->count();
        return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'查询成功',1);
    }


    // 任务列表【用于选取课后任务】新
    public function newTaskList(){
        $page  = $this->request->param('page', 1);
        $limit = $this->request->param('limit', 10);
        $where = [];
        // todo::当前列表只显示未被隐藏的任务
        $where[] = ['t.is_fade','=',0];
        $type = $this->request->param('type','');
        if($type !== ''){
            $where[] = ['t.type','=',$type];
        }
        $state = $this->request->param('state','');
        if($state !== ''){
            $where[] = ['t.state','=',$state];
        }
        $subject_id = $this->request->param('subject_id','');
        if(!empty($subject_id)){
            $where[] = ['ti.subject_id','=',$subject_id];
        }
        $version_id = $this->request->param('version_id','');
        if(!empty($version_id)){
            $where[] = ['ti.version_id','=',$version_id];
        }
        $project_id = $this->request->param('project_id','');
        if(!empty($project_id)){
            $where[] = ['ti.project_id','=',$project_id];
        }
        $course_index = $this->request->param('course_index','');
        if(!empty($course_index)){
            $course_index_id = get_course_index_id($course_index);
            if($course_index_id == 0){
                $where[] = ['t.course_index_id','=',$course_index];
            }else{
                $where[] = ['t.course_index_id','=',$course_index_id];
                $where[] = ['t.sub_course_index_id','=',$course_index];
            }
        }
        if($type == 0){
            $page_num_start = $this->request->param('page_num_start','');
            $page_num_end = $this->request->param('page_num_end','');
            if($page_num_start != 0 && $page_num_end != 0){
                $where[] = ['ti.page_num_start','>=',$page_num_start];
                $where[] = ['ti.page_num_end','<=',$page_num_end];
            }elseif ($page_num_start != 0 && $page_num_end == 0){
                $where[] = ['ti.page_num_start','>=',$page_num_start];
                $where[] = ['ti.page_num_end','<=',$page_num_start];
            }elseif($page_num_start == 0 && $page_num_end != 0){
                $where[] = ['ti.page_num_start','>=',$page_num_end];
                $where[] = ['ti.page_num_end','<=',$page_num_end];
            }
            $level = $this->request->param('level','');
            if(!empty($level)){
                $where[] = ['ti.level','=',$level];
            }
        }
        $name = $this->request->param('name','');
        if(!empty($name)){
            $where[] = ['t.name','like',"%{$name}%"];
        }

        $list = db('task')
            ->alias('t')
            ->join("task_index ti",'ti.task_id = t.id','left')
            ->join("subject su",'ti.subject_id = su.id','left')
            ->join("subject_version ve",'ti.version_id = ve.id','left')
            ->join('course_index sub','t.sub_course_index_id = sub.id','left')
            ->field("t.id,t.admin_id,t.type,t.image,t.desc depict,t.name,t.state,sub.`name` sub_name,t.times,FROM_UNIXTIME(t.create_time,'%Y-%m-%d') create_time,ti.level,su.name subject_name,ve.name version_name")
            ->where($where)
            ->order('t.id desc')
            ->select();
        $total = db('task')
            ->alias('t')
            ->join("task_index ti",'ti.task_id = t.id','left')
            ->where($where)
            ->field("t.id")
            ->count();
        return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'查询成功',1);
    }




    // 轻任务保存【且发布】【根据参数status判断当前轻任务是否保存发布且同步.为0时，说明只保存；为1时，说明既保存又同步到班级用户】
    public function insertTask(){

        $class_id = $this->request->param('class_id',$this->info['class_id']);
        if(empty($class_id)){
            return $this->returnJson([],'您未绑定班级，不可以发布任务哈');
        }
        $image = $this->request->param('image','');
        if(empty($image)){
            return $this->returnJson([],'请上传封面');
        }
        $title = $this->request->param('title','');
        if(empty($title)){
            return $this->returnJson([],'标题不能为空');
        }
        $depict = $this->request->param('depict','');
        if(empty($depict)){
            return $this->returnJson([],'描述不能为空');
        }
        $start_date = $this->request->param('start_date','');

        $content = $this->request->param('content','');
        $avail_days = $this->request->param('avail_days',0);
        $tasked_id = $this->request->param('tasked_id',0);
        $status = $this->request->param('status',0);

        $edit_tasking = $this->request->param('edit_tasking',0);
        $is_record = $this->request->param('is_record',1);
        $is_eval = $this->request->param('is_eval',1);
        $is_upt_img = $this->request->param('is_upt_img',1);
        $is_upt_word = $this->request->param('is_upt_word',1);
        $task_list = $this->request->param('task_list',[]);
        $difficulty_points = $this->request->param('difficulty_points',1);

        $insert = [
            'mode' => self::MODE_ONE,
            'type' => self::TYPE_SOFT,
            'image' => $image,
            'title' => $title,
            'depict' => $depict,
            'content' => $content,
            'picword' => $content,
            'start_date' => strtotime($start_date),
            'tasked_id' => $tasked_id,
            'edit_tasking' => $edit_tasking,
            'is_record' => $edit_tasking == 0?1:$is_record,
            'is_eval' => $edit_tasking == 0?1:$is_eval,
            'is_upt_img' => $edit_tasking == 0?1:$is_upt_img,
            'is_upt_word' => $edit_tasking == 0?1:$is_upt_word,
            'create_time' => time(),
            'difficulty_points' => $difficulty_points,
            'status' => $status,
            'avail_days' => $avail_days,
            'admin_id' => $this->info['id']
        ];

        //return json($insert);
        //卜阳查找已发布表是否包含数据，有就跳过，没有就添加


        db()->startTrans();
        $s_r = db('teacher_task_succ')->where(['task_id'=>$tasked_id,'teacher_id'=>$this->info['id'],'class_id'=>$class_id])->find();
        $type_task_id = db('type_task_table')->insertGetId($insert);
        $logDatas = [];
        if(!$s_r){
            db('teacher_task_succ')->insert(['task_id'=>$tasked_id,'teacher_id'=>$this->info['id'],'class_id'=>$class_id,'create_time'=>time()]);
        }
        array_push($logDatas,[
            'type_task_id' => $type_task_id,
            'class_id' => $class_id,
            'teacher_id' => $this->info['id']
        ]);
        $datas = [];
        foreach ($task_list as $item){
            if(!isset($item['type'])){ $item['type'] = 1; }
            array_push($datas,[
                'type_task_id' => $type_task_id,
                'type' => '2'.($item['done_time'] == 0?0:1),
//                    'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                'task_id' => $item['task_id'],
                //非记录题
                'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                //记录题
                'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
            ]);
        }

        // 关联执行关系
        $res_1 = db('type_task_done_table')->insertAll($datas);
        // 关联索引
        $res_2 = db('type_task_log_table')->insertAll($logDatas);
        if($res_1 !== false && $res_2 !== false){
            $this->sysSoftTask($type_task_id,$class_id,$status);
            db()->commit();
            return $this->returnJson([],'操作成功',1);
        }

        try{
            $type_task_id = db('type_task_table')->insertGetId($insert);

            $logDatas = [];
            array_push($logDatas,[
                'type_task_id' => $type_task_id,
                'class_id' => $class_id,
                'teacher_id' => $this->info['id']
            ]);
            $datas = [];
            foreach ($task_list as $item){
                if(!isset($item['type'])){ $item['type'] = 1; }
                array_push($datas,[
                    'type_task_id' => $type_task_id,
                    'type' => intval($item['type'].($item['done_time'] == 0?0:1)),
                    'task_id' => $item['task_id'],
                    //非记录题
                    'done_time' => $item['type'] == 1 && $item['done_time'] != 0?strtotime($item['done_time']):0,
                    //记录题
                    'done_day' => $item['type'] == 2 && $item['done_time'] != 0?$item['done_time']:0
                ]);
            }

            // 关联执行关系
            $res_1 = db('type_task_done_table')->insertAll($datas);
            // 关联索引
            $res_2 = db('type_task_log_table')->insertAll($logDatas);
            if($res_1 !== false && $res_2 !== false){
                $this->sysSoftTask($type_task_id,$class_id,$status);
                db()->commit();
                return $this->returnJson([],'操作成功',1);
            }
            db()->rollback();
            return $this->returnJson([],'操作失败11');
        }catch (Exception $exception){
            db()->rollback();
            return $this->returnJson([],'操作失败:'.$exception->getMessage());
        }
    }

    // ************* todo:: 以下 将轻任务 的 待考勤、待打卡、待评价、待上传 等接口单独处理 - start **********************//
    // ************* todo:: 批量操作接口 依旧使用原接口 *****************************************************//

    // 轻任务待考勤
    public function waitRecord(){
        $page  = $this->request->param('page', 1);
        $limit = $this->request->param('limit', 10);
        printLog($this->info);
        $list = db('type_task_table')
            ->alias('ttt')
            ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
            ->join('task t','t.id = ttt.tasked_id')
            ->where('uttt.status',self::STATUS_WAIT_R)
            ->where('ttt.status',self::STATE_OPEN)
            ->where('ttt.admin_id',$this->info['id'])
            ->distinct(true)
            ->limit(($page-1)*$limit,$limit)
            ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.avail_days,ttt.is_eval,ttt.is_upt_img,ttt.is_upt_word")
            ->select();
        $total = count(db('type_task_table')
            ->alias('ttt')
            ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
            ->join('task t','t.id = ttt.tasked_id')
            ->where('uttt.status',self::STATUS_WAIT_R)
            ->where('ttt.status',self::STATE_OPEN)
            ->where('ttt.admin_id',$this->info['id'])
            ->distinct(true)
            ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.avail_days")
            ->select());

        $total1 = db('type_task_table')
            ->alias('ttt')
            ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
            ->join('user_type_task_log_table uttlt','uttt.id = uttlt.user_type_task_id')
            ->join('task t','t.id = uttlt.task_id')
            ->where("uttlt.teacher_id = {$this->info['id']} and uttlt.is_admin = 0")
            ->where('uttt.status',self::STATUS_WAIT_R)
            ->where('uttlt.type',self::TASK_LEVEL_TYPE_B)
            ->where('ttt.status',self::STATE_OPEN)
            ->distinct(true)
            ->limit(($page-1)*$limit,$limit)
            ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,FROM_UNIXTIME(ttt.end_date,\"%Y-%m-%d\") end_date,ttt.difficulty_points,ttt.avail_days,ttt.is_eval,ttt.is_upt_img,ttt.is_upt_word")
            ->select();
        $data_number = [count($total1),$total];
        printLog($list);
        return $this->returnJson(['list'=>$list,'currentPage' => $page,'data_number'=>$data_number,'totalPage' => ceil($total/$limit)],'获取成功',1);
    }

    // 轻任务待打卡
    public function waitScan(){
        $page  = $this->request->param('page', 1);
        $limit = $this->request->param('limit', 10);

        $list = db('type_task_table')
            ->alias('ttt')
            ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
            ->join('task t','t.id = ttt.tasked_id')
            ->where('uttt.status',self::STATUS_WAIT_SCAN)
            ->where('ttt.status',self::STATE_OPEN)
            ->where('ttt.admin_id',$this->info['id'])
            ->distinct(true)
            ->limit(($page-1)*$limit,$limit)
            ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.avail_days")
            ->select();
        $total = db('type_task_table')
            ->alias('ttt')
            ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
            ->join('task t','t.id = ttt.tasked_id')
            ->where('uttt.status',self::STATUS_WAIT_SCAN)
            ->where('ttt.status',self::STATE_OPEN)
            ->where('ttt.admin_id',$this->info['id'])
            ->distinct(true)
            ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.avail_days")
            ->count();

        return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
    }

    // 轻任务待评价
    public function waitEval(){
        $page  = $this->request->param('page', 1);
        $limit = $this->request->param('limit', 10);

        $list = db('type_task_table')
            ->alias('ttt')
            ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
            ->join('task t','t.id = ttt.tasked_id')
            ->where('uttt.status',self::STATUS_EVAL_N)
            ->where('ttt.status',self::STATE_OPEN)
            ->where('ttt.admin_id',$this->info['id'])
            ->distinct(true)
            ->limit(($page-1)*$limit,$limit)
            ->field("ttt.id,ttt.image,ttt.is_upt_word,ttt.is_upt_img,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.avail_days")
            ->select();
        $total = db('type_task_table')
            ->alias('ttt')
            ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
            ->join('task t','t.id = ttt.tasked_id')
            ->where('uttt.status',self::STATUS_EVAL_N)
            ->where('ttt.status',self::STATE_OPEN)
            ->where('ttt.admin_id',$this->info['id'])
            ->distinct(true)
            ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.avail_days")
            ->count();

        return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
    }

    // 轻任务待上传
    public function waitUpt(){
        $page  = $this->request->param('page', 1);
        $limit = $this->request->param('limit', 10);

        $list = db('type_task_table')
            ->alias('ttt')
            ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
            ->join('task t','t.id = ttt.tasked_id')
            ->where('uttt.status',self::STATUS_UPLOAD_N)
            ->where('ttt.status',self::STATE_OPEN)
            ->where('ttt.admin_id',$this->info['id'])
            ->distinct(true)
            ->limit(($page-1)*$limit,$limit)
            ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.avail_days")
            ->select();
        $total = db('type_task_table')
            ->alias('ttt')
            ->join('user_type_task_table uttt','ttt.id = uttt.type_task_id')
            ->join('task t','t.id = ttt.tasked_id')
            ->where('uttt.status',self::STATUS_UPLOAD_N)
            ->where('ttt.status',self::STATE_OPEN)
            ->where('ttt.admin_id',$this->info['id'])
            ->distinct(true)
            ->field("ttt.id,ttt.image,ttt.content,concat('{$this->webUrl}',ttt.image) image,ttt.title,ttt.depict,concat('{$this->webUrl}',t.image) task_image,t.`name` task_name,t.`desc` task_desc,ttt.mode,ttt.type,FROM_UNIXTIME(ttt.start_date,\"%Y-%m-%d\") start_date,ttt.difficulty_points,ttt.avail_days")
            ->count();

        return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
    }

    // ****************************** end ***********************************//

    /*
     * 同步轻任务到班级用户
     * $type_task_id：类型任务id
     * $class_id: 班级id
     * $status: 轻任务状态
     */
    private function sysSoftTask($type_task_id = 0,$class_id = 0,$status = 1){
        if($status === 0){
            // 未发布，则不同步
            return false;
        }
        // 获取班级用户
        $u_ids = db('user_class_log')->where('class_group_id',$class_id)->column('u_id');
        $typeTasks = [];
        foreach ($u_ids as $uid){
            array_push($typeTasks,[
                'user_id' => $uid,
                'type_task_id' => $type_task_id,
                'status' => self::STATUS_WAIT_R,
                'create_time' => time()
            ]);
        }
        db('user_type_task_table')->insertAll($typeTasks);
        return true;
    }


    // 数据统计
    public function censusList(){
        $page  = $this->request->param('page', 1);
        $limit = $this->request->param('limit', 10);
        if($this->type == 1){
            $teacher_type = 'ttlt.teacher_id';
        }else{
            $teacher_type = 'ttlt.base_teacher_id';
        }
        $list = db('type_task_table')
            ->alias('ttt')
            ->join('task t','t.id = ttt.tasked_id')
            ->join('type_task_log_table ttlt','ttlt.type_task_id = ttt.id')
            ->where($teacher_type,$this->info['id'])
            ->where('ttlt.is_cancel',self::DEFAULT_NO)
            ->limit(($page-1)*$limit,$limit)
            ->field("ttt.id,ttt.type,ttt.title")
            ->select();
        if(!empty($list)){
            foreach ($list as $k => $item){
                $list[$k]['total'] = db('user_type_task_table uttt')->where('uttt.type_task_id',$item['id'])->count();
                // 0 不可以做分母，因此必须有默认值
                $list[$k]['total']||$list[$k]['total']=3;
                $list[$k]['succ_total'] = db('user_type_task_table uttt')->where('uttt.type_task_id',$item['id'])->where('uttt.status',9)->count();
                $list[$k]['percentage'] = 100*(round($list[$k]['succ_total']/$list[$k]['total'],2));
            }
        }

        $total = db('type_task_table')
            ->alias('ttt')
            ->join('task t','t.id = ttt.tasked_id')
            ->join('type_task_log_table ttlt','ttlt.type_task_id = ttt.id')
            ->where($teacher_type,$this->info['id'])
            ->where('ttlt.is_cancel',self::DEFAULT_NO)
            ->field("ttt.id,ttt.title")
            ->count();
        return $this->returnJson(['list'=>$list,'currentPage' => $page,'totalPage' => ceil($total/$limit)],'获取成功',1);
    }

    // 数据统计详情
    public function censusDetail(){
        $task_id  = $this->request->param('task_id');
        $list = db('user_type_task_table')
            ->alias('uttt')
            ->join('user u','u.id = uttt.user_id')
            ->where('uttt.type_task_id',$task_id)
            ->field("u.avatar,u.sex,u.name username,u.nickname,uttt.status")
            ->select();
        return $this->returnJson(['list'=>$list],'获取成功',1);
    }

}