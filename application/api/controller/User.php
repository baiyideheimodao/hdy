<?php
    /**
     *  用户类
     *  Encoding : UTF-8
     *  Separator : Unix and OS X (\n)
     *  File Name : User.php
     *  Create Date : 2022/1/8 20:04
     *  Version : 0.1
     *  Copyright : skylong Project Team Copyright (C)
     *  license http://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh
     */
    namespace app\api\controller;
    use app\common\controller\WeChatFactory;
    use app\common\model\UserWeekRate;

    class User extends WeChatFactory {
        private $u_id = 0;

        public function initialize() {
            parent::initialize(); // TODO: Change the autogenerated stub
            $info = db('user')->where("openid = '{$this->request->param('openid')}'")->find();
            if(!empty($info)){
                $this->u_id = $info['id'];
                (new UserWeekRate())->addOrUpt($this->u_id);
            }
        }

        // 站内信
        public function message(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            $msgCount = db('message')->where("u_id = {$this->u_id} and state = {$this->status['ZEROSTATUS']}")->count();
            return $this->returnJson(compact('msgCount'),'获取成功',1);
        }

        // 站内信列表
        public function messageList(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            $page = $this->request->param('page',0);
            $state = $this->request->param('state',0);
            $limit = config('paginate.list_rows');
            $list = db('message')->where("u_id = {$this->u_id} and state={$state}")->order("id desc")->field('id,type,title,content,state,FROM_UNIXTIME(create_time, "%m/%d") as create_time')->limit($page*$limit,$limit)->select();
            $total = db('message')->where("u_id = {$this->u_id} and state={$state}")->count();
            return $this->returnJson(compact('list','total','page'),'获取成功',1);
        }

        // 收到的资料
        public function fileList(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            $page = $this->request->param('page',0);
            $limit = $this->request->param('pagenum',8);
            $file_index = $this->request->param('file_index',0);
            if($file_index==0){
                $where = "log.u_id = {$this->u_id} and file.state = 1";
            }else{
                $where = "log.u_id = {$this->u_id} and file.state = 1 and log.collection={$file_index}";
            }
            $list = db('filemanage_log log')
                ->field('file.id,file.name,file.image,file.file_url,file.desc,log.collection,log.id logid,FROM_UNIXTIME(log.create_time, "%m/%d") as create_time')
                ->join("filemanage file",'log.filemanage_id = file.id','left')
                ->limit($page*$limit,$limit)
                ->where($where)
                ->order("log.id desc")
                ->select();
            foreach ($list as $k => $item){
                $list[$k]['image'] = config('sys_data.web_site').$item['image'];
                $list[$k]['file_url'] = $item['file_url'];
                $list[$k]['collection'] = $item['collection'] == 1 ? true : false ;
            }
            $total = db('filemanage_log log')
                ->field('log.*')
                ->join("filemanage file",'log.filemanage_id = file.id','left')
                ->where($where)
                ->count();
            return $this->returnJson(compact('list','total','page'),'获取成功',1);
        }
        // 收到的资料,资料收藏
        public function fileListCol(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            $id = $this->request->param('id',0);
            $collect = $this->request->param('collect') == 'true' ? 1 : 0 ;
            $list = db('filemanage_log log')
                ->data(['log.collection' => $collect])
                ->where("log.u_id = {$this->u_id}  and log.id = $id")
                ->update();
            if($list){
                return $this->returnJson([],'操作成功',1);
            }else{
                return $this->returnJson([],'网络异常，稍后再试',0);
            }
        }

        // 站内信读取
        public function read_message(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            $id = $this->request->param('id',0);
            db('message')->where("id = {$id}")->update(['state'=>$this->status['NORMAL']]);
            return $this->returnJson([],'操作成功',1);
        }

    // 修改个人信息
    public function changeInfo()
    {
        list($isLogin,$error) = $this->checkLogin();
        if(!$isLogin){
            return $error;
        }
        // name,sex,phone,area_id
        $name = $this->request->param('name', '');
        $nickname = $this->request->param('nickname', '');
        $sex = $this->request->param('sex', 0);
        $phone = $this->request->param('phone', '');
        $area_id = $this->request->param('area_id', 0);
        $grade_id = $this->request->param('grade_id', 0);
        $avatar = $this->request->param('avatar', '');
        $update = [];
        $update['avatar'] = $avatar;
        if (!empty($nickname)) {
            $update['nickname'] = trim($nickname);
        }
        if (!empty($name)) {
            $update['name'] = trim($name);
        }
        if (!empty($sex)) {
            $update['sex'] = trim($sex);
        }
        if (!empty($phone)) {
            $update['phone'] = trim($phone);
        }
        if (!empty($area_id)) {
            $update['area_id'] = trim($area_id);
        }
        if (!empty($grade_id)) {
            $update['grade_id'] = trim($grade_id);
        }
        if (empty($update)) {
            return $this->returnJson([], '修改成功', 1);
        }
        $res = db('user')->where("id = {$this->u_id}")->update($update);
        if ($res !== false) {
            $userInfo = db('user u')
                ->field('u.id,u.openid,u.phone,u.nickname,u.name,u.sex,u.area_id,u.points,u.grade_id,u.create_time,u.avatar,u.state,a.name as area_name,n.name as grade_name')
                ->join('area a','a.id=u.area_id')
                ->join('grade n','u.grade_id=n.id')
                ->where('u.id',$this->u_id)
                ->find();
            $userInfo['class_name'] = db('user_class_log u')
                ->join('class_group g','g.id=u.class_group_id')
                ->where('u.u_id',$this->u_id)
                ->value('g.name');
            return $this->returnJson($userInfo, '修改成功', 1);
        }
        return $this->returnJson([], '修改失败');
    }

        // 积分变动记录
        public function point(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            $page = $this->request->param('page',0);
            $limit = config('paginate.list_rows');
            $list = db('user_point_log')
                ->where("u_id = {$this->u_id}")
                ->order("id desc")
                ->field("id,num,`desc`,type,FROM_UNIXTIME(create_time) create_time")
                ->limit($page*$limit,$limit)
                ->select();
            $total = db('user_point_log')
                ->where("u_id = {$this->u_id}")
                ->count();
            return $this->returnJson(compact('list','total','page'),'获取成功',1);
        }

        // 我的群组
        public function groups(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            // 获取当前用户所在群组
            $list = db('user_group_log')->alias('ugl')->join('group_group gg','gg.id = ugl.group_group_id')->where("ugl.u_id = {$this->u_id} and gg.state = {$this->status['NORMAL']}")->field('ugl.group_group_id id,gg.name')->select();
            foreach ($list as $key => $item){
                $list[$key]['users'] = db('user')->alias('u')->join("user_group_log ugl",'ugl.u_id = u.id')->where("ugl.group_group_id = {$item['id']}")->field('u.*')->select();
            }
            return $this->returnJson(compact('list'),'获取成功',1);
        }

        // 组内成员完成率排名
        public function group_sort(){
            list($isLogin,$error) = $this->checkLogin();
            if(!$isLogin){
                return $error;
            }
            // 获取当前用户所在群组
            $list = db('user_group_log')->alias('ugl')->join('group_group gg','gg.id = ugl.group_group_id')->where("ugl.u_id = {$this->u_id} and gg.state = {$this->status['NORMAL']}")->field('ugl.group_group_id id,gg.name')->select();
            $weeks = get_week();
            $week_start_date = strtotime(current($weeks)['date'].' 00:00:00');
            $week_end_date = strtotime(end($weeks)['date'].' 23:59:59');
            foreach ($list as $key => $item){
                $list[$key]['sorts'] = db('user')
                    ->alias('u')
                    ->join("user_group_log ugl",'ugl.u_id = u.id')
                    ->join('user_week_rate uwr',"u.id = uwr.u_id and uwr.week_start_date >= {$week_start_date} and uwr.week_end_date <= {$week_end_date}",'left')
                    ->field("u.id,u.nickname,u.name,ifnull(uwr.rate,0) rate,if(u.id={$this->u_id},1,0) is_me,u.avatar")
                    ->where("ugl.group_group_id = {$item['id']}")
                    ->order('rate desc')
                    ->select();
            }
            return $this->returnJson(compact('list'),'获取成功',1);
        }

        /**
         * 检查用户是否登录
         * @return array
         */
        private function checkLogin(){
            if(intval($this->u_id) <= 0){
                return [false,$this->returnJson([],'用户不存在')];
            }
            return [true,[]];
        }
    }