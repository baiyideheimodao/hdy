<?php

namespace app\ajax\controller;

use app\common\controller\WeChatFactory;
use Error;
use think\Db;
use think\facade\Session;
use think\Controller;
use think\facade\Log;

class Comm extends WeChatFactory
{

    private $info   = [];
    private $openid = '';
    private $type = 1;
    private $webUrl = '';

    public function initialize() {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->openid = $this->request->param('openid');
        $this->webUrl = config('sys_data.web_site');
        printLog($this->webUrl);
        $this->type = $this->request->param('type',self::TEACHER_SCHOOL);
        $info         = db('teacher')->where("openid = '{$this->openid}' and type = {$this->type}")->find();
        if (!empty($info)) {
            $this->info        = $info;
        }
    }

    public function getQueue(){
        $params = $this->request->get();
        $list = db('user_enroll')->select();
        var_dump($list);
    }

    //商品分类
    public function productSort()
    {
        $res['top'] = db('menu')->order('id asc')->where('pid',0)->select();
        $res['re'] =  db('menu')->order('pid asc')->where([['pid','<>',0],['image','=','']])->select();
        $res['do'] =  db('menu')->order('pid asc')->where([['pid','<>',0],['image','<>','']])->select();
        foreach ($res['do'] as $k => $val) {
            $res['do'][$k]['image'] = xtsz(1).$val['image'];
        }
        if ($res) {
            $data = ['code' => 100, 'msg' => '获取成功', 'data' => $res];
        } else {
            $data = ['code' => 0, 'msg' => '获取失败'];
        }
        return json($data);
    }

    //焦点图
    public function home($userid=0)
    {
        $res = db('sc_banner')->where(['status' => 1])->order('sort asc')->select();
        $resProSort = db('menu')->field('id,name,icon')->where(['hide' => 1, 'recommend' => 1])->order('sort asc')->select();
        $area_id = $this->request->param('area_id',0);
        if($area_id==0){
            $where = "show_all = 1 and status = 1 and recommend = 1";
        }else{
            $where = "(area_ids like '%,{$area_id},%' or show_all = 1) and status = 1 and recommend = 1";
        }
        $resProList = db('pro')->field('id,title,price,image,sales')
            ->limit(0, 6)
            ->where($where)
            ->order('sort asc,id desc')->select();
        if($userid!=0){
            $userData = db('user')->field('id,phone,name,nickname,avatar')->where(['id' => $userid])->find();
        }else{
            $userData = [];
        }
        foreach ($res as $k => $val) {
            $res[$k]['src'] = xtsz(1). $val['litpic'];
        }
        foreach ($resProSort as $k => $val) {
            $resProSort[$k]['icon'] = xtsz(1). $val['icon'];
        }
        foreach ($resProList as $k => $val) {
            $resProList[$k]['image'] = xtsz(1). $val['image'];
        }
        $notice = xtsz(20);
        $json = [
            'banner' => $res, 'ProSort' => $resProSort, 'ProList' => $resProList,'notice'=>$notice,'userinfo'=>$userData
        ];
        if ($res) {
            $data = ['code' => 100, 'msg' => '获取成功', 'data' => $json];
        } else {
            $data = ['code' => 0, 'msg' => '获取失败'];
        }
        return json($data);
    }

    //商品列表
    public function Prolist($tid, $pagecur, $filterIndex, $priceOrder, $key='')
    {
        $num = 6;
        $limtS = $pagecur * $num;
        $idData = groupid($tid);
        if($key!=='undefined'){
            $where = [
                ['status', '=', 1],
                ['typeid', 'in', $idData],
                ['title', 'like', '%'.$key.'%'],
            ];
        }else{
            $where = [
                ['status', '=', 1],
                ['typeid', 'in', $idData],
            ];
        }
        if ($filterIndex == 1) {
            $order = 'sales desc,sort asc,id desc';
        } else if ($filterIndex == 2 && $priceOrder = 1) {
            $order = 'price asc,sort asc,id desc';
        } else if ($filterIndex == 2 && $priceOrder = 2) {
            $order = 'price desc,sort asc,id desc';
        } else {
            $order = 'sort asc,id desc';
        }
        $resProList = db('pro')->field('id,title,price,image,sales')->limit($limtS, $num)->where($where)->order($order)->select();

        foreach ($resProList as $k => $val) {
            $resProList[$k]['image'] = xtsz(1) . $val['image'];
        }
        $resProCount = db('pro')->field('id,title,price,image,sales')->where($where)->order('sort asc,id desc')->select();
        $len = ceil(count($resProCount) / $num);
        $json = [
            'len' => $len, 'Count' => count($resProCount), 'ProList' => $resProList
        ];
        if ($resProList) {
            $data = ['code' => 100, 'msg' => '获取成功', 'data' => $json];
        } else {
            $data = ['code' => 0, 'msg' => '获取失败'];
        }
        return json($data);
    }

    //商品详情
    public function ProView($id,$userid)
    {
        $res = db('pro')->where(['id'=>$id])->find();
        $collectionData = db('collection')->where(['userid'=>$userid])->value('collectionDataId');
        if($collectionData){
            $collectionData = explode(',',$collectionData);
            if(in_array($id,$collectionData)){
                $res['favorite'] = true;
            }
        }else{
            $res['favorite'] = false;
        }
        $res['image']=xtsz(1).$res['image'];
        $images = explode(',',$res['images']);
        foreach ($images as $k => $val) {
            $images[$k] = xtsz(1) . $val;
        }
        $res['content']=str_replace("/upload/",xtsz(1)."/upload/",$res['content']);
        $res['images']=$images;
        if($this->proCarNum($userid)){
            $res['carNum'] = count($this->proCarNum($userid));
        }else{
            $res['carNum'] = 0;
        }
        if ($res) {
            $data = ['code' => 100, 'msg' => '获取成功', 'data' => $res];
        } else {
            $data = ['code' => 0, 'msg' => '获取失败'];
        }
        return json($data);
    }

    //通用新闻列表
    public function NewsList($typename, $pageCur, $pageNum)
    {
        $num = $pageNum;
        $limtS = $pageCur * $num;
        $resNewsList = db('xinwen')->field('id,title,litpic,creatime,read,description,sort')
            ->limit($limtS, $num)
            ->where(['type'=>$typename])
            ->order('sort asc,creatime desc')
            ->select();
        foreach ($resNewsList as $k => $val) {
            $resNewsList[$k]['litpic'] = xtsz(1) . $val['litpic'];
            $resNewsList[$k]['creatime'] = date('Y-m-d H:i',$val['creatime']);
        }
        $resNewsCount = db('xinwen')->field('id,title,litpic,creatime,read,description,sort')
            ->where(['type'=>$typename])
            ->order('sort asc,id desc')
            ->count();
        $len = ceil($resNewsCount / $num);
        $json = [
            'len' => $len, 'total' => $resNewsCount, 'list' => $resNewsList
        ];
        if ($resNewsList) {
            $data = ['code' => 100, 'msg' => '获取成功', 'data' => $json];
        } else {
            $data = ['code' => 0, 'msg' => '获取失败'];
        }
        return json($data);
    }

    //商品详情
    public function NewsView($id)
    {
        $res = db('xinwen')->where(['id'=>$id])->find();
        $res['creatime'] = date('Y-m-d H:i',$res['creatime']);
        $res['content']=str_replace("/upload/",xtsz(1)."/upload/",$res['content']);
        $res['content']=str_replace('style=""'," ",$res['content']);
        if ($res) {
            $data = ['code' => 100, 'msg' => '获取成功', 'data' => $res];
        } else {
            $data = ['code' => 0, 'msg' => '获取失败'];
        }
        return json($data);
    }

    //提现
    public function tixian()
    {
        $data = $this->request->param();
        Db::name('user')->where('id',$data['userid'])->setDec('score',$data['score']);
        $yue = Db::name('user')->where('id',$data['userid'])->value('score');
        $arrData = ['userid'=>$data['userid'],'msg'=>'会员提现','type'=>'reduce','score'=>$data['score'],'yuescore'=>$yue,'creatime'=>time(),'status'=>1,'sfstatus'=>0];
        $res1 = Db::name('recordscore')->insert($arrData);
        if($res1){
            return json(['code'=>100,'msg'=>'申请成功，等待后台处理','data'=>$yue]);
        }else{
            return json(['code'=>0,'msg'=>'申请失败']);
        }
    }

    //加入收藏
    public function ProFavorite(){
        $data=$this->request->param();
        if($data['favorite']=='true'){
            $res = db('collection')->where('userid',$data['userid'])->find();
            if($res){
                $collectionDataId = db('collection')->where('userid',$data['userid'])->value('collectionDataId');
                db('collection')->data(['collectionDataId'=>$collectionDataId.$data['id'].','])
                    ->where(['userid'=>$data['userid']])
                    ->update();
                return json(['code'=>100,'msg'=>'收藏成功']);
            }else{
                db('collection')->data(['userid'=>$data['userid'],'collectionDataId'=>$data['id'].','])->insert();
                return json(['code'=>100,'msg'=>'收藏成功']);
            }
        }else{
            $collectionDataId = db('collection')->where('userid',$data['userid'])->value('collectionDataId');
            $str=str_replace($data['id'].',','',$collectionDataId);
            db('collection')->data(['collectionDataId'=>$str])
                ->where(['userid'=>$data['userid']])
                ->update();
            return json(['code'=>100,'msg'=>'取消成功']);
        }
    }

    //收货地址列表
    public function addressList($userid)
    {
        $res = Db::name('hyaddress')
            ->where(['userid' => $userid])
            ->order('default desc')
            ->select();
        if ($res) {
            $data = ['code' => 100, 'msg' => 'success', 'data' => $res];
        } else {
            $data = ['code' => 0, 'msg' => 'fail'];
        }
        return json($data);
    }

    public function addressEdit(){
        $data=$this->request->param();
        if($data['default']=='true'){
            $data['default'] = 1;
            Db::name('hyaddress')->data(['default'=>0])->where('userid',$data['userid'])->update();
        }else{
            $data['default'] = 0;
        }

        if($data['action']=='edit'){
            unset($data['action']);
            $result = Db::name('hyaddress')->data($data)->where('id',$data['id'])->update();
            $res = Db::name('hyaddress')->where('userid',$data['userid'])->order('default', 'desc')->select();
            return json($res);

        }else{
            if($data['default'] == 1){
                Db::name('hyaddress')->data(['default'=>0])->where('userid',$data['userid'])->update();
            }
            $result = Db::name('hyaddress')->where('userid',$data['userid'])->strict(false)->insert($data);
            return $result;
        }
    }

    public function pro_car_add()
    {
        $data=$this->request->param();
        $arr= [] ;
        $res = Db::name('shopcar')->field('proData,total')->where('userid',$data['userid'])->where('status',0)->find();
        if($res){
            $arr = unserialize($res['proData']);
            for($i=0;$i<count($arr);$i++){
                if($arr[$i]['id']==$data['id']){
                    $arr[$i]['number']=$arr[$i]['number']+1;
                    $news_data = [
                        'proData'=>serialize($arr),
                        'total'=>$res['total']+$data['price'],
                        'updatetime'=>time()
                    ];
                    $result = Db::name('shopcar')->data($news_data)->where('userid',$data['userid'])->where('status',0)->update();
                    return json($this->carNum($data['userid']));
                }
            }
            $data['number'] = 1;
            array_unshift($arr,$data);
            $news_data = [
                'proData'=>serialize($arr),
                'total'=>$res['total']+$data['price'],
                'updatetime'=>time()
            ];
            $result = Db::name('shopcar')->data($news_data)->where('userid',$data['userid'])->where('status',0)->update();
            return json($this->carNum($data['userid']));
        }else{
            $arr['userid'] = $data['userid'];
            $arr['creatime'] = time();
            $arr['updatetime'] = time();
            $arr['status'] = 0;
            $arr['total'] = $data['price'];
            $arr['ddh'] = date('Ymd') . str_pad(mt_rand(1, 99999), 5, '0', STR_PAD_LEFT);
            $data['number'] = 1;
            $arr1 = [];
            array_unshift($arr1,$data);
            $arr['proData'] = serialize($arr1);
            $result = Db::name('shopcar')->strict(false)->insert($arr);
            return json($this->carNum($data['userid']));
        }
    }

    public function carNum($userid){
        $result = Db::name('shopcar')->field('proData,total')->where('userid',$userid)->where('status',0)->find();
        if($result){
            $carData = $this->proCarNum($userid);
            if($carData){
                $carNum = count($carData);
            }else{
                $carNum = 0;
            }
        }
        $data=[
            'code'=>100,
            'msg'=>'数量更新成功',
            'data'=>$carNum
        ];
        return $data;
    }


    //获取默认收货地址
    public function address($userid,$default=''){
        $data=$this->request->param();
        if($default){
            $res = Db::name('hyaddress')->where($data)->find();
        }else{
            $res = Db::name('hyaddress')->where($data)->order('default', 'desc')->select();
        }
        return json($res);
    }

    //订单列表获取
    public function getOrder($ddh){
        $proData = Db::name('orderlist')->where('ddh',$ddh)->value('proData');
        $total = Db::name('orderlist')->where('ddh',$ddh)->value('total');
        $proData = unserialize($proData);
        $yhtotal=0;
        $scoretotal=0;
        foreach ($proData as $k => $val){
            $yhtotal= (int)$yhtotal+(($val['ysprice'] - $val['price'])*$val['number']);
            $scoretotal = $scoretotal + (int)$val['score']*$val['number'];
        }
        $arr= [
            'proData'=>  $proData, 'total'=>  $total,'yhtotal'=>  $yhtotal,'scoretotal'=>  $scoretotal
        ];
        return json($arr);
    }

    //生成立即购买订单
    public function immediatelyOrder(){
        $data=$this->request->param();
        $arr = [
            [
                'image'=>$data['image'],
                'id'=>$data['id'],
                'title'=>$data['title'],
                'price'=>$data['price'],
                'score'=>$data['score'],
                'ysprice'=>$data['ysprice'],
                'Specifications'=>$data['Specifications'],
                'number'=>1,
                'stock'=>$data['stock']
            ]
        ];
        $data['proData'] = serialize($arr);
        $data['ddh'] = date('Ymd') . str_pad(mt_rand(1, 99999), 5, '0', STR_PAD_LEFT);
        $data['creatime'] = $data['updatetime'] = time();
        $addressid = Db::name('hyaddress')->field('id')->where('userid',$data['userid'])->where('default',1)->find();
        $data['addressid'] = $addressid['id'];
        $data['productid'] = $data['id'];
        $data['type'] = 1;
        unset($data['id']);
        $result = Db::name('orderlist')->strict(false)->insert($data);
        if($result){
            return json($data['ddh']);
        }
    }

    //购物车订单更新
    public function carUpdata(){
        $data=$this->request->param();
        $proData= json_decode(html_entity_decode(stripslashes($data['proData'])), true);
        $data['proData'] = serialize($proData);
        $data['updatetime']= time();
        $result = Db::name('shopcar')->data($data)->where('userid',$data['userid'])->where('status',0)->update();
        return json($result);
    }

    public function proCarGet($userid){
        $result = $this->proCarNum($userid);
        if($result){
            return json($result);
        }else{
            return json(1);
        }
    }

    //获取购物车商品数量
    public function proCarNum($userid){
        $result = Db::name('shopcar')->field('proData')->where('userid',$userid)->where('status',0)->find();
        $result = unserialize($result['proData']);
        return $result;
    }

    public function carEmpty($userid){
        $result = Db::name('shopcar')->where('userid',$userid)->where('status',0)->delete();
        return json($result);
    }

    public function orderUpdate(){
        $data=$this->request->param();
        $res = Db::name('shopcar')->field('proData,ddh')->where('userid',$data['userid'])->where('status',0)->find();
        $data['proData'] = $res['proData'];
        $data['ddh'] = $res['ddh'];
        $data['creatime'] = time();
        $data['updatetime'] = time();
        $result = Db::name('orderlist')->where('ddh',$res['ddh'])->find();
        if($result){
            $result = Db::name('orderlist')->data($data)->where('ddh',$res['ddh'])->where('state',1)->update();
            if($result){
                return json($res['ddh']);
            }
        }else{
            $result = Db::name('orderlist')->insert($data);
            $Id = Db::name('orderlist')->getLastInsID();
            $ddh = Db::name('orderlist')->where('id',$Id)->value('ddh');
            if($result){
                return json($ddh);
            }
        }
    }

    public function orderUpdate1(){
        $data=$this->request->param();
        $result = db('orderlist')->data($data)->where(['ddh'=>$data['ddh'],'state'=>1,'userid'=>$data['userid']])->update();
        if($result){
            db('shopcar')->where(['ddh'=>$data['ddh'],'status'=>0,'userid'=>$data['userid']])->delete();
        }
        return json(['code'=>100,'msg'=>'订单生成成功']);
    }


    public function carDel($userid,$index,$total){
        $proData = Db::name('shopcar')->where('userid',$userid)->where('status',0)->value('proData');
        $proData = unserialize($proData);
        unset($proData[$index]);
        if(!empty($proData)){
            $proData = serialize($proData);
            $result = Db::name('shopcar')->data(['proData'=>$proData,'total'=>$total])->where('userid',$userid)->where('status',0)->update();
        }else{
            $result = Db::name('shopcar')->where('userid',$userid)->delete();
        }
        if($result){
            return json(1);
        }

    }

    public function sja(){
        db('user')->where('id',1)->setInc('score',100);
    }

    public function orderListGet($userid,$state,$pagecur){
        $num = 6;
        $limtS = $pagecur * $num;
        if($state!=0){
            $result = Db::name('orderlist')
                ->limit($limtS, $num)->where(['userid'=>$userid,'state'=>$state])
                ->order('id desc')
                ->select();
            $resProCount = db('orderlist')->where(['userid'=>$userid,'state'=>$state])->count();
        }else if($state==0){

            $result = Db::name('orderlist')->limit($limtS, $num)
                ->order('id desc')
                ->where('userid',$userid)
                ->select();
            $resProCount = db('orderlist')->where('userid',$userid)->count();
        }
        $len = ceil($resProCount / $num);
        $arr = [];
        for($i=0;$i<count($result);$i++){
            $arr[$i]['creatime']=date('Y-m-d H:m:i',$result[$i]['creatime']);
            $arr[$i]['goodsList']=unserialize($result[$i]['proData']);
            $arr[$i]['state']=$result[$i]['state'];
            $arr[$i]['productid']=$result[$i]['productid'];
            $arr[$i]['total']=$result[$i]['total'];
            $arr[$i]['cpnum']=$result[$i]['cpnum'];
            $arr[$i]['ddh']=$result[$i]['ddh'];
            $arr[$i]['addressid']=$result[$i]['addressid'];
            $arr[$i]['msg']=$result[$i]['msg'];
            $arr[$i]['type']=$result[$i]['type'];
            $arr[$i]['id']=$result[$i]['id'];
        }
        $json = [
            'len' => $len, 'Count' => $resProCount, 'data' => $arr
        ];
        return json($json);
    }

    public function orderListDel($userid,$ddh){
        Db::name('shopcar')->where(['ddh'=>$ddh,'userid'=>$userid])->where('status',0)->delete();
        $result = Db::name('orderlist')->where(['ddh'=>$ddh,'userid'=>$userid,'state'=>1])->delete();
        if($result){
            $shuzu = [
                'code'=>1
            ];
        }else{
            $shuzu = [
                'code'=>0
            ];
        }
        return json($shuzu);
    }
    public function orderListClose($userid,$ddh){
        $result = Db::name('orderlist')->data(['state'=>4])
            ->where(['ddh'=>$ddh,'userid'=>$userid,'state'=>5])
            ->update();
        if($result){
            $shuzu = [
                'code'=>100
            ];
        }else{
            $shuzu = [
                'code'=>0
            ];
        }
        return json($shuzu);
    }
    public function orderListSh($userid,$ddh){
        $result = Db::name('orderlist')->data(['state'=>5])
            ->where(['ddh'=>$ddh,'userid'=>$userid,'state'=>3])
            ->update();
        if($result){
            $shuzu = [
                'code'=>100
            ];
        }else{
            $shuzu = [
                'code'=>0
            ];
        }
        return json($shuzu);
    }
    public function orderListQr($userid,$ddh){
        $result = Db::name('orderlist')->data(['state'=>4])
            ->where(['ddh'=>$ddh,'userid'=>$userid,'state'=>3])
            ->update();
        if($result){
            $shuzu = [
                'code'=>100
            ];
        }else{
            $shuzu = [
                'code'=>0
            ];
        }
        return json($shuzu);
    }

    public function getCountFromClass(){
        header("Access-Control-Allow-Origin:*");
        $params = $this->request->get();
        $classId = $params['class_id'];
        $res = db('love_labor')->field('count(type) as num,type')->where('class_id',$classId)->group("type")->select();
        $res = array_column($res,'num','type');
        $sum = array_sum($res);
        $list = db('love_labor')->field('count(user_name) as num, user_name')->where('class_id',$classId)->group("user_name")->order('num','desc')->limit(0,10)->select();
        return json([
            'msg'=>'',
            "data"=>[
                "sum"=>$sum,
                "proportion"=>$res,
                'list'=>$list
            ]
        ]);
    }

    //获取欢乐豆
    public function getHappyBean(){
        $params = $this->request->get();
        $res = db('happyBean')->where('user_id',$params['user_id'])->sum('happyBean');
        return json(['happyBean'=>$res],200);
    }

    //扣除欢乐豆
    public function consumeHappyBean(){
        $params = $this->request->post();
        if(
            ($params['happyBean']<0)||
            ((int)$params['happyBean']===0)
        ){
            return json(['msg'=>'happyBean参数错误'],400);
        };
        if(db('happyBean')->where('user_id',$params['user_id'])->sum('happyBean')<(int)$params['happyBean']){
            return json(['code'=>2,'msg'=>'不足以兑换'],400);
        }
        try {
            $res = db('happyBean')->insert([
                'user_id'=>$params['user_id'],
                'happyBean'=>-$params['happyBean'],
                'unique'=>$params['unique'],
            ]);
        } catch (\Throwable $th) {
            return json(['code'=>$th->getCode(),'msg'=>'兑换失败，可能是参数错误或者重复扣款'],400);
        }
        if($res){
            return json(['msg'=>'兑换成功'],200);
        }
    }

    //报名接口
    public function enroll(){
        $params = $this->request->post();
        try {
            //code...
            //人员参加信息
            $info = db('user_base')->where('user_id',$params['user_id'])->find();
            if(!$info){
                $status = [
                    'b0'=>0,
                    'b1'=>0,
                    'b2'=>0,
                    'b3'=>0,
                    'b4'=>0,
                    'b5'=>0,
                    'b6'=>0,
                    'b7'=>0,
                    'b8'=>0,
                    'b9'=>0,
                    'b10'=>0,
                    'b11'=>0,
                    'b12'=>0,
                    'b13'=>0,
                    'b14'=>0,
                    'b15'=>0,
                    'b16'=>0,
                    'b17'=>0
                ];
                db('user_base')->insert(array_merge([
                    'user_id'=>$params['user_id'],
                ],$status));
            }else{
                if($info["b$params[id]"]){
                    return json(['msg'=>'报名失败，请不要重复报名','code'=>300],400);
                }
            }
            db('user_base')->where('user_id',$params['user_id'])->update(["b$params[id]"=>1]);
            // db('user_enroll')->where('')
            db('user_enroll')->insert([
                'user_id'=>$params['user_id'],
                'base_id'=>$params['id'],
                'created_at'=>date('Y-m-d H:i:s',time()),
                'update_at'=>date('Y-m-d H:i:s',time())
            ]);
        } catch (\Throwable $th) {
            return json(['th'=>$th->getMessage(),'code'=>$th->getCode(),'msg'=>'报名失败'],400);
            //throw $th;
        }
        return json(['msg'=>'报名成功']);
    }

    public function del(){
        $params = $this->request->post();
        var_dump($params);
        $user_id = $params['user_id'];
        try {
            db('user_base')->where('user_id',$user_id)->delete(true);
            db('flatter')->where('user_id',$user_id)->delete(true);
        } catch (\Throwable $th) {
            return json($th);
        }
        
        return json('ok');
    }

    public function under(){
        $params =$this->request->post();
        $maxid = db('user_enroll')->max('sort');
        try {
            db('user_enroll')->where('user_id',$params['user_id'])->where('base_id',$params['base_id'])
            ->update(['sort'=>$maxid+1]);
        } catch (\Throwable $th) {
            throw $th;
        }
        return json('成功',200);
    }

    public function deluser(){
        $params = $this->request->post();
        $openid = $params['openid'];
        $type = $params['type'];
        switch ($type) {
            case 0:
                db('user')->where('openid',$openid)->delete(true);
                db('teacher')->where('openid',$openid)->delete(true);
                break;
            case 1:     
            case 2:
                db('teacher')->where('openid',$openid)->where('type',$type)->delete(true);
            default:
                # code...
                break;
        }
    }
    //评价任务
    public function complete(){
        $params = $this->request->post();
        if(is_string($params['user_id'])){
            $params['user_id'] = [$params['user_id']];
        }
        try {
            array_map(function($v)use($params){
                $insert = [
                    'user_id'=>$v,
                    'task_id'=>$params['id'],
                    'score'=>$params['score'],
                    'remark'=>$params['remark'],
                    'img'=>$params['img'],
                ];
                try {
                    db('flatter')->insert($insert);
                    db('user_base')->where('user_id',$v)->update(["b$params[id]"=>2]);
                    db('user_reckon_score_table')->insert([
                        'year'=>date('Y'),
                        'user_id'=>$v,
                        'status'=>1,
                        'score'=>$params['score']
                    ]);
                } catch (\Throwable $th) {
                    throw $th;
                }
            },$params['user_id']);
        } catch (\Throwable $th) {
            //throw $th;
            printLog($th->getMessage());
            return json(['th'=>$th->getMessage(),'code'=>$th->getCode(),'msg'=>'评价失败'],400);
        }
        return json(['msg'=>'已完成','code'=>'200']);
    }

    //获取评价
    public function getRemark(){
        return json([
            ['name'=>'非常棒','flag'=>false],
            ['name'=>'表现优异','flag'=>false],
            ['name'=>'动手能力强','flag'=>false],
            ['name'=>'劳动积极能干','flag'=>false]
        ]);
    }

    public function getBiaoge(){
        header("Access-Control-Allow-Origin:*");
        $list = db('flatter')->field('count(*) as num,task_id')->group('task_id')->select();
        // var_dump(array_column($list,'task_id'));
        $olist = array_filter(array_map(function($v)use($list){
            if(in_array($v['id'],array_column($list,'task_id'))){
                return;
            };
            return ['num'=>0,'name'=>$v['name'],'task_id'=>$v['id']];
        },getHappyVillage()()));
        // var_dump($olist);
        $list = array_merge($list ,$olist);
        $class_ids = getRankClass();
        $map = ['red'=>'红色家族','green'=>'绿色家族','golden'=>'金色家族'];
        $status = [
            'b0'=>0,
            'b1'=>0,
            'b2'=>0,
            'b3'=>0,
            'b4'=>0,
            'b5'=>0,
            'b6'=>0,
            'b7'=>0,
            'b8'=>0,
            'b9'=>0,
            'b10'=>0,
            'b11'=>0,
            'b12'=>0,
            'b13'=>0,
            'b14'=>0,
            'b15'=>0,
            'b16'=>0,
            'b17'=>0
        ];
        unset($class_ids[0]);
        $biaoge = array_map(function($v)use($list,$map,$status){
            $vinfo = getHappyVillage($status,$v)();
            $b = array_filter($list,function($v)use($vinfo){
                return  in_array($v['task_id'],array_column($vinfo,'id'));
            });
            usort($b,function($a,$b){
                return $a['num'] - $b['num'];
            });
            $data['sum'] = array_sum(array_column($b,'num'));
            switch (count($b)) {
                case 0:
                    $data['hot'] = null;
                    $data['cold'] = $data['hot'];
                    break;
                case 1:
                    $data['hot'] =  getHappyVillage($status,$v)(array_pop($b)['task_id'])['name'];
                    $data['cold'] = $data['hot'];
                default:
                    $data['hot'] =  getHappyVillage($status,$v)(array_pop($b)['task_id'])['name'];
                    $data['cold'] = getHappyVillage($status,$v)(array_shift($b)['task_id'])['name'];
                    break;
            }
            $people = db('user_class_log')->where('class_group_id',$v)->count();
            if($people){
                $data['average']= $data['sum']/$people;
            }else{
                $data['average'] = $data['sum'];
            }
            $data['people']= $people;
            $data['class_name'] = $map[getRankClass()[$v]];
            return $data;
        },array_keys($class_ids));
        // var_dump($biaoge);
        return json([$biaoge,array_map(function($v){
            // var_export($v);
            $v['name'] = getHappyVillage()($v['task_id'])['name'];
            return $v;
        },$list)],200);
    }

    public function setPassword(){
        $params = $this->request->post();
        // $params
        $password = md5($params['password'].'xckj');
        $user_id = $params['user_id'];
        try {
            //code...
            db('user')->where('id',$user_id)->update(['password'=>$password]);
        } catch (\Throwable $th) {
            //throw $th;
            return json(['msg'=>$th->getMessage(),'trace'=>$th->getTraceAsString()],400);
        }
        return json(['msg'=>'修改成功','code'=>200],200);
    }

    public function checkPassword(){
        $params = $this->request->post();
        if(checkPassword($params['user_id'],$params['password'])){
            return json(['msg'=>'验证通过','code'=>200],200);
        }
        return json(['msg'=>'验证失败'],400);
    }

    public function getRank(){
        header("Access-Control-Allow-Origin:*");
        $class_ids = getRankClass();
        $map = ['red'=>'红色家族','green'=>'绿色家族','golden'=>'金色家族'];
        unset($class_ids[0]);
        $user_ids = db('user_class_log')->whereIn('class_group_id',array_keys($class_ids))->distinct(true)->select();
        $list = db('user')
            ->alias('u')
            ->field('u.id,u.`name`,u.avatar')
            ->whereIn('u.id',array_column($user_ids,'u_id'))
            ->select();
        $user_class = array_column($user_ids,'class_group_id','u_id');
        foreach ($list as $k =>  $item){
            $list[$k]['score'] = round(db('user_reckon_score_table urst')
                ->where('urst.user_id',$item['id'])
                ->where('urst.year',date('Y'))
                ->where('urst.status',1)
                ->sum('score'),2);
            $list[$k]['class'] = $map[$class_ids[$user_class[$list[$k]['id']]]];//'幸福村落班';
        }
        usort($list,function($a,$b){
            return  $b['score'] - $a['score'];
        });
        $list = array_values($list);
        return $this->returnJson(compact('list'),'获取成功',1);
    }

    public function updateAvatar(){
        $params = $this->request->post();
        db('user')->where('id',$params['user_id'])->update(['avatar'=>$params['avatar']]);
        return json(['ok']);
    }

    public function rankUserTask(){
        $params = $this->request->get();
        // var_dump()
        $taskList = array_map(function($v)use($params){
            $id =(int)ltrim($v,'b');
            $info = db('flatter')->where('user_id',$params['user_id'])->where('task_id',$id)->find();
            return ['id'=>$id,'info'=>$info];
        },array_keys((array)db('user_base')->where('user_id',$params['user_id'])->find(),2));
        $list = array_uintersect(getHappyVillage()(),$taskList,function($a,$b){
            return $a['id'] - $b['id'];
        });
        return $this->returnJson(['list'=>array_values($list),'info'=>$taskList],'ok',200);
        // $taskInfo = getHappyVillage();
    }

    public function rankUserRemark(){
        $params = $this->request->get();
        $info = db('flatter')->where('user_id',$params['user_id'])->where('task_id',$params['id'])->find();
        return $this->returnJson($info,'ok',200);
    }
    //待评价的任务列表
    public function taskList(){
         $params = $this->request->get();
         $base = "b$params[id]";
         $class_ids = getRankClass();
         $map = ['red'=>'红色家族','green'=>'绿色家族','golden'=>'金色家族'];
         try {
            $list = array_map(function($status)use($params,$class_ids,$map){
                $userInfo = db('user')->field(['name','avatar'])->find($status['user_id']);
                //查询该学生是否加入班级
                $class = db('user_class_log')->where('u_id',$status['user_id'])->find();
                if(!$class){return;}
                $userInfo['class_name'] = $map[$class_ids[(db('user_class_log')->where('u_id',$status['user_id'])->find())['class_group_id']]];//'幸福村落';
                $userInfo['user_id'] = $status['user_id'];
                return [
                    'user_info'=>$userInfo,
                    'task' =>getHappyVillage()($params['id'])
                ];
             },db('user_base')->where($base,1)->select());
         } catch (\Throwable $th) {
            // throw $th;
            return json(['th'=>$th->getMessage(),'code'=>$th->getCode(),'msg'=>'获取失败'],400);
         }
         $list = array_filter($list);
         $sort = db('user_enroll')->where('base_id',$params['id'])->select();
         $sort = array_column($sort,'sort','user_id');
         usort($list,function($a,$b)use($sort){
            return $sort[$a['user_info']['user_id']] - $sort[$b['user_info']['user_id']];
         });
         return json(['list'=>array_filter($list)]);
    }
    //会员信息
    public function userinfo($openid){
        $resUser = db('user u')
            ->field('u.base_id,cl_gr.name class_name,cl_gr.id class_id,sch.name school_name,u.id,sch.name,u.phone,u.name,u.sex,u.area_id,u.points,u.grade_id,u.create_time,u.avatar,u.state,a.name as area_name,n.name as grade_name')
            ->join('area a','a.id=u.area_id','left')
            ->join('user_class_log class','class.u_id=u.id','left')
            ->join('class_group cl_gr','cl_gr.id=class.class_group_id','left')
            ->join('school sch','sch.id=u.school_id','left')
            ->join('grade n','u.grade_id=n.id','left')
            ->where('u.openid',$openid)
            ->find();
        $class_ids = db('user_class_log')->field('id')->where('class_group_id',$resUser['class_id'])->column('id');
        $resUser['class_u_num'] = count($class_ids);
        if($resUser['class_u_num'] !== 0){
            $resUser['rate_score'] = number_format(db('user_reckon_score_table urst')
                    ->whereIn('urst.user_id',$class_ids)
                    ->where('urst.year',date('Y'))
                    ->where('urst.status',1)
                    ->sum('score') / $resUser['class_u_num'] , 2);
        }else{
            $resUser['rate_score'] = 0;
        }
        $resUser['rate_score'] = round(db('user_reckon_score_table urst')
        ->where('urst.user_id',$resUser['id'])
        ->where('urst.year',date('Y'))
        ->where('urst.status',1)
        ->sum('score'),2);


        $surplusDay =  floor((time()-$resUser['create_time'])/(3600*24));
        $resUser['surplusDay'] = $surplusDay;
        //获取默认每个待处理数量
        $info = $this->info;
        if($info){
            $form_number = $this->form_number($info);
            $resUser['form_number'] = $form_number;
            if($info['type'] == 1){
                $kaoqing = $form_number['kqxm_number']+$form_number['qkxm_number'];
                $pingjia = $form_number['pjxm_number']+$form_number['pjqkxm_number'];
                $resUser['task_form_number'] = [
                    'soft_task_msg'=>'创建校内轻课',
                    'py_task_msg'=>'您有'.$form_number['pyxm_number'].'个任务需要批阅',
                    'kq_task_msg'=>'您有'.$kaoqing.'个任务需要考勤',
                    'pj_task_msg'=>'您有'.$pingjia.'个任务需要评价',
                    'py_number'=>$form_number['pyxm_number'],
                    'kq_number'=>$kaoqing,
                    'pj_number'=>$pingjia
                ];
            }else if($info['type'] == 2){
                $resUser['task_form_number'] = [
                    'py_task_msg'=>'您有'.$form_number['pyxm_number'].'个任务需要批阅',
                    'kq_task_msg'=>'您有'.$form_number['kqxm_number'].'个任务需要考勤',
                    'pj_task_msg'=>'您有'.$form_number['pjxm_number'].'个任务需要评价',
                    'py_number'=>$form_number['pyxm_number'],
                    'kq_number'=>$form_number['kqxm_number'],
                    'pj_number'=>$form_number['pjxm_number']
                ];
            }
        }
        return json($resUser);
    }

    public function loveLabor(){
        $params = $this->request->post();
        $user_id = $params['user_id'];
        $name = $params['name'];
        $video = $params['video'];
        $type = $params['labor_type'];
        $class_id = $params['class_id'];
        $user_name = $params['user_name'];
        $describe = $params['describe'];
        try {
            db('love_labor')->insert([
                'user_id'=>$user_id,
                'video'=>$video,
                'user_name'=>$user_name,
                'name'=>$name,
                'type'=>$type,
                'class_id'=>$class_id,
                'describe'=>$describe,
            ]);
        } catch (\Throwable $th) {
            //throw $th;
            return json(['msg'=>$th->getMessage(),'code'=>1],400);
        }
        return json(['msg'=>'提交成功','code'=>0],200);
    }

    public function readOver(){
        $params = $this->request->post();
        $user_id = $params['user_id'];
        $id = $params['id'];
        $evaluate = $params['evaluate'];
        if(is_array($user_id) && is_array($id)){
            array_map(function($v){
                db('user_reckon_score_table')->insert([
                    'year'=>date('Y'),
                    'user_id'=>$v,
                    'status'=>1,
                    'score'=>1
                ]);
            },$user_id);
            array_map(function($v)use($evaluate){
                db('love_labor')->where('id',$v)->update([
                    'status'=>'已批阅',
                    'evaluate'=>$evaluate
                ]);
            },$id);
            return json(['msg'=>'成功','code'=>0],200);
        }
    }

    //老师端获取劳动列表
    public function getLaborList(){
        $params = $this->request->get();
        $class_id = $params['class_id'];
        $status = $params['status'];
        $list = db('love_labor')
        ->where('class_id',$class_id)->where('status',[1=>'待批阅',2=>'已批阅'][$status])
        ->select();
        return json($list,200);
    }

    public function getTeacherInfo(){
        $params = $this->request->post();
        $openid = $params['openid'];
        $info = db('teacher')->where('openid',$openid)->select();
        return json($info,200);
    }

    //获取身份码信息
    public function getScanInfo(){
        $params = $this->request->post();
        $user_id = $params['user_id'];
        $userInfo = db('user')->where('id',$user_id)->find();
        if(!$userInfo){
            return json(['msg'=>'id错误'],400);
        }
        $classInfo = db('user_class_log')->join('class_group','class_group.id = sky_user_class_log.class_group_id')->where('u_id',$user_id)->find();
        if($classInfo){
            $userInfo['class_name'] = $classInfo['name'];
            return json(['data'=>$userInfo,'msg'=>'成功'],200);
        }
        return json(['msg'=>'未加入班级'],400);
    }
    //时间戳转天数
    public function time2string($second){
        $day = floor($second/(3600*24));
        $second = $second%(3600*24);//除去整天之后剩余的时间
        $hour = floor($second/3600);
        $second = $second%3600;//除去整小时之后剩余的时间
        $minute = floor($second/60);
        $second = $second%60;//除去整分钟之后剩余的时间
        //返回字符串
        return $day.'天'.$hour.'小时'.$minute.'分'.$second.'秒';
    }

    //积分流水记录
    public function recordscore($userid, $pagecur)
    {
        $num = 15;
        $limtS = $pagecur * $num;
        $resProList = db('accountrecords')->limit($limtS, $num)->where('userid',$userid)->order('id desc')->select();
        foreach ($resProList as $k => $val) {
            $resProList[$k]['creatime']=date('Y-m-d',$val['creatime']);
            $resProList[$k]['type']=$val['msg'];
            if($val['status']==0){
                //$resProList[$k]['type']='购物返现';
            }else if($val['status']==1){
                //$resProList[$k]['type']='积分转可提积分';
            }else if($val['status']==2){
                //$resProList[$k]['type']='后台充值';
            }
            if($val['type']=='add'){
                $resProList[$k]['typeName']='+';
            }else if($val['type']=='reduce'){
                $resProList[$k]['typeName']='-';
            }
            //$resProList[$k]['yuescore']=userinfo($userid)['syscore'];
            //$resProList[$k]['yuescore']=$val['yue'];
        }
        $resProCount = db('accountrecords')->where('userid',$userid)->count();
        $len = ceil($resProCount / $num);
        $json = [
            'len' => $len, 'Count' => $resProCount, 'recordList' => $resProList
        ];
        if ($resProList) {
            $data = ['code' => 100, 'msg' => '获取成功', 'data' => $json];
        } else {
            $data = ['code' => 0, 'msg' => '获取失败'];
        }
        return json($data);
    }

    //加入收藏
    public function proColletGet($userid){

        $idData = db('collection')->where('userid',$userid)->value('collectionDataId');
        $idData = explode(',',$idData);
        $result = Db::name('pro')->whereIn('id',$idData)->where('status',1)->select();
        foreach ($result as $k => $val){
            $result[$k]['image'] = xtsz(1).$val['image'];
        }
        if($result){
            return json($result);
        }else{
            return json(1);
        }
    }

    //取消收藏
    public function proColletClose($userid,$index){
        $idData = db('collection')->where('userid',$userid)->value('collectionDataId');
        $idData = explode(',',$idData);
        unset($idData[$index]);
        if(!empty($proData)){
            $idStr = implode(',',$idData);
            $result = db('collection')->data(['collectionDataId'=>$idStr])->where('userid',$userid)->update();
        }else{
            $result = db('collection')->where('userid',$userid)->delete();
        }

        if($result){
            return json(1);
        }
    }

    //清空收藏
    public function colletEmpty($userid){
        $result = Db::name('collection')->where('userid',$userid)->delete();
        return json($result);
    }

    //单品内容
    public function aboutView($id){
        $result = xtsz($id);
        if(!empty($result)){
            return json(['code'=>100,'msg'=>'获取成功','data'=>$result]);
        }else{
            return json(['code'=>0,'msg'=>'获取失败']);
        }
    }


    //图片上传
    public function upload_img()
    {
        header("Access-Control-Allow-Origin:*");
        header("Access-Control-Allow-Methods:GET, POST, OPTIONS, DELETE");
        header("Access-Control-Allow-Headers:DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type, Accept-Language, Origin, Accept-Encoding");
        header('Access-Control-Allow-Headers: content-type,token');

        $data = $this->request->param();//获取传参
        $files = $this->request->file('file');//获取图片
        // 移动到框架应用根目录/uploads/ 目录下
        $info = $files->move('./image');//保存到xcx目录下
        $path = '/image/' . date('Ymd', time()) . '/' . $info->getFilename();//图片上传后的地址
        if ($info) {
            // 成功上传后 获取上传信息
            if (@$data['leixing'] == 'clzp' && @$data['type']) {
                $suc = $this->shibie($data['type'], xtsz(1) . xtsz(2) . $path);
                $bb = json_decode($suc);
                $bb->imgsrc = $path;
                return json($bb);
            }
            if (@$data['leixing'] == 'sfzp') {
                $suc = $this->shenfenzheng(xtsz(1) . xtsz(2) . $path);
                $bb = json_decode($suc);
                $bb->imgsrc = $path;
                return json($bb);
            }
            return (xtsz(1).$path);
        } else {
            // 上传失败获取错误信息
            return 0;
        }

    }

    //图片上传
    public function danpian($id)
    {
        $data = Db::name('xtsz')->where('id', $id)->find();
        if ($data) {
            // 成功上传后 获取上传信息
            return json(['code' => 100, 'msg' => '获取成功', 'data' => $data]);
        } else {
            // 上传失败获取错误信息
            return json(['code' => 0, 'msg' => '获取失败']);
        }
    }

    //会员资料更新
    public function userUpdata(){
        $data=$this->request->param();
        $res = db('user')->where(['id'=>$data['userid']])->update($data);
        if ($res) {
            // 成功上传后 获取上传信息
            $data['id'] = (int)$data['userid'];
            unset($data['userid']);
            return json(['code' => 100, 'msg' => '更新成功', 'data' => $data]);
        } else {
            // 上传失败获取错误信息
            return json(['code' => 0, 'msg' => '更新失败']);
        }
    }

    //银行卡更新
    public function yinhangUpdata(){
        $data=$this->request->param();
        $res = db('user_yinhang')->where(['userid'=>$data['userid']])->find();
        if($res){
            $resStatus = db('user_yinhang')->where(['userid'=>$data['userid']])->update($data);
        }else{
            $resStatus = db('user_yinhang')
                ->data(['userid'=>$data['userid'],'xm'=>$data['xm'],'kaihu'=>$data['kaihu'],'kahao'=>$data['kahao']])
                ->insert();
        }
        if ($resStatus) {
            // 成功更新
            return json(['code' => 100, 'msg' => '更新成功']);
        } else {
            // 上传失败获取错误信息
            return json(['code' => 0, 'msg' => '更新失败']);
        }
    }
    //银行卡信息
    public function yinhangInfo($userid){
        if(xtsz(15)=='显示'){
            $res = db('user_yinhang')->where(['userid'=>$userid])->find();
            if ($res) {
                // 成功更新
                $res['xmname']='姓名';
                $res['xmkaihu']='开户行';
                $res['xmkahao']='银行卡卡号';
                return json(['code' => 100, 'msg' => '获取成功','data'=>$res]);
            } else {
                // 上传失败获取错误信息
                $res=[
                    'xm'=>'',
                    'kaihu'=>'',
                    'kahao'=>'',
                    'xmname'=>'姓名',
                    'xmkaihu'=>'开户行',
                    'xmkahao'=>'银行卡卡号'
                ];
                return json(['code' => 0, 'msg' => '没有','data'=>$res]);
            }
        }else{
            $res=[
                'xm'=>'我是昵称',
                'kaihu'=>'基本地址',
                'kahao'=>'051783888888',
                'xmname'=>'昵称',
                'xmkaihu'=>'个人地址',
                'xmkahao'=>'个人号码'
            ];
            return json(['code' => 100, 'msg' => '获取成功','data'=>$res]);
        }

    }


    public function msn($phone, $action = '')
    {
        if ($action == 'login') {
            $r = Db::name('huiyuan')->where('sj', $phone)->find();
            if (!$r) {
                $data = ['code' => 20, 'msg' => 'fail'];
                return json($data);
            }
        }
        $statusStr = array(
            "0" => "短信发送成功",
            "-1" => "参数不全",
            "-2" => "服务器空间不支持,请确认支持curl或者fsocket，联系您的空间商解决或者更换空间！",
            "30" => "密码错误",
            "40" => "账号不存在",
            "41" => "余额不足",
            "42" => "帐户已过期",
            "43" => "IP地址限制",
            "50" => "内容含有敏感词"
        );
        $smsapi = "http://www.smsbao.com/"; //短信网关
        $user = "rongchuangwenhua"; //短信平台帐号
        $pass = md5("rongchuangwenhua888"); //短信平台密码
        $code = $this->get_random();
        $content = "【融创文化传媒】您的验证码是" . $code . ",五分钟内有效.若非本人操作请忽略此消息。";//要发送的短信内容
        //$phone = "15715239747";
        $sendurl = $smsapi . "sms?u=" . $user . "&p=" . $pass . "&m=" . $phone . "&c=" . urlencode($content);
        $result = file_get_contents($sendurl);
        if ($result == 0) {
            $res = [
                'phone' => $phone,
                'sms' => $code,
                'creatime' => time()
            ];
            Db::name('sms')->data($res)->insert();
            $data = ['code' => 100, 'msg' => 'success', 'data' => $res];
        } else {
            $data = ['code' => 0, 'msg' => 'fail'];
        }
        return json($data);
    }

    public function get_random($length = 6)
    {
        $min = pow(10, ($length - 1));
        $max = pow(10, $length) - 1;
        return mt_rand($min, $max);
    }

    public function hyGroup()
    {
        $res = db('hygroup')->field('id,name,percentage')->select();
        $a=[
            'id'=>0,
            'name'=>'请选择您所在区域',
            'percentage'=>0,
        ];
        array_unshift($res,$a);
        return json(['code' => 100, 'msg' => 'success', 'data' => $res]);
    }

    //加盟留言
    public function message_add(){
        $data=$this->request->param();
        $res = db('message')->data($data)->insert();
        if($res){
            return json(['code' => 100, 'msg' => '留言成功']);
        }else{
            return json(['code' => 0, 'msg' => '留言异常']);
        }

    }

    /**
     * 我的團隊成員
     */
    public function teamList($pagecur,$userid){
        $num = 6;
        $limtS = $pagecur * $num;
        $resTeamList = db('user a')->field('a.id,a.xm,a.mobile,a.nickname,a.reid,a.portrait,a.status,h.name as address')
            ->limit($limtS, $num)
            ->join('hygroup h','h.id=a.hygroup')
            ->where(['reid'=>$userid])
            ->order('a.id desc')->select();
        $resTeamCount = db('user')->field('id,title,reid,price,image,sales')->where(['reid'=>$userid])->order('id desc')->count();
        $len = ceil($resTeamCount / $num);
        $json = [
            'len' => $len, 'Count' => $resTeamCount, 'resTeamList' => $resTeamList
        ];
        if ($resTeamList) {
            $data = ['code' => 100, 'msg' => '获取成功', 'data' => $json];
        } else {
            $data = ['code' => 0, 'msg' => '获取失败'];
        }
        return json($data);
    }

}